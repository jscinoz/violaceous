// TODO: use bindgen! macro when it works again

// This is a generated binding! Suppress these warnings
#![allow(dead_code, non_camel_case_types, non_snake_case)]

/* automatically generated by rust-bindgen */

pub type ptrdiff_t = ::std::os::raw::c_long;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: ::std::os::raw::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type max_align_t = Struct_Unnamed1;
pub type gint8 = ::std::os::raw::c_char;
pub type guint8 = ::std::os::raw::c_uchar;
pub type gint16 = ::std::os::raw::c_short;
pub type guint16 = ::std::os::raw::c_ushort;
pub type gint32 = ::std::os::raw::c_int;
pub type guint32 = ::std::os::raw::c_uint;
pub type gint64 = ::std::os::raw::c_long;
pub type guint64 = ::std::os::raw::c_ulong;
pub type gssize = ::std::os::raw::c_long;
pub type gsize = ::std::os::raw::c_ulong;
pub type goffset = gint64;
pub type gintptr = ::std::os::raw::c_long;
pub type guintptr = ::std::os::raw::c_ulong;
pub type GPid = ::std::os::raw::c_int;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed2;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
impl ::std::clone::Clone for Struct_itimerspec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_itimerspec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pid_t = __pid_t;
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
impl ::std::clone::Clone for Struct___locale_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type gchar = ::std::os::raw::c_char;
pub type gshort = ::std::os::raw::c_short;
pub type glong = ::std::os::raw::c_long;
pub type gint = ::std::os::raw::c_int;
pub type gboolean = gint;
pub type guchar = ::std::os::raw::c_uchar;
pub type gushort = ::std::os::raw::c_ushort;
pub type gulong = ::std::os::raw::c_ulong;
pub type guint = ::std::os::raw::c_uint;
pub type gfloat = ::std::os::raw::c_float;
pub type gdouble = ::std::os::raw::c_double;
pub type gpointer = *mut ::std::os::raw::c_void;
pub type gconstpointer = *const ::std::os::raw::c_void;
pub type GCompareFunc =
    ::std::option::Option<extern "C" fn(a: gconstpointer, b: gconstpointer)
                              -> gint>;
pub type GCompareDataFunc =
    ::std::option::Option<extern "C" fn(a: gconstpointer, b: gconstpointer,
                                        user_data: gpointer) -> gint>;
pub type GEqualFunc =
    ::std::option::Option<extern "C" fn(a: gconstpointer, b: gconstpointer)
                              -> gboolean>;
pub type GDestroyNotify =
    ::std::option::Option<extern "C" fn(data: gpointer)>;
pub type GFunc =
    ::std::option::Option<extern "C" fn(data: gpointer, user_data: gpointer)>;
pub type GHashFunc =
    ::std::option::Option<extern "C" fn(key: gconstpointer) -> guint>;
pub type GHFunc =
    ::std::option::Option<extern "C" fn(key: gpointer, value: gpointer,
                                        user_data: gpointer)>;
pub type GFreeFunc = ::std::option::Option<extern "C" fn(data: gpointer)>;
pub type GTranslateFunc =
    ::std::option::Option<unsafe extern "C" fn(str: *const gchar,
                                               data: gpointer)
                              -> *const gchar>;
pub type GDoubleIEEE754 = Union__GDoubleIEEE754;
pub type GFloatIEEE754 = Union__GFloatIEEE754;
#[repr(C)]
#[derive(Copy)]
pub struct Union__GFloatIEEE754 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union__GFloatIEEE754 {
    pub unsafe fn v_float(&mut self) -> *mut gfloat {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mpn(&mut self) -> *mut Struct_Unnamed3 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union__GFloatIEEE754 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union__GFloatIEEE754 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub _bindgen_bitfield_1_: guint,
    pub _bindgen_bitfield_2_: guint,
    pub _bindgen_bitfield_3_: guint,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union__GDoubleIEEE754 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union__GDoubleIEEE754 {
    pub unsafe fn v_double(&mut self) -> *mut gdouble {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn mpn(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union__GDoubleIEEE754 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union__GDoubleIEEE754 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub _bindgen_bitfield_1_: guint,
    pub _bindgen_bitfield_2_: guint,
    pub _bindgen_bitfield_3_: guint,
    pub _bindgen_bitfield_4_: guint,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GTimeVal = Struct__GTimeVal;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GTimeVal {
    pub tv_sec: glong,
    pub tv_usec: glong,
}
impl ::std::clone::Clone for Struct__GTimeVal {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GTimeVal {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__GBytes { }
pub type GBytes = Struct__GBytes;
pub type GArray = Struct__GArray;
pub type GByteArray = Struct__GByteArray;
pub type GPtrArray = Struct__GPtrArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GArray {
    pub data: *mut gchar,
    pub len: guint,
}
impl ::std::clone::Clone for Struct__GArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GByteArray {
    pub data: *mut guint8,
    pub len: guint,
}
impl ::std::clone::Clone for Struct__GByteArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GByteArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GPtrArray {
    pub pdata: *mut gpointer,
    pub len: guint,
}
impl ::std::clone::Clone for Struct__GPtrArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GPtrArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type GQuark = guint32;
pub type GError = Struct__GError;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GError {
    pub domain: GQuark,
    pub code: gint,
    pub message: *mut gchar,
}
impl ::std::clone::Clone for Struct__GError {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GError {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed5 {
    G_USER_DIRECTORY_DESKTOP = 0,
    G_USER_DIRECTORY_DOCUMENTS = 1,
    G_USER_DIRECTORY_DOWNLOAD = 2,
    G_USER_DIRECTORY_MUSIC = 3,
    G_USER_DIRECTORY_PICTURES = 4,
    G_USER_DIRECTORY_PUBLIC_SHARE = 5,
    G_USER_DIRECTORY_TEMPLATES = 6,
    G_USER_DIRECTORY_VIDEOS = 7,
    G_USER_N_DIRECTORIES = 8,
}
pub type GUserDirectory = Enum_Unnamed5;
pub type GDebugKey = Struct__GDebugKey;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GDebugKey {
    pub key: *const gchar,
    pub value: guint,
}
impl ::std::clone::Clone for Struct__GDebugKey {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GDebugKey {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed6 {
    G_FORMAT_SIZE_DEFAULT = 0,
    G_FORMAT_SIZE_LONG_FORMAT = 1,
    G_FORMAT_SIZE_IEC_UNITS = 2,
}
pub type GFormatSizeFlags = Enum_Unnamed6;
pub type GVoidFunc = ::std::option::Option<extern "C" fn()>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed7 { G_THREAD_ERROR_AGAIN = 0, }
pub type GThreadError = Enum_Unnamed7;
pub type GThreadFunc =
    ::std::option::Option<extern "C" fn(data: gpointer) -> gpointer>;
pub type GThread = Struct__GThread;
pub type GMutex = Union__GMutex;
pub type GRecMutex = Struct__GRecMutex;
pub type GRWLock = Struct__GRWLock;
pub type GCond = Struct__GCond;
pub type GPrivate = Struct__GPrivate;
pub type GOnce = Struct__GOnce;
#[repr(C)]
#[derive(Copy)]
pub struct Union__GMutex {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union__GMutex {
    pub unsafe fn p(&mut self) -> *mut gpointer {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut [guint; 2usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union__GMutex {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union__GMutex {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GRWLock {
    pub p: gpointer,
    pub i: [guint; 2usize],
}
impl ::std::clone::Clone for Struct__GRWLock {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GRWLock {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GCond {
    pub p: gpointer,
    pub i: [guint; 2usize],
}
impl ::std::clone::Clone for Struct__GCond {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GCond {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GRecMutex {
    pub p: gpointer,
    pub i: [guint; 2usize],
}
impl ::std::clone::Clone for Struct__GRecMutex {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GRecMutex {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GPrivate {
    pub p: gpointer,
    pub notify: GDestroyNotify,
    pub future: [gpointer; 2usize],
}
impl ::std::clone::Clone for Struct__GPrivate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GPrivate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed8 {
    G_ONCE_STATUS_NOTCALLED = 0,
    G_ONCE_STATUS_PROGRESS = 1,
    G_ONCE_STATUS_READY = 2,
}
pub type GOnceStatus = Enum_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GOnce {
    pub status: GOnceStatus,
    pub retval: gpointer,
}
impl ::std::clone::Clone for Struct__GOnce {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GOnce {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GMutexLocker = ::std::os::raw::c_void;
pub enum Struct__GAsyncQueue { }
pub type GAsyncQueue = Struct__GAsyncQueue;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed9;
pub type sig_atomic_t = __sig_atomic_t;
pub type sigset_t = __sigset_t;
pub type uid_t = __uid_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_sigval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigval_t = Union_sigval;
pub type __sigchld_clock_t = __clock_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub _sifields: Union_Unnamed11,
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u64; 14usize],
}
impl Union_Unnamed11 {
    pub unsafe fn _pad(&mut self) -> *mut [::std::os::raw::c_int; 28usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _kill(&mut self) -> *mut Struct_Unnamed12 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _timer(&mut self) -> *mut Struct_Unnamed13 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _rt(&mut self) -> *mut Struct_Unnamed14 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigchld(&mut self) -> *mut Struct_Unnamed15 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigfault(&mut self) -> *mut Struct_Unnamed16 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigpoll(&mut self) -> *mut Struct_Unnamed18 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigsys(&mut self) -> *mut Struct_Unnamed19 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
impl ::std::clone::Clone for Struct_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: sigval_t,
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
impl ::std::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __sigchld_clock_t,
    pub si_stime: __sigchld_clock_t,
}
impl ::std::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub si_addr_bnd: Struct_Unnamed17,
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed19 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = Struct_Unnamed10;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_Unnamed20 {
    SI_ASYNCNL = -60,
    SI_TKILL = -6,
    SI_SIGIO = -5,
    SI_ASYNCIO = -4,
    SI_MESGQ = -3,
    SI_TIMER = -2,
    SI_QUEUE = -1,
    SI_USER = 0,
    SI_KERNEL = 128,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed21 {
    ILL_ILLOPC = 1,
    ILL_ILLOPN = 2,
    ILL_ILLADR = 3,
    ILL_ILLTRP = 4,
    ILL_PRVOPC = 5,
    ILL_PRVREG = 6,
    ILL_COPROC = 7,
    ILL_BADSTK = 8,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed22 {
    FPE_INTDIV = 1,
    FPE_INTOVF = 2,
    FPE_FLTDIV = 3,
    FPE_FLTOVF = 4,
    FPE_FLTUND = 5,
    FPE_FLTRES = 6,
    FPE_FLTINV = 7,
    FPE_FLTSUB = 8,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed23 { SEGV_MAPERR = 1, SEGV_ACCERR = 2, }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed24 {
    BUS_ADRALN = 1,
    BUS_ADRERR = 2,
    BUS_OBJERR = 3,
    BUS_MCEERR_AR = 4,
    BUS_MCEERR_AO = 5,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed25 {
    CLD_EXITED = 1,
    CLD_KILLED = 2,
    CLD_DUMPED = 3,
    CLD_TRAPPED = 4,
    CLD_STOPPED = 5,
    CLD_CONTINUED = 6,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed26 {
    POLL_IN = 1,
    POLL_OUT = 2,
    POLL_MSG = 3,
    POLL_ERR = 4,
    POLL_PRI = 5,
    POLL_HUP = 6,
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: Union_Unnamed27,
}
impl ::std::clone::Clone for Struct_sigevent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed27 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed27 {
    pub unsafe fn _pad(&mut self) -> *mut [::std::os::raw::c_int; 12usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _tid(&mut self) -> *mut __pid_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigev_thread(&mut self) -> *mut Struct_Unnamed28 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed27 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed27 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed28 {
    pub _function: ::std::option::Option<extern "C" fn(arg1: sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
impl ::std::clone::Clone for Struct_Unnamed28 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigevent_t = Struct_sigevent;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed29 {
    SIGEV_SIGNAL = 0,
    SIGEV_NONE = 1,
    SIGEV_THREAD = 2,
    SIGEV_THREAD_ID = 4,
}
pub type __sighandler_t =
    ::std::option::Option<extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type sig_t = __sighandler_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaction {
    pub __sigaction_handler: Union_Unnamed30,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed30 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed30 {
    pub unsafe fn sa_handler(&mut self) -> *mut __sighandler_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             ::std::os::raw::c_int,
                                                         arg2: *mut siginfo_t,
                                                         arg3:
                                                             *mut ::std::os::raw::c_void)> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed30 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed30 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub padding: [__uint32_t; 7usize],
}
impl ::std::clone::Clone for Struct__fpx_sw_bytes {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__fpx_sw_bytes {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct__fpreg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__fpreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
impl ::std::clone::Clone for Struct__fpxreg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__fpxreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xmmreg {
    pub element: [__uint32_t; 4usize],
}
impl ::std::clone::Clone for Struct__xmmreg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__xmmreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [Struct__fpxreg; 8usize],
    pub _xmm: [Struct__xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
impl ::std::clone::Clone for Struct__fpstate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__fpstate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub _bindgen_data_1_: [u64; 1usize],
    pub __reserved1: [__uint64_t; 8usize],
}
impl Struct_sigcontext {
    pub unsafe fn fpstate(&mut self) -> *mut *mut Struct__fpstate {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __fpstate_word(&mut self) -> *mut __uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_sigcontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigcontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub reserved1: [__uint64_t; 2usize],
    pub reserved2: [__uint64_t; 5usize],
}
impl ::std::clone::Clone for Struct__xsave_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__xsave_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
impl ::std::clone::Clone for Struct__ymmh_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ymmh_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xstate {
    pub fpstate: Struct__fpstate,
    pub xstate_hdr: Struct__xsave_hdr,
    pub ymmh: Struct__ymmh_state,
}
impl ::std::clone::Clone for Struct__xstate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__xstate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_sigstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed31 { SS_ONSTACK = 1, SS_DISABLE = 2, }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: size_t,
}
impl ::std::clone::Clone for Struct_sigaltstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigaltstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = Struct_sigaltstack;
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct__libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub padding: [::std::os::raw::c_ushort; 3usize],
}
impl ::std::clone::Clone for Struct__libc_fpxreg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__libc_fpxreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
impl ::std::clone::Clone for Struct__libc_xmmreg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__libc_xmmreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [Struct__libc_fpxreg; 8usize],
    pub _xmm: [Struct__libc_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
impl ::std::clone::Clone for Struct__libc_fpstate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__libc_fpstate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fpregset_t = *mut Struct__libc_fpstate;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed32 {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
impl ::std::clone::Clone for Struct_Unnamed32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mcontext_t = Struct_Unnamed32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ucontext {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut Struct_ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub __fpregs_mem: Struct__libc_fpstate,
}
impl ::std::clone::Clone for Struct_ucontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ucontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = Struct_ucontext;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::clone::Clone for Struct___pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed33 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed33 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed33 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed33 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::clone::Clone for Struct___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutex_t = Union_Unnamed33;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed34 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed34 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed34 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed34 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed34;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed35 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed35 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed36 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed35 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed35 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed36 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed36 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed36 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed35;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed37 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed37 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed37 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed37 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed37;
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed38 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed38 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed39 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed38 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed38 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed39 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_char,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed39 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed39 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed38;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed40 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed40 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed40 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed40 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed40;
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed41 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed41 {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed41 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed41 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed41;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed42 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed42 {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed42 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed42 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed42;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed43 {
    G_BOOKMARK_FILE_ERROR_INVALID_URI = 0,
    G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1,
    G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2,
    G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3,
    G_BOOKMARK_FILE_ERROR_READ = 4,
    G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5,
    G_BOOKMARK_FILE_ERROR_WRITE = 6,
    G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7,
}
pub type GBookmarkFileError = Enum_Unnamed43;
pub enum Struct__GBookmarkFile { }
pub type GBookmarkFile = Struct__GBookmarkFile;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed44 {
    G_CHECKSUM_MD5 = 0,
    G_CHECKSUM_SHA1 = 1,
    G_CHECKSUM_SHA256 = 2,
    G_CHECKSUM_SHA512 = 3,
}
pub type GChecksumType = Enum_Unnamed44;
pub enum Struct__GChecksum { }
pub type GChecksum = Struct__GChecksum;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed45 {
    G_CONVERT_ERROR_NO_CONVERSION = 0,
    G_CONVERT_ERROR_ILLEGAL_SEQUENCE = 1,
    G_CONVERT_ERROR_FAILED = 2,
    G_CONVERT_ERROR_PARTIAL_INPUT = 3,
    G_CONVERT_ERROR_BAD_URI = 4,
    G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5,
    G_CONVERT_ERROR_NO_MEMORY = 6,
}
pub type GConvertError = Enum_Unnamed45;
pub enum Struct__GIConv { }
pub type GIConv = *mut Struct__GIConv;
pub enum Struct__GData { }
pub type GData = Struct__GData;
pub type GDataForeachFunc =
    ::std::option::Option<extern "C" fn(key_id: GQuark, data: gpointer,
                                        user_data: gpointer)>;
pub type GDuplicateFunc =
    ::std::option::Option<extern "C" fn(data: gpointer, user_data: gpointer)
                              -> gpointer>;
pub type GTime = gint32;
pub type GDateYear = guint16;
pub type GDateDay = guint8;
pub type GDate = Struct__GDate;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed46 { G_DATE_DAY = 0, G_DATE_MONTH = 1, G_DATE_YEAR = 2, }
pub type GDateDMY = Enum_Unnamed46;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed47 {
    G_DATE_BAD_WEEKDAY = 0,
    G_DATE_MONDAY = 1,
    G_DATE_TUESDAY = 2,
    G_DATE_WEDNESDAY = 3,
    G_DATE_THURSDAY = 4,
    G_DATE_FRIDAY = 5,
    G_DATE_SATURDAY = 6,
    G_DATE_SUNDAY = 7,
}
pub type GDateWeekday = Enum_Unnamed47;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed48 {
    G_DATE_BAD_MONTH = 0,
    G_DATE_JANUARY = 1,
    G_DATE_FEBRUARY = 2,
    G_DATE_MARCH = 3,
    G_DATE_APRIL = 4,
    G_DATE_MAY = 5,
    G_DATE_JUNE = 6,
    G_DATE_JULY = 7,
    G_DATE_AUGUST = 8,
    G_DATE_SEPTEMBER = 9,
    G_DATE_OCTOBER = 10,
    G_DATE_NOVEMBER = 11,
    G_DATE_DECEMBER = 12,
}
pub type GDateMonth = Enum_Unnamed48;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GDate {
    pub _bindgen_bitfield_1_: guint,
    pub _bindgen_bitfield_2_: guint,
    pub _bindgen_bitfield_3_: guint,
    pub _bindgen_bitfield_4_: guint,
    pub _bindgen_bitfield_5_: guint,
    pub _bindgen_bitfield_6_: guint,
}
impl ::std::clone::Clone for Struct__GDate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GDate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__GTimeZone { }
pub type GTimeZone = Struct__GTimeZone;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed49 {
    G_TIME_TYPE_STANDARD = 0,
    G_TIME_TYPE_DAYLIGHT = 1,
    G_TIME_TYPE_UNIVERSAL = 2,
}
pub type GTimeType = Enum_Unnamed49;
pub type GTimeSpan = gint64;
pub enum Struct__GDateTime { }
pub type GDateTime = Struct__GDateTime;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
impl ::std::clone::Clone for Struct_dirent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_dirent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed50 {
    DT_UNKNOWN = 0,
    DT_FIFO = 1,
    DT_CHR = 2,
    DT_DIR = 4,
    DT_BLK = 6,
    DT_REG = 8,
    DT_LNK = 10,
    DT_SOCK = 12,
    DT_WHT = 14,
}
pub enum Struct___dirstream { }
pub type DIR = Struct___dirstream;
pub enum Struct__GDir { }
pub type GDir = Struct__GDir;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed51 {
    G_FILE_ERROR_EXIST = 0,
    G_FILE_ERROR_ISDIR = 1,
    G_FILE_ERROR_ACCES = 2,
    G_FILE_ERROR_NAMETOOLONG = 3,
    G_FILE_ERROR_NOENT = 4,
    G_FILE_ERROR_NOTDIR = 5,
    G_FILE_ERROR_NXIO = 6,
    G_FILE_ERROR_NODEV = 7,
    G_FILE_ERROR_ROFS = 8,
    G_FILE_ERROR_TXTBSY = 9,
    G_FILE_ERROR_FAULT = 10,
    G_FILE_ERROR_LOOP = 11,
    G_FILE_ERROR_NOSPC = 12,
    G_FILE_ERROR_NOMEM = 13,
    G_FILE_ERROR_MFILE = 14,
    G_FILE_ERROR_NFILE = 15,
    G_FILE_ERROR_BADF = 16,
    G_FILE_ERROR_INVAL = 17,
    G_FILE_ERROR_PIPE = 18,
    G_FILE_ERROR_AGAIN = 19,
    G_FILE_ERROR_INTR = 20,
    G_FILE_ERROR_IO = 21,
    G_FILE_ERROR_PERM = 22,
    G_FILE_ERROR_NOSYS = 23,
    G_FILE_ERROR_FAILED = 24,
}
pub type GFileError = Enum_Unnamed51;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed52 {
    G_FILE_TEST_IS_REGULAR = 1,
    G_FILE_TEST_IS_SYMLINK = 2,
    G_FILE_TEST_IS_DIR = 4,
    G_FILE_TEST_IS_EXECUTABLE = 8,
    G_FILE_TEST_EXISTS = 16,
}
pub type GFileTest = Enum_Unnamed52;
pub type GMemVTable = Struct__GMemVTable;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GMemVTable {
    pub malloc: ::std::option::Option<extern "C" fn(n_bytes: gsize)
                                          -> gpointer>,
    pub realloc: ::std::option::Option<extern "C" fn(mem: gpointer,
                                                     n_bytes: gsize)
                                           -> gpointer>,
    pub free: ::std::option::Option<extern "C" fn(mem: gpointer)>,
    pub calloc: ::std::option::Option<extern "C" fn(n_blocks: gsize,
                                                    n_block_bytes: gsize)
                                          -> gpointer>,
    pub try_malloc: ::std::option::Option<extern "C" fn(n_bytes: gsize)
                                              -> gpointer>,
    pub try_realloc: ::std::option::Option<extern "C" fn(mem: gpointer,
                                                         n_bytes: gsize)
                                               -> gpointer>,
}
impl ::std::clone::Clone for Struct__GMemVTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GMemVTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GNode = Struct__GNode;
pub const G_TRAVERSE_MASK: Enum_Unnamed53 = Enum_Unnamed53::G_TRAVERSE_ALL;
pub const G_TRAVERSE_LEAFS: Enum_Unnamed53 =
    Enum_Unnamed53::G_TRAVERSE_LEAVES;
pub const G_TRAVERSE_NON_LEAFS: Enum_Unnamed53 =
    Enum_Unnamed53::G_TRAVERSE_NON_LEAVES;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed53 {
    G_TRAVERSE_LEAVES = 1,
    G_TRAVERSE_NON_LEAVES = 2,
    G_TRAVERSE_ALL = 3,
}
pub type GTraverseFlags = Enum_Unnamed53;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed54 {
    G_IN_ORDER = 0,
    G_PRE_ORDER = 1,
    G_POST_ORDER = 2,
    G_LEVEL_ORDER = 3,
}
pub type GTraverseType = Enum_Unnamed54;
pub type GNodeTraverseFunc =
    ::std::option::Option<unsafe extern "C" fn(node: *mut GNode,
                                               data: gpointer) -> gboolean>;
pub type GNodeForeachFunc =
    ::std::option::Option<unsafe extern "C" fn(node: *mut GNode,
                                               data: gpointer)>;
pub type GCopyFunc =
    ::std::option::Option<extern "C" fn(src: gconstpointer, data: gpointer)
                              -> gpointer>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GNode {
    pub data: gpointer,
    pub next: *mut GNode,
    pub prev: *mut GNode,
    pub parent: *mut GNode,
    pub children: *mut GNode,
}
impl ::std::clone::Clone for Struct__GNode {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GNode {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GList = Struct__GList;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GList {
    pub data: gpointer,
    pub next: *mut GList,
    pub prev: *mut GList,
}
impl ::std::clone::Clone for Struct__GList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__GHashTable { }
pub type GHashTable = Struct__GHashTable;
pub type GHRFunc =
    ::std::option::Option<extern "C" fn(key: gpointer, value: gpointer,
                                        user_data: gpointer) -> gboolean>;
pub type GHashTableIter = Struct__GHashTableIter;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GHashTableIter {
    pub dummy1: gpointer,
    pub dummy2: gpointer,
    pub dummy3: gpointer,
    pub dummy4: ::std::os::raw::c_int,
    pub dummy5: gboolean,
    pub dummy6: gpointer,
}
impl ::std::clone::Clone for Struct__GHashTableIter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GHashTableIter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__GHmac { }
pub type GHmac = Struct__GHmac;
pub type GHook = Struct__GHook;
pub type GHookList = Struct__GHookList;
pub type GHookCompareFunc =
    ::std::option::Option<unsafe extern "C" fn(new_hook: *mut GHook,
                                               sibling: *mut GHook) -> gint>;
pub type GHookFindFunc =
    ::std::option::Option<unsafe extern "C" fn(hook: *mut GHook,
                                               data: gpointer) -> gboolean>;
pub type GHookMarshaller =
    ::std::option::Option<unsafe extern "C" fn(hook: *mut GHook,
                                               marshal_data: gpointer)>;
pub type GHookCheckMarshaller =
    ::std::option::Option<unsafe extern "C" fn(hook: *mut GHook,
                                               marshal_data: gpointer)
                              -> gboolean>;
pub type GHookFunc = ::std::option::Option<extern "C" fn(data: gpointer)>;
pub type GHookCheckFunc =
    ::std::option::Option<extern "C" fn(data: gpointer) -> gboolean>;
pub type GHookFinalizeFunc =
    ::std::option::Option<unsafe extern "C" fn(hook_list: *mut GHookList,
                                               hook: *mut GHook)>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed55 {
    G_HOOK_FLAG_ACTIVE = 1,
    G_HOOK_FLAG_IN_CALL = 2,
    G_HOOK_FLAG_MASK = 15,
}
pub type GHookFlagMask = Enum_Unnamed55;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GHookList {
    pub seq_id: gulong,
    pub _bindgen_bitfield_1_: guint,
    pub _bindgen_bitfield_2_: guint,
    pub hooks: *mut GHook,
    pub dummy3: gpointer,
    pub finalize_hook: GHookFinalizeFunc,
    pub dummy: [gpointer; 2usize],
}
impl ::std::clone::Clone for Struct__GHookList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GHookList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GHook {
    pub data: gpointer,
    pub next: *mut GHook,
    pub prev: *mut GHook,
    pub ref_count: guint,
    pub hook_id: gulong,
    pub flags: guint,
    pub func: gpointer,
    pub destroy: GDestroyNotify,
}
impl ::std::clone::Clone for Struct__GHook {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GHook {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GPollFD = Struct__GPollFD;
pub type GPollFunc =
    ::std::option::Option<unsafe extern "C" fn(ufds: *mut GPollFD,
                                               nfsd: guint, timeout_: gint)
                              -> gint>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GPollFD {
    pub fd: gint,
    pub events: gushort,
    pub revents: gushort,
}
impl ::std::clone::Clone for Struct__GPollFD {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GPollFD {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GSList = Struct__GSList;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GSList {
    pub data: gpointer,
    pub next: *mut GSList,
}
impl ::std::clone::Clone for Struct__GSList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GSList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed56 {
    G_IO_IN = 1,
    G_IO_OUT = 4,
    G_IO_PRI = 2,
    G_IO_ERR = 8,
    G_IO_HUP = 16,
    G_IO_NVAL = 32,
}
pub type GIOCondition = Enum_Unnamed56;
pub enum Struct__GMainContext { }
pub type GMainContext = Struct__GMainContext;
pub enum Struct__GMainLoop { }
pub type GMainLoop = Struct__GMainLoop;
pub type GSource = Struct__GSource;
pub enum Struct__GSourcePrivate { }
pub type GSourcePrivate = Struct__GSourcePrivate;
pub type GSourceCallbackFuncs = Struct__GSourceCallbackFuncs;
pub type GSourceFuncs = Struct__GSourceFuncs;
pub type GSourceFunc =
    ::std::option::Option<extern "C" fn(user_data: gpointer) -> gboolean>;
pub type GChildWatchFunc =
    ::std::option::Option<extern "C" fn(pid: GPid, status: gint,
                                        user_data: gpointer)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GSource {
    pub callback_data: gpointer,
    pub callback_funcs: *mut GSourceCallbackFuncs,
    pub source_funcs: *const GSourceFuncs,
    pub ref_count: guint,
    pub context: *mut GMainContext,
    pub priority: gint,
    pub flags: guint,
    pub source_id: guint,
    pub poll_fds: *mut GSList,
    pub prev: *mut GSource,
    pub next: *mut GSource,
    pub name: *mut ::std::os::raw::c_char,
    pub _priv: *mut GSourcePrivate,
}
impl ::std::clone::Clone for Struct__GSource {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GSource {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GSourceCallbackFuncs {
    pub _ref: ::std::option::Option<extern "C" fn(cb_data: gpointer)>,
    pub unref: ::std::option::Option<extern "C" fn(cb_data: gpointer)>,
    pub get: ::std::option::Option<unsafe extern "C" fn(cb_data: gpointer,
                                                        source: *mut GSource,
                                                        func:
                                                            *mut GSourceFunc,
                                                        data: *mut gpointer)>,
}
impl ::std::clone::Clone for Struct__GSourceCallbackFuncs {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GSourceCallbackFuncs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GSourceDummyMarshal = ::std::option::Option<extern "C" fn()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GSourceFuncs {
    pub prepare: ::std::option::Option<unsafe extern "C" fn(source:
                                                                *mut GSource,
                                                            timeout_:
                                                                *mut gint)
                                           -> gboolean>,
    pub check: ::std::option::Option<unsafe extern "C" fn(source:
                                                              *mut GSource)
                                         -> gboolean>,
    pub dispatch: ::std::option::Option<unsafe extern "C" fn(source:
                                                                 *mut GSource,
                                                             callback:
                                                                 GSourceFunc,
                                                             user_data:
                                                                 gpointer)
                                            -> gboolean>,
    pub finalize: ::std::option::Option<unsafe extern "C" fn(source:
                                                                 *mut GSource)>,
    pub closure_callback: GSourceFunc,
    pub closure_marshal: GSourceDummyMarshal,
}
impl ::std::clone::Clone for Struct__GSourceFuncs {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GSourceFuncs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gunichar = guint32;
pub type gunichar2 = guint16;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed57 {
    G_UNICODE_CONTROL = 0,
    G_UNICODE_FORMAT = 1,
    G_UNICODE_UNASSIGNED = 2,
    G_UNICODE_PRIVATE_USE = 3,
    G_UNICODE_SURROGATE = 4,
    G_UNICODE_LOWERCASE_LETTER = 5,
    G_UNICODE_MODIFIER_LETTER = 6,
    G_UNICODE_OTHER_LETTER = 7,
    G_UNICODE_TITLECASE_LETTER = 8,
    G_UNICODE_UPPERCASE_LETTER = 9,
    G_UNICODE_SPACING_MARK = 10,
    G_UNICODE_ENCLOSING_MARK = 11,
    G_UNICODE_NON_SPACING_MARK = 12,
    G_UNICODE_DECIMAL_NUMBER = 13,
    G_UNICODE_LETTER_NUMBER = 14,
    G_UNICODE_OTHER_NUMBER = 15,
    G_UNICODE_CONNECT_PUNCTUATION = 16,
    G_UNICODE_DASH_PUNCTUATION = 17,
    G_UNICODE_CLOSE_PUNCTUATION = 18,
    G_UNICODE_FINAL_PUNCTUATION = 19,
    G_UNICODE_INITIAL_PUNCTUATION = 20,
    G_UNICODE_OTHER_PUNCTUATION = 21,
    G_UNICODE_OPEN_PUNCTUATION = 22,
    G_UNICODE_CURRENCY_SYMBOL = 23,
    G_UNICODE_MODIFIER_SYMBOL = 24,
    G_UNICODE_MATH_SYMBOL = 25,
    G_UNICODE_OTHER_SYMBOL = 26,
    G_UNICODE_LINE_SEPARATOR = 27,
    G_UNICODE_PARAGRAPH_SEPARATOR = 28,
    G_UNICODE_SPACE_SEPARATOR = 29,
}
pub type GUnicodeType = Enum_Unnamed57;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed58 {
    G_UNICODE_BREAK_MANDATORY = 0,
    G_UNICODE_BREAK_CARRIAGE_RETURN = 1,
    G_UNICODE_BREAK_LINE_FEED = 2,
    G_UNICODE_BREAK_COMBINING_MARK = 3,
    G_UNICODE_BREAK_SURROGATE = 4,
    G_UNICODE_BREAK_ZERO_WIDTH_SPACE = 5,
    G_UNICODE_BREAK_INSEPARABLE = 6,
    G_UNICODE_BREAK_NON_BREAKING_GLUE = 7,
    G_UNICODE_BREAK_CONTINGENT = 8,
    G_UNICODE_BREAK_SPACE = 9,
    G_UNICODE_BREAK_AFTER = 10,
    G_UNICODE_BREAK_BEFORE = 11,
    G_UNICODE_BREAK_BEFORE_AND_AFTER = 12,
    G_UNICODE_BREAK_HYPHEN = 13,
    G_UNICODE_BREAK_NON_STARTER = 14,
    G_UNICODE_BREAK_OPEN_PUNCTUATION = 15,
    G_UNICODE_BREAK_CLOSE_PUNCTUATION = 16,
    G_UNICODE_BREAK_QUOTATION = 17,
    G_UNICODE_BREAK_EXCLAMATION = 18,
    G_UNICODE_BREAK_IDEOGRAPHIC = 19,
    G_UNICODE_BREAK_NUMERIC = 20,
    G_UNICODE_BREAK_INFIX_SEPARATOR = 21,
    G_UNICODE_BREAK_SYMBOL = 22,
    G_UNICODE_BREAK_ALPHABETIC = 23,
    G_UNICODE_BREAK_PREFIX = 24,
    G_UNICODE_BREAK_POSTFIX = 25,
    G_UNICODE_BREAK_COMPLEX_CONTEXT = 26,
    G_UNICODE_BREAK_AMBIGUOUS = 27,
    G_UNICODE_BREAK_UNKNOWN = 28,
    G_UNICODE_BREAK_NEXT_LINE = 29,
    G_UNICODE_BREAK_WORD_JOINER = 30,
    G_UNICODE_BREAK_HANGUL_L_JAMO = 31,
    G_UNICODE_BREAK_HANGUL_V_JAMO = 32,
    G_UNICODE_BREAK_HANGUL_T_JAMO = 33,
    G_UNICODE_BREAK_HANGUL_LV_SYLLABLE = 34,
    G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE = 35,
    G_UNICODE_BREAK_CLOSE_PARANTHESIS = 36,
    G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = 37,
    G_UNICODE_BREAK_HEBREW_LETTER = 38,
    G_UNICODE_BREAK_REGIONAL_INDICATOR = 39,
}
pub type GUnicodeBreakType = Enum_Unnamed58;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_Unnamed59 {
    G_UNICODE_SCRIPT_INVALID_CODE = -1,
    G_UNICODE_SCRIPT_COMMON = 0,
    G_UNICODE_SCRIPT_INHERITED = 1,
    G_UNICODE_SCRIPT_ARABIC = 2,
    G_UNICODE_SCRIPT_ARMENIAN = 3,
    G_UNICODE_SCRIPT_BENGALI = 4,
    G_UNICODE_SCRIPT_BOPOMOFO = 5,
    G_UNICODE_SCRIPT_CHEROKEE = 6,
    G_UNICODE_SCRIPT_COPTIC = 7,
    G_UNICODE_SCRIPT_CYRILLIC = 8,
    G_UNICODE_SCRIPT_DESERET = 9,
    G_UNICODE_SCRIPT_DEVANAGARI = 10,
    G_UNICODE_SCRIPT_ETHIOPIC = 11,
    G_UNICODE_SCRIPT_GEORGIAN = 12,
    G_UNICODE_SCRIPT_GOTHIC = 13,
    G_UNICODE_SCRIPT_GREEK = 14,
    G_UNICODE_SCRIPT_GUJARATI = 15,
    G_UNICODE_SCRIPT_GURMUKHI = 16,
    G_UNICODE_SCRIPT_HAN = 17,
    G_UNICODE_SCRIPT_HANGUL = 18,
    G_UNICODE_SCRIPT_HEBREW = 19,
    G_UNICODE_SCRIPT_HIRAGANA = 20,
    G_UNICODE_SCRIPT_KANNADA = 21,
    G_UNICODE_SCRIPT_KATAKANA = 22,
    G_UNICODE_SCRIPT_KHMER = 23,
    G_UNICODE_SCRIPT_LAO = 24,
    G_UNICODE_SCRIPT_LATIN = 25,
    G_UNICODE_SCRIPT_MALAYALAM = 26,
    G_UNICODE_SCRIPT_MONGOLIAN = 27,
    G_UNICODE_SCRIPT_MYANMAR = 28,
    G_UNICODE_SCRIPT_OGHAM = 29,
    G_UNICODE_SCRIPT_OLD_ITALIC = 30,
    G_UNICODE_SCRIPT_ORIYA = 31,
    G_UNICODE_SCRIPT_RUNIC = 32,
    G_UNICODE_SCRIPT_SINHALA = 33,
    G_UNICODE_SCRIPT_SYRIAC = 34,
    G_UNICODE_SCRIPT_TAMIL = 35,
    G_UNICODE_SCRIPT_TELUGU = 36,
    G_UNICODE_SCRIPT_THAANA = 37,
    G_UNICODE_SCRIPT_THAI = 38,
    G_UNICODE_SCRIPT_TIBETAN = 39,
    G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL = 40,
    G_UNICODE_SCRIPT_YI = 41,
    G_UNICODE_SCRIPT_TAGALOG = 42,
    G_UNICODE_SCRIPT_HANUNOO = 43,
    G_UNICODE_SCRIPT_BUHID = 44,
    G_UNICODE_SCRIPT_TAGBANWA = 45,
    G_UNICODE_SCRIPT_BRAILLE = 46,
    G_UNICODE_SCRIPT_CYPRIOT = 47,
    G_UNICODE_SCRIPT_LIMBU = 48,
    G_UNICODE_SCRIPT_OSMANYA = 49,
    G_UNICODE_SCRIPT_SHAVIAN = 50,
    G_UNICODE_SCRIPT_LINEAR_B = 51,
    G_UNICODE_SCRIPT_TAI_LE = 52,
    G_UNICODE_SCRIPT_UGARITIC = 53,
    G_UNICODE_SCRIPT_NEW_TAI_LUE = 54,
    G_UNICODE_SCRIPT_BUGINESE = 55,
    G_UNICODE_SCRIPT_GLAGOLITIC = 56,
    G_UNICODE_SCRIPT_TIFINAGH = 57,
    G_UNICODE_SCRIPT_SYLOTI_NAGRI = 58,
    G_UNICODE_SCRIPT_OLD_PERSIAN = 59,
    G_UNICODE_SCRIPT_KHAROSHTHI = 60,
    G_UNICODE_SCRIPT_UNKNOWN = 61,
    G_UNICODE_SCRIPT_BALINESE = 62,
    G_UNICODE_SCRIPT_CUNEIFORM = 63,
    G_UNICODE_SCRIPT_PHOENICIAN = 64,
    G_UNICODE_SCRIPT_PHAGS_PA = 65,
    G_UNICODE_SCRIPT_NKO = 66,
    G_UNICODE_SCRIPT_KAYAH_LI = 67,
    G_UNICODE_SCRIPT_LEPCHA = 68,
    G_UNICODE_SCRIPT_REJANG = 69,
    G_UNICODE_SCRIPT_SUNDANESE = 70,
    G_UNICODE_SCRIPT_SAURASHTRA = 71,
    G_UNICODE_SCRIPT_CHAM = 72,
    G_UNICODE_SCRIPT_OL_CHIKI = 73,
    G_UNICODE_SCRIPT_VAI = 74,
    G_UNICODE_SCRIPT_CARIAN = 75,
    G_UNICODE_SCRIPT_LYCIAN = 76,
    G_UNICODE_SCRIPT_LYDIAN = 77,
    G_UNICODE_SCRIPT_AVESTAN = 78,
    G_UNICODE_SCRIPT_BAMUM = 79,
    G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = 80,
    G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC = 81,
    G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = 82,
    G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = 83,
    G_UNICODE_SCRIPT_JAVANESE = 84,
    G_UNICODE_SCRIPT_KAITHI = 85,
    G_UNICODE_SCRIPT_LISU = 86,
    G_UNICODE_SCRIPT_MEETEI_MAYEK = 87,
    G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = 88,
    G_UNICODE_SCRIPT_OLD_TURKIC = 89,
    G_UNICODE_SCRIPT_SAMARITAN = 90,
    G_UNICODE_SCRIPT_TAI_THAM = 91,
    G_UNICODE_SCRIPT_TAI_VIET = 92,
    G_UNICODE_SCRIPT_BATAK = 93,
    G_UNICODE_SCRIPT_BRAHMI = 94,
    G_UNICODE_SCRIPT_MANDAIC = 95,
    G_UNICODE_SCRIPT_CHAKMA = 96,
    G_UNICODE_SCRIPT_MEROITIC_CURSIVE = 97,
    G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = 98,
    G_UNICODE_SCRIPT_MIAO = 99,
    G_UNICODE_SCRIPT_SHARADA = 100,
    G_UNICODE_SCRIPT_SORA_SOMPENG = 101,
    G_UNICODE_SCRIPT_TAKRI = 102,
    G_UNICODE_SCRIPT_BASSA_VAH = 103,
    G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN = 104,
    G_UNICODE_SCRIPT_DUPLOYAN = 105,
    G_UNICODE_SCRIPT_ELBASAN = 106,
    G_UNICODE_SCRIPT_GRANTHA = 107,
    G_UNICODE_SCRIPT_KHOJKI = 108,
    G_UNICODE_SCRIPT_KHUDAWADI = 109,
    G_UNICODE_SCRIPT_LINEAR_A = 110,
    G_UNICODE_SCRIPT_MAHAJANI = 111,
    G_UNICODE_SCRIPT_MANICHAEAN = 112,
    G_UNICODE_SCRIPT_MENDE_KIKAKUI = 113,
    G_UNICODE_SCRIPT_MODI = 114,
    G_UNICODE_SCRIPT_MRO = 115,
    G_UNICODE_SCRIPT_NABATAEAN = 116,
    G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN = 117,
    G_UNICODE_SCRIPT_OLD_PERMIC = 118,
    G_UNICODE_SCRIPT_PAHAWH_HMONG = 119,
    G_UNICODE_SCRIPT_PALMYRENE = 120,
    G_UNICODE_SCRIPT_PAU_CIN_HAU = 121,
    G_UNICODE_SCRIPT_PSALTER_PAHLAVI = 122,
    G_UNICODE_SCRIPT_SIDDHAM = 123,
    G_UNICODE_SCRIPT_TIRHUTA = 124,
    G_UNICODE_SCRIPT_WARANG_CITI = 125,
    G_UNICODE_SCRIPT_AHOM = 126,
    G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS = 127,
    G_UNICODE_SCRIPT_HATRAN = 128,
    G_UNICODE_SCRIPT_MULTANI = 129,
    G_UNICODE_SCRIPT_OLD_HUNGARIAN = 130,
    G_UNICODE_SCRIPT_SIGNWRITING = 131,
}
pub type GUnicodeScript = Enum_Unnamed59;
pub const G_NORMALIZE_NFD: Enum_Unnamed60 =
    Enum_Unnamed60::G_NORMALIZE_DEFAULT;
pub const G_NORMALIZE_NFC: Enum_Unnamed60 =
    Enum_Unnamed60::G_NORMALIZE_DEFAULT_COMPOSE;
pub const G_NORMALIZE_NFKD: Enum_Unnamed60 = Enum_Unnamed60::G_NORMALIZE_ALL;
pub const G_NORMALIZE_NFKC: Enum_Unnamed60 =
    Enum_Unnamed60::G_NORMALIZE_ALL_COMPOSE;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed60 {
    G_NORMALIZE_DEFAULT = 0,
    G_NORMALIZE_DEFAULT_COMPOSE = 1,
    G_NORMALIZE_ALL = 2,
    G_NORMALIZE_ALL_COMPOSE = 3,
}
pub type GNormalizeMode = Enum_Unnamed60;
pub type GString = Struct__GString;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GString {
    pub _str: *mut gchar,
    pub len: gsize,
    pub allocated_len: gsize,
}
impl ::std::clone::Clone for Struct__GString {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GString {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GIOChannel = Struct__GIOChannel;
pub type GIOFuncs = Struct__GIOFuncs;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed61 {
    G_IO_ERROR_NONE = 0,
    G_IO_ERROR_AGAIN = 1,
    G_IO_ERROR_INVAL = 2,
    G_IO_ERROR_UNKNOWN = 3,
}
pub type GIOError = Enum_Unnamed61;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed62 {
    G_IO_CHANNEL_ERROR_FBIG = 0,
    G_IO_CHANNEL_ERROR_INVAL = 1,
    G_IO_CHANNEL_ERROR_IO = 2,
    G_IO_CHANNEL_ERROR_ISDIR = 3,
    G_IO_CHANNEL_ERROR_NOSPC = 4,
    G_IO_CHANNEL_ERROR_NXIO = 5,
    G_IO_CHANNEL_ERROR_OVERFLOW = 6,
    G_IO_CHANNEL_ERROR_PIPE = 7,
    G_IO_CHANNEL_ERROR_FAILED = 8,
}
pub type GIOChannelError = Enum_Unnamed62;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed63 {
    G_IO_STATUS_ERROR = 0,
    G_IO_STATUS_NORMAL = 1,
    G_IO_STATUS_EOF = 2,
    G_IO_STATUS_AGAIN = 3,
}
pub type GIOStatus = Enum_Unnamed63;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed64 { G_SEEK_CUR = 0, G_SEEK_SET = 1, G_SEEK_END = 2, }
pub type GSeekType = Enum_Unnamed64;
pub const G_IO_FLAG_IS_WRITEABLE: Enum_Unnamed65 =
    Enum_Unnamed65::G_IO_FLAG_IS_WRITABLE;
pub const G_IO_FLAG_GET_MASK: Enum_Unnamed65 = Enum_Unnamed65::G_IO_FLAG_MASK;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed65 {
    G_IO_FLAG_APPEND = 1,
    G_IO_FLAG_NONBLOCK = 2,
    G_IO_FLAG_IS_READABLE = 4,
    G_IO_FLAG_IS_WRITABLE = 8,
    G_IO_FLAG_IS_SEEKABLE = 16,
    G_IO_FLAG_MASK = 31,
    G_IO_FLAG_SET_MASK = 3,
}
pub type GIOFlags = Enum_Unnamed65;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GIOChannel {
    pub ref_count: gint,
    pub funcs: *mut GIOFuncs,
    pub encoding: *mut gchar,
    pub read_cd: GIConv,
    pub write_cd: GIConv,
    pub line_term: *mut gchar,
    pub line_term_len: guint,
    pub buf_size: gsize,
    pub read_buf: *mut GString,
    pub encoded_read_buf: *mut GString,
    pub write_buf: *mut GString,
    pub partial_write_buf: [gchar; 6usize],
    pub _bindgen_bitfield_1_: guint,
    pub _bindgen_bitfield_2_: guint,
    pub _bindgen_bitfield_3_: guint,
    pub _bindgen_bitfield_4_: guint,
    pub _bindgen_bitfield_5_: guint,
    pub _bindgen_bitfield_6_: guint,
    pub reserved1: gpointer,
    pub reserved2: gpointer,
}
impl ::std::clone::Clone for Struct__GIOChannel {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GIOChannel {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GIOFunc =
    ::std::option::Option<unsafe extern "C" fn(source: *mut GIOChannel,
                                               condition: GIOCondition,
                                               data: gpointer) -> gboolean>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GIOFuncs {
    pub io_read: ::std::option::Option<unsafe extern "C" fn(channel:
                                                                *mut GIOChannel,
                                                            buf: *mut gchar,
                                                            count: gsize,
                                                            bytes_read:
                                                                *mut gsize,
                                                            err:
                                                                *mut *mut GError)
                                           -> GIOStatus>,
    pub io_write: ::std::option::Option<unsafe extern "C" fn(channel:
                                                                 *mut GIOChannel,
                                                             buf:
                                                                 *const gchar,
                                                             count: gsize,
                                                             bytes_written:
                                                                 *mut gsize,
                                                             err:
                                                                 *mut *mut GError)
                                            -> GIOStatus>,
    pub io_seek: ::std::option::Option<unsafe extern "C" fn(channel:
                                                                *mut GIOChannel,
                                                            offset: gint64,
                                                            _type: GSeekType,
                                                            err:
                                                                *mut *mut GError)
                                           -> GIOStatus>,
    pub io_close: ::std::option::Option<unsafe extern "C" fn(channel:
                                                                 *mut GIOChannel,
                                                             err:
                                                                 *mut *mut GError)
                                            -> GIOStatus>,
    pub io_create_watch: ::std::option::Option<unsafe extern "C" fn(channel:
                                                                        *mut GIOChannel,
                                                                    condition:
                                                                        GIOCondition)
                                                   -> *mut GSource>,
    pub io_free: ::std::option::Option<unsafe extern "C" fn(channel:
                                                                *mut GIOChannel)>,
    pub io_set_flags: ::std::option::Option<unsafe extern "C" fn(channel:
                                                                     *mut GIOChannel,
                                                                 flags:
                                                                     GIOFlags,
                                                                 err:
                                                                     *mut *mut GError)
                                                -> GIOStatus>,
    pub io_get_flags: ::std::option::Option<unsafe extern "C" fn(channel:
                                                                     *mut GIOChannel)
                                                -> GIOFlags>,
}
impl ::std::clone::Clone for Struct__GIOFuncs {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GIOFuncs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed66 {
    G_KEY_FILE_ERROR_UNKNOWN_ENCODING = 0,
    G_KEY_FILE_ERROR_PARSE = 1,
    G_KEY_FILE_ERROR_NOT_FOUND = 2,
    G_KEY_FILE_ERROR_KEY_NOT_FOUND = 3,
    G_KEY_FILE_ERROR_GROUP_NOT_FOUND = 4,
    G_KEY_FILE_ERROR_INVALID_VALUE = 5,
}
pub type GKeyFileError = Enum_Unnamed66;
pub enum Struct__GKeyFile { }
pub type GKeyFile = Struct__GKeyFile;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed67 {
    G_KEY_FILE_NONE = 0,
    G_KEY_FILE_KEEP_COMMENTS = 1,
    G_KEY_FILE_KEEP_TRANSLATIONS = 2,
}
pub type GKeyFileFlags = Enum_Unnamed67;
pub enum Struct__GMappedFile { }
pub type GMappedFile = Struct__GMappedFile;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed68 {
    G_MARKUP_ERROR_BAD_UTF8 = 0,
    G_MARKUP_ERROR_EMPTY = 1,
    G_MARKUP_ERROR_PARSE = 2,
    G_MARKUP_ERROR_UNKNOWN_ELEMENT = 3,
    G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE = 4,
    G_MARKUP_ERROR_INVALID_CONTENT = 5,
    G_MARKUP_ERROR_MISSING_ATTRIBUTE = 6,
}
pub type GMarkupError = Enum_Unnamed68;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed69 {
    G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1,
    G_MARKUP_TREAT_CDATA_AS_TEXT = 2,
    G_MARKUP_PREFIX_ERROR_POSITION = 4,
    G_MARKUP_IGNORE_QUALIFIED = 8,
}
pub type GMarkupParseFlags = Enum_Unnamed69;
pub enum Struct__GMarkupParseContext { }
pub type GMarkupParseContext = Struct__GMarkupParseContext;
pub type GMarkupParser = Struct__GMarkupParser;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GMarkupParser {
    pub start_element: ::std::option::Option<unsafe extern "C" fn(context:
                                                                      *mut GMarkupParseContext,
                                                                  element_name:
                                                                      *const gchar,
                                                                  attribute_names:
                                                                      *mut *const gchar,
                                                                  attribute_values:
                                                                      *mut *const gchar,
                                                                  user_data:
                                                                      gpointer,
                                                                  error:
                                                                      *mut *mut GError)>,
    pub end_element: ::std::option::Option<unsafe extern "C" fn(context:
                                                                    *mut GMarkupParseContext,
                                                                element_name:
                                                                    *const gchar,
                                                                user_data:
                                                                    gpointer,
                                                                error:
                                                                    *mut *mut GError)>,
    pub text: ::std::option::Option<unsafe extern "C" fn(context:
                                                             *mut GMarkupParseContext,
                                                         text: *const gchar,
                                                         text_len: gsize,
                                                         user_data: gpointer,
                                                         error:
                                                             *mut *mut GError)>,
    pub passthrough: ::std::option::Option<unsafe extern "C" fn(context:
                                                                    *mut GMarkupParseContext,
                                                                passthrough_text:
                                                                    *const gchar,
                                                                text_len:
                                                                    gsize,
                                                                user_data:
                                                                    gpointer,
                                                                error:
                                                                    *mut *mut GError)>,
    pub error: ::std::option::Option<unsafe extern "C" fn(context:
                                                              *mut GMarkupParseContext,
                                                          error: *mut GError,
                                                          user_data:
                                                              gpointer)>,
}
impl ::std::clone::Clone for Struct__GMarkupParser {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GMarkupParser {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed70 {
    G_MARKUP_COLLECT_INVALID = 0,
    G_MARKUP_COLLECT_STRING = 1,
    G_MARKUP_COLLECT_STRDUP = 2,
    G_MARKUP_COLLECT_BOOLEAN = 3,
    G_MARKUP_COLLECT_TRISTATE = 4,
    G_MARKUP_COLLECT_OPTIONAL = 65536,
}
pub type GMarkupCollectType = Enum_Unnamed70;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_Unnamed71 {
    G_LOG_FLAG_RECURSION = 1,
    G_LOG_FLAG_FATAL = 2,
    G_LOG_LEVEL_ERROR = 4,
    G_LOG_LEVEL_CRITICAL = 8,
    G_LOG_LEVEL_WARNING = 16,
    G_LOG_LEVEL_MESSAGE = 32,
    G_LOG_LEVEL_INFO = 64,
    G_LOG_LEVEL_DEBUG = 128,
    G_LOG_LEVEL_MASK = -4,
}
pub type GLogLevelFlags = Enum_Unnamed71;
pub type GLogFunc =
    ::std::option::Option<unsafe extern "C" fn(log_domain: *const gchar,
                                               log_level: GLogLevelFlags,
                                               message: *const gchar,
                                               user_data: gpointer)>;
pub type GPrintFunc =
    ::std::option::Option<unsafe extern "C" fn(string: *const gchar)>;
pub enum Struct__GOptionContext { }
pub type GOptionContext = Struct__GOptionContext;
pub enum Struct__GOptionGroup { }
pub type GOptionGroup = Struct__GOptionGroup;
pub type GOptionEntry = Struct__GOptionEntry;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed72 {
    G_OPTION_FLAG_NONE = 0,
    G_OPTION_FLAG_HIDDEN = 1,
    G_OPTION_FLAG_IN_MAIN = 2,
    G_OPTION_FLAG_REVERSE = 4,
    G_OPTION_FLAG_NO_ARG = 8,
    G_OPTION_FLAG_FILENAME = 16,
    G_OPTION_FLAG_OPTIONAL_ARG = 32,
    G_OPTION_FLAG_NOALIAS = 64,
}
pub type GOptionFlags = Enum_Unnamed72;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed73 {
    G_OPTION_ARG_NONE = 0,
    G_OPTION_ARG_STRING = 1,
    G_OPTION_ARG_INT = 2,
    G_OPTION_ARG_CALLBACK = 3,
    G_OPTION_ARG_FILENAME = 4,
    G_OPTION_ARG_STRING_ARRAY = 5,
    G_OPTION_ARG_FILENAME_ARRAY = 6,
    G_OPTION_ARG_DOUBLE = 7,
    G_OPTION_ARG_INT64 = 8,
}
pub type GOptionArg = Enum_Unnamed73;
pub type GOptionArgFunc =
    ::std::option::Option<unsafe extern "C" fn(option_name: *const gchar,
                                               value: *const gchar,
                                               data: gpointer,
                                               error: *mut *mut GError)
                              -> gboolean>;
pub type GOptionParseFunc =
    ::std::option::Option<unsafe extern "C" fn(context: *mut GOptionContext,
                                               group: *mut GOptionGroup,
                                               data: gpointer,
                                               error: *mut *mut GError)
                              -> gboolean>;
pub type GOptionErrorFunc =
    ::std::option::Option<unsafe extern "C" fn(context: *mut GOptionContext,
                                               group: *mut GOptionGroup,
                                               data: gpointer,
                                               error: *mut *mut GError)>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed74 {
    G_OPTION_ERROR_UNKNOWN_OPTION = 0,
    G_OPTION_ERROR_BAD_VALUE = 1,
    G_OPTION_ERROR_FAILED = 2,
}
pub type GOptionError = Enum_Unnamed74;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GOptionEntry {
    pub long_name: *const gchar,
    pub short_name: gchar,
    pub flags: gint,
    pub arg: GOptionArg,
    pub arg_data: gpointer,
    pub description: *const gchar,
    pub arg_description: *const gchar,
}
impl ::std::clone::Clone for Struct__GOptionEntry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GOptionEntry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__GPatternSpec { }
pub type GPatternSpec = Struct__GPatternSpec;
pub type GQueue = Struct__GQueue;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GQueue {
    pub head: *mut GList,
    pub tail: *mut GList,
    pub length: guint,
}
impl ::std::clone::Clone for Struct__GQueue {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GQueue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__GRand { }
pub type GRand = Struct__GRand;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed75 {
    G_REGEX_ERROR_COMPILE = 0,
    G_REGEX_ERROR_OPTIMIZE = 1,
    G_REGEX_ERROR_REPLACE = 2,
    G_REGEX_ERROR_MATCH = 3,
    G_REGEX_ERROR_INTERNAL = 4,
    G_REGEX_ERROR_STRAY_BACKSLASH = 101,
    G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102,
    G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103,
    G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104,
    G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105,
    G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106,
    G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107,
    G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108,
    G_REGEX_ERROR_NOTHING_TO_REPEAT = 109,
    G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112,
    G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113,
    G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114,
    G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115,
    G_REGEX_ERROR_UNTERMINATED_COMMENT = 118,
    G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120,
    G_REGEX_ERROR_MEMORY_ERROR = 121,
    G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125,
    G_REGEX_ERROR_MALFORMED_CONDITION = 126,
    G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127,
    G_REGEX_ERROR_ASSERTION_EXPECTED = 128,
    G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130,
    G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131,
    G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134,
    G_REGEX_ERROR_INVALID_CONDITION = 135,
    G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136,
    G_REGEX_ERROR_INFINITE_LOOP = 140,
    G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142,
    G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143,
    G_REGEX_ERROR_MALFORMED_PROPERTY = 146,
    G_REGEX_ERROR_UNKNOWN_PROPERTY = 147,
    G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148,
    G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149,
    G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151,
    G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154,
    G_REGEX_ERROR_DEFINE_REPETION = 155,
    G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156,
    G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157,
    G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158,
    G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159,
    G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160,
    G_REGEX_ERROR_NUMBER_TOO_BIG = 161,
    G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162,
    G_REGEX_ERROR_MISSING_DIGIT = 163,
    G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164,
    G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165,
    G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166,
    G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168,
    G_REGEX_ERROR_MISSING_NAME = 169,
    G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171,
    G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172,
    G_REGEX_ERROR_NAME_TOO_LONG = 175,
    G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176,
}
pub type GRegexError = Enum_Unnamed75;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed76 {
    G_REGEX_CASELESS = 1,
    G_REGEX_MULTILINE = 2,
    G_REGEX_DOTALL = 4,
    G_REGEX_EXTENDED = 8,
    G_REGEX_ANCHORED = 16,
    G_REGEX_DOLLAR_ENDONLY = 32,
    G_REGEX_UNGREEDY = 512,
    G_REGEX_RAW = 2048,
    G_REGEX_NO_AUTO_CAPTURE = 4096,
    G_REGEX_OPTIMIZE = 8192,
    G_REGEX_FIRSTLINE = 262144,
    G_REGEX_DUPNAMES = 524288,
    G_REGEX_NEWLINE_CR = 1048576,
    G_REGEX_NEWLINE_LF = 2097152,
    G_REGEX_NEWLINE_CRLF = 3145728,
    G_REGEX_NEWLINE_ANYCRLF = 5242880,
    G_REGEX_BSR_ANYCRLF = 8388608,
    G_REGEX_JAVASCRIPT_COMPAT = 33554432,
}
pub type GRegexCompileFlags = Enum_Unnamed76;
pub const G_REGEX_MATCH_PARTIAL_SOFT: Enum_Unnamed77 =
    Enum_Unnamed77::G_REGEX_MATCH_PARTIAL;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed77 {
    G_REGEX_MATCH_ANCHORED = 16,
    G_REGEX_MATCH_NOTBOL = 128,
    G_REGEX_MATCH_NOTEOL = 256,
    G_REGEX_MATCH_NOTEMPTY = 1024,
    G_REGEX_MATCH_PARTIAL = 32768,
    G_REGEX_MATCH_NEWLINE_CR = 1048576,
    G_REGEX_MATCH_NEWLINE_LF = 2097152,
    G_REGEX_MATCH_NEWLINE_CRLF = 3145728,
    G_REGEX_MATCH_NEWLINE_ANY = 4194304,
    G_REGEX_MATCH_NEWLINE_ANYCRLF = 5242880,
    G_REGEX_MATCH_BSR_ANYCRLF = 8388608,
    G_REGEX_MATCH_BSR_ANY = 16777216,
    G_REGEX_MATCH_PARTIAL_HARD = 134217728,
    G_REGEX_MATCH_NOTEMPTY_ATSTART = 268435456,
}
pub type GRegexMatchFlags = Enum_Unnamed77;
pub enum Struct__GRegex { }
pub type GRegex = Struct__GRegex;
pub enum Struct__GMatchInfo { }
pub type GMatchInfo = Struct__GMatchInfo;
pub type GRegexEvalCallback =
    ::std::option::Option<unsafe extern "C" fn(match_info: *const GMatchInfo,
                                               result: *mut GString,
                                               user_data: gpointer)
                              -> gboolean>;
pub type GScanner = Struct__GScanner;
pub type GScannerConfig = Struct__GScannerConfig;
pub type GTokenValue = Union__GTokenValue;
pub type GScannerMsgFunc =
    ::std::option::Option<unsafe extern "C" fn(scanner: *mut GScanner,
                                               message: *mut gchar,
                                               error: gboolean)>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed78 {
    G_ERR_UNKNOWN = 0,
    G_ERR_UNEXP_EOF = 1,
    G_ERR_UNEXP_EOF_IN_STRING = 2,
    G_ERR_UNEXP_EOF_IN_COMMENT = 3,
    G_ERR_NON_DIGIT_IN_CONST = 4,
    G_ERR_DIGIT_RADIX = 5,
    G_ERR_FLOAT_RADIX = 6,
    G_ERR_FLOAT_MALFORMED = 7,
}
pub type GErrorType = Enum_Unnamed78;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed79 {
    G_TOKEN_EOF = 0,
    G_TOKEN_LEFT_PAREN = 40,
    G_TOKEN_RIGHT_PAREN = 41,
    G_TOKEN_LEFT_CURLY = 123,
    G_TOKEN_RIGHT_CURLY = 125,
    G_TOKEN_LEFT_BRACE = 91,
    G_TOKEN_RIGHT_BRACE = 93,
    G_TOKEN_EQUAL_SIGN = 61,
    G_TOKEN_COMMA = 44,
    G_TOKEN_NONE = 256,
    G_TOKEN_ERROR = 257,
    G_TOKEN_CHAR = 258,
    G_TOKEN_BINARY = 259,
    G_TOKEN_OCTAL = 260,
    G_TOKEN_INT = 261,
    G_TOKEN_HEX = 262,
    G_TOKEN_FLOAT = 263,
    G_TOKEN_STRING = 264,
    G_TOKEN_SYMBOL = 265,
    G_TOKEN_IDENTIFIER = 266,
    G_TOKEN_IDENTIFIER_NULL = 267,
    G_TOKEN_COMMENT_SINGLE = 268,
    G_TOKEN_COMMENT_MULTI = 269,
    G_TOKEN_LAST = 270,
}
pub type GTokenType = Enum_Unnamed79;
#[repr(C)]
#[derive(Copy)]
pub struct Union__GTokenValue {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union__GTokenValue {
    pub unsafe fn v_symbol(&mut self) -> *mut gpointer {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_identifier(&mut self) -> *mut *mut gchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_binary(&mut self) -> *mut gulong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_octal(&mut self) -> *mut gulong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_int(&mut self) -> *mut gulong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_int64(&mut self) -> *mut guint64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_float(&mut self) -> *mut gdouble {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_hex(&mut self) -> *mut gulong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_string(&mut self) -> *mut *mut gchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_comment(&mut self) -> *mut *mut gchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_char(&mut self) -> *mut guchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_error(&mut self) -> *mut guint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union__GTokenValue {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union__GTokenValue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GScannerConfig {
    pub cset_skip_characters: *mut gchar,
    pub cset_identifier_first: *mut gchar,
    pub cset_identifier_nth: *mut gchar,
    pub cpair_comment_single: *mut gchar,
    pub _bindgen_bitfield_1_: guint,
    pub _bindgen_bitfield_2_: guint,
    pub _bindgen_bitfield_3_: guint,
    pub _bindgen_bitfield_4_: guint,
    pub _bindgen_bitfield_5_: guint,
    pub _bindgen_bitfield_6_: guint,
    pub _bindgen_bitfield_7_: guint,
    pub _bindgen_bitfield_8_: guint,
    pub _bindgen_bitfield_9_: guint,
    pub _bindgen_bitfield_10_: guint,
    pub _bindgen_bitfield_11_: guint,
    pub _bindgen_bitfield_12_: guint,
    pub _bindgen_bitfield_13_: guint,
    pub _bindgen_bitfield_14_: guint,
    pub _bindgen_bitfield_15_: guint,
    pub _bindgen_bitfield_16_: guint,
    pub _bindgen_bitfield_17_: guint,
    pub _bindgen_bitfield_18_: guint,
    pub _bindgen_bitfield_19_: guint,
    pub _bindgen_bitfield_20_: guint,
    pub _bindgen_bitfield_21_: guint,
    pub _bindgen_bitfield_22_: guint,
    pub padding_dummy: guint,
}
impl ::std::clone::Clone for Struct__GScannerConfig {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GScannerConfig {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GScanner {
    pub user_data: gpointer,
    pub max_parse_errors: guint,
    pub parse_errors: guint,
    pub input_name: *const gchar,
    pub qdata: *mut GData,
    pub config: *mut GScannerConfig,
    pub token: GTokenType,
    pub value: GTokenValue,
    pub line: guint,
    pub position: guint,
    pub next_token: GTokenType,
    pub next_value: GTokenValue,
    pub next_line: guint,
    pub next_position: guint,
    pub symbol_table: *mut GHashTable,
    pub input_fd: gint,
    pub text: *const gchar,
    pub text_end: *const gchar,
    pub buffer: *mut gchar,
    pub scope_id: guint,
    pub msg_handler: GScannerMsgFunc,
}
impl ::std::clone::Clone for Struct__GScanner {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GScanner {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__GSequence { }
pub type GSequence = Struct__GSequence;
pub enum Struct__GSequenceNode { }
pub type GSequenceIter = Struct__GSequenceNode;
pub type GSequenceIterCompareFunc =
    ::std::option::Option<unsafe extern "C" fn(a: *mut GSequenceIter,
                                               b: *mut GSequenceIter,
                                               data: gpointer) -> gint>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed80 {
    G_SHELL_ERROR_BAD_QUOTING = 0,
    G_SHELL_ERROR_EMPTY_STRING = 1,
    G_SHELL_ERROR_FAILED = 2,
}
pub type GShellError = Enum_Unnamed80;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed81 {
    G_SLICE_CONFIG_ALWAYS_MALLOC = 1,
    G_SLICE_CONFIG_BYPASS_MAGAZINES = 2,
    G_SLICE_CONFIG_WORKING_SET_MSECS = 3,
    G_SLICE_CONFIG_COLOR_INCREMENT = 4,
    G_SLICE_CONFIG_CHUNK_SIZES = 5,
    G_SLICE_CONFIG_CONTENTION_COUNTER = 6,
}
pub type GSliceConfig = Enum_Unnamed81;
pub const G_SPAWN_ERROR_2BIG: Enum_Unnamed82 =
    Enum_Unnamed82::G_SPAWN_ERROR_TOO_BIG;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed82 {
    G_SPAWN_ERROR_FORK = 0,
    G_SPAWN_ERROR_READ = 1,
    G_SPAWN_ERROR_CHDIR = 2,
    G_SPAWN_ERROR_ACCES = 3,
    G_SPAWN_ERROR_PERM = 4,
    G_SPAWN_ERROR_TOO_BIG = 5,
    G_SPAWN_ERROR_NOEXEC = 6,
    G_SPAWN_ERROR_NAMETOOLONG = 7,
    G_SPAWN_ERROR_NOENT = 8,
    G_SPAWN_ERROR_NOMEM = 9,
    G_SPAWN_ERROR_NOTDIR = 10,
    G_SPAWN_ERROR_LOOP = 11,
    G_SPAWN_ERROR_TXTBUSY = 12,
    G_SPAWN_ERROR_IO = 13,
    G_SPAWN_ERROR_NFILE = 14,
    G_SPAWN_ERROR_MFILE = 15,
    G_SPAWN_ERROR_INVAL = 16,
    G_SPAWN_ERROR_ISDIR = 17,
    G_SPAWN_ERROR_LIBBAD = 18,
    G_SPAWN_ERROR_FAILED = 19,
}
pub type GSpawnError = Enum_Unnamed82;
pub type GSpawnChildSetupFunc =
    ::std::option::Option<extern "C" fn(user_data: gpointer)>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed83 {
    G_SPAWN_DEFAULT = 0,
    G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1,
    G_SPAWN_DO_NOT_REAP_CHILD = 2,
    G_SPAWN_SEARCH_PATH = 4,
    G_SPAWN_STDOUT_TO_DEV_NULL = 8,
    G_SPAWN_STDERR_TO_DEV_NULL = 16,
    G_SPAWN_CHILD_INHERITS_STDIN = 32,
    G_SPAWN_FILE_AND_ARGV_ZERO = 64,
    G_SPAWN_SEARCH_PATH_FROM_ENVP = 128,
    G_SPAWN_CLOEXEC_PIPES = 256,
}
pub type GSpawnFlags = Enum_Unnamed83;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed84 {
    G_ASCII_ALNUM = 1,
    G_ASCII_ALPHA = 2,
    G_ASCII_CNTRL = 4,
    G_ASCII_DIGIT = 8,
    G_ASCII_GRAPH = 16,
    G_ASCII_LOWER = 32,
    G_ASCII_PRINT = 64,
    G_ASCII_PUNCT = 128,
    G_ASCII_SPACE = 256,
    G_ASCII_UPPER = 512,
    G_ASCII_XDIGIT = 1024,
}
pub type GAsciiType = Enum_Unnamed84;
pub type GStrv = *mut *mut gchar;
pub enum Struct__GStringChunk { }
pub type GStringChunk = Struct__GStringChunk;
pub enum Struct_GTestCase { }
pub type GTestCase = Struct_GTestCase;
pub enum Struct_GTestSuite { }
pub type GTestSuite = Struct_GTestSuite;
pub type GTestFunc = ::std::option::Option<extern "C" fn()>;
pub type GTestDataFunc =
    ::std::option::Option<extern "C" fn(user_data: gconstpointer)>;
pub type GTestFixtureFunc =
    ::std::option::Option<extern "C" fn(fixture: gpointer,
                                        user_data: gconstpointer)>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed85 {
    G_TEST_TRAP_SILENCE_STDOUT = 128,
    G_TEST_TRAP_SILENCE_STDERR = 256,
    G_TEST_TRAP_INHERIT_STDIN = 512,
}
pub type GTestTrapFlags = Enum_Unnamed85;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed86 {
    G_TEST_SUBPROCESS_INHERIT_STDIN = 1,
    G_TEST_SUBPROCESS_INHERIT_STDOUT = 2,
    G_TEST_SUBPROCESS_INHERIT_STDERR = 4,
}
pub type GTestSubprocessFlags = Enum_Unnamed86;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed87 {
    pub test_initialized: gboolean,
    pub test_quick: gboolean,
    pub test_perf: gboolean,
    pub test_verbose: gboolean,
    pub test_quiet: gboolean,
    pub test_undefined: gboolean,
}
impl ::std::clone::Clone for Struct_Unnamed87 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed87 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GTestConfig = Struct_Unnamed87;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed88 {
    G_TEST_LOG_NONE = 0,
    G_TEST_LOG_ERROR = 1,
    G_TEST_LOG_START_BINARY = 2,
    G_TEST_LOG_LIST_CASE = 3,
    G_TEST_LOG_SKIP_CASE = 4,
    G_TEST_LOG_START_CASE = 5,
    G_TEST_LOG_STOP_CASE = 6,
    G_TEST_LOG_MIN_RESULT = 7,
    G_TEST_LOG_MAX_RESULT = 8,
    G_TEST_LOG_MESSAGE = 9,
    G_TEST_LOG_START_SUITE = 10,
    G_TEST_LOG_STOP_SUITE = 11,
}
pub type GTestLogType = Enum_Unnamed88;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed89 {
    pub log_type: GTestLogType,
    pub n_strings: guint,
    pub strings: *mut *mut gchar,
    pub n_nums: guint,
    pub nums: *mut ::std::os::raw::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed89 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed89 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GTestLogMsg = Struct_Unnamed89;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed90 {
    pub data: *mut GString,
    pub msgs: *mut GSList,
}
impl ::std::clone::Clone for Struct_Unnamed90 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed90 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GTestLogBuffer = Struct_Unnamed90;
pub type GTestLogFatalFunc =
    ::std::option::Option<unsafe extern "C" fn(log_domain: *const gchar,
                                               log_level: GLogLevelFlags,
                                               message: *const gchar,
                                               user_data: gpointer)
                              -> gboolean>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed91 { G_TEST_DIST = 0, G_TEST_BUILT = 1, }
pub type GTestFileType = Enum_Unnamed91;
pub type GThreadPool = Struct__GThreadPool;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GThreadPool {
    pub func: GFunc,
    pub user_data: gpointer,
    pub exclusive: gboolean,
}
impl ::std::clone::Clone for Struct__GThreadPool {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GThreadPool {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__GTimer { }
pub type GTimer = Struct__GTimer;
pub type GTrashStack = Struct__GTrashStack;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GTrashStack {
    pub next: *mut GTrashStack,
}
impl ::std::clone::Clone for Struct__GTrashStack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GTrashStack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__GTree { }
pub type GTree = Struct__GTree;
pub type GTraverseFunc =
    ::std::option::Option<extern "C" fn(key: gpointer, value: gpointer,
                                        data: gpointer) -> gboolean>;
pub enum Struct__GVariantType { }
pub type GVariantType = Struct__GVariantType;
pub enum Struct__GVariant { }
pub type GVariant = Struct__GVariant;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed92 {
    G_VARIANT_CLASS_BOOLEAN = 98,
    G_VARIANT_CLASS_BYTE = 121,
    G_VARIANT_CLASS_INT16 = 110,
    G_VARIANT_CLASS_UINT16 = 113,
    G_VARIANT_CLASS_INT32 = 105,
    G_VARIANT_CLASS_UINT32 = 117,
    G_VARIANT_CLASS_INT64 = 120,
    G_VARIANT_CLASS_UINT64 = 116,
    G_VARIANT_CLASS_HANDLE = 104,
    G_VARIANT_CLASS_DOUBLE = 100,
    G_VARIANT_CLASS_STRING = 115,
    G_VARIANT_CLASS_OBJECT_PATH = 111,
    G_VARIANT_CLASS_SIGNATURE = 103,
    G_VARIANT_CLASS_VARIANT = 118,
    G_VARIANT_CLASS_MAYBE = 109,
    G_VARIANT_CLASS_ARRAY = 97,
    G_VARIANT_CLASS_TUPLE = 40,
    G_VARIANT_CLASS_DICT_ENTRY = 123,
}
pub type GVariantClass = Enum_Unnamed92;
pub type GVariantIter = Struct__GVariantIter;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GVariantIter {
    pub x: [gsize; 16usize],
}
impl ::std::clone::Clone for Struct__GVariantIter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GVariantIter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GVariantBuilder = Struct__GVariantBuilder;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GVariantBuilder {
    pub x: [gsize; 16usize],
}
impl ::std::clone::Clone for Struct__GVariantBuilder {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GVariantBuilder {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed93 {
    G_VARIANT_PARSE_ERROR_FAILED = 0,
    G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1,
    G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2,
    G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3,
    G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4,
    G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5,
    G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6,
    G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7,
    G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8,
    G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9,
    G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10,
    G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11,
    G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12,
    G_VARIANT_PARSE_ERROR_TYPE_ERROR = 13,
    G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14,
    G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15,
    G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16,
    G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17,
}
pub type GVariantParseError = Enum_Unnamed93;
pub type GVariantDict = Struct__GVariantDict;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GVariantDict {
    pub x: [gsize; 16usize],
}
impl ::std::clone::Clone for Struct__GVariantDict {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GVariantDict {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__GAllocator { }
pub type GAllocator = Struct__GAllocator;
pub enum Struct__GMemChunk { }
pub type GMemChunk = Struct__GMemChunk;
pub enum Struct__GCache { }
pub type GCache = Struct__GCache;
pub type GCacheNewFunc =
    ::std::option::Option<extern "C" fn(key: gpointer) -> gpointer>;
pub type GCacheDupFunc =
    ::std::option::Option<extern "C" fn(value: gpointer) -> gpointer>;
pub type GCacheDestroyFunc =
    ::std::option::Option<extern "C" fn(value: gpointer)>;
pub type GCompletion = Struct__GCompletion;
pub type GCompletionFunc =
    ::std::option::Option<extern "C" fn(arg1: gpointer) -> *mut gchar>;
pub type GCompletionStrncmpFunc =
    ::std::option::Option<unsafe extern "C" fn(s1: *const gchar,
                                               s2: *const gchar, n: gsize)
                              -> gint>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GCompletion {
    pub items: *mut GList,
    pub func: GCompletionFunc,
    pub prefix: *mut gchar,
    pub cache: *mut GList,
    pub strncmp_func: GCompletionStrncmpFunc,
}
impl ::std::clone::Clone for Struct__GCompletion {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GCompletion {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__GRelation { }
pub type GRelation = Struct__GRelation;
pub type GTuples = Struct__GTuples;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GTuples {
    pub len: guint,
}
impl ::std::clone::Clone for Struct__GTuples {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GTuples {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed94 {
    G_THREAD_PRIORITY_LOW = 0,
    G_THREAD_PRIORITY_NORMAL = 1,
    G_THREAD_PRIORITY_HIGH = 2,
    G_THREAD_PRIORITY_URGENT = 3,
}
pub type GThreadPriority = Enum_Unnamed94;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GThread {
    pub func: GThreadFunc,
    pub data: gpointer,
    pub joinable: gboolean,
    pub priority: GThreadPriority,
}
impl ::std::clone::Clone for Struct__GThread {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GThread {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GThreadFunctions = Struct__GThreadFunctions;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GThreadFunctions {
    pub mutex_new: ::std::option::Option<extern "C" fn() -> *mut GMutex>,
    pub mutex_lock: ::std::option::Option<unsafe extern "C" fn(mutex:
                                                                   *mut GMutex)>,
    pub mutex_trylock: ::std::option::Option<unsafe extern "C" fn(mutex:
                                                                      *mut GMutex)
                                                 -> gboolean>,
    pub mutex_unlock: ::std::option::Option<unsafe extern "C" fn(mutex:
                                                                     *mut GMutex)>,
    pub mutex_free: ::std::option::Option<unsafe extern "C" fn(mutex:
                                                                   *mut GMutex)>,
    pub cond_new: ::std::option::Option<extern "C" fn() -> *mut GCond>,
    pub cond_signal: ::std::option::Option<unsafe extern "C" fn(cond:
                                                                    *mut GCond)>,
    pub cond_broadcast: ::std::option::Option<unsafe extern "C" fn(cond:
                                                                       *mut GCond)>,
    pub cond_wait: ::std::option::Option<unsafe extern "C" fn(cond:
                                                                  *mut GCond,
                                                              mutex:
                                                                  *mut GMutex)>,
    pub cond_timed_wait: ::std::option::Option<unsafe extern "C" fn(cond:
                                                                        *mut GCond,
                                                                    mutex:
                                                                        *mut GMutex,
                                                                    end_time:
                                                                        *mut GTimeVal)
                                                   -> gboolean>,
    pub cond_free: ::std::option::Option<unsafe extern "C" fn(cond:
                                                                  *mut GCond)>,
    pub private_new: ::std::option::Option<extern "C" fn(destructor:
                                                             GDestroyNotify)
                                               -> *mut GPrivate>,
    pub private_get: ::std::option::Option<unsafe extern "C" fn(private_key:
                                                                    *mut GPrivate)
                                               -> gpointer>,
    pub private_set: ::std::option::Option<unsafe extern "C" fn(private_key:
                                                                    *mut GPrivate,
                                                                data:
                                                                    gpointer)>,
    pub thread_create: ::std::option::Option<unsafe extern "C" fn(func:
                                                                      GThreadFunc,
                                                                  data:
                                                                      gpointer,
                                                                  stack_size:
                                                                      gulong,
                                                                  joinable:
                                                                      gboolean,
                                                                  bound:
                                                                      gboolean,
                                                                  priority:
                                                                      GThreadPriority,
                                                                  thread:
                                                                      gpointer,
                                                                  error:
                                                                      *mut *mut GError)>,
    pub thread_yield: ::std::option::Option<extern "C" fn()>,
    pub thread_join: ::std::option::Option<extern "C" fn(thread: gpointer)>,
    pub thread_exit: ::std::option::Option<extern "C" fn()>,
    pub thread_set_priority: ::std::option::Option<extern "C" fn(thread:
                                                                     gpointer,
                                                                 priority:
                                                                     GThreadPriority)>,
    pub thread_self: ::std::option::Option<extern "C" fn(thread: gpointer)>,
    pub thread_equal: ::std::option::Option<extern "C" fn(thread1: gpointer,
                                                          thread2: gpointer)
                                                -> gboolean>,
}
impl ::std::clone::Clone for Struct__GThreadFunctions {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GThreadFunctions {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type off_t = __off_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type _uint = ::std::os::raw::c_uint;
pub type int8_t = ::std::os::raw::c_char;
pub type int16_t = ::std::os::raw::c_short;
pub type int32_t = ::std::os::raw::c_int;
pub type int64_t = ::std::os::raw::c_long;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed95 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed95 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed95 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed95;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_sched_param {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sched_param {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___sched_param {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sched_param {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed96 {
    pub __bits: [__cpu_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed96 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed96 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cpu_set_t = Struct_Unnamed96;
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed97 {
    PTHREAD_CREATE_JOINABLE = 0,
    PTHREAD_CREATE_DETACHED = 1,
}
pub const PTHREAD_MUTEX_NORMAL: Enum_Unnamed98 =
    Enum_Unnamed98::PTHREAD_MUTEX_TIMED_NP;
pub const PTHREAD_MUTEX_RECURSIVE: Enum_Unnamed98 =
    Enum_Unnamed98::PTHREAD_MUTEX_RECURSIVE_NP;
pub const PTHREAD_MUTEX_ERRORCHECK: Enum_Unnamed98 =
    Enum_Unnamed98::PTHREAD_MUTEX_ERRORCHECK_NP;
pub const PTHREAD_MUTEX_DEFAULT: Enum_Unnamed98 =
    Enum_Unnamed98::PTHREAD_MUTEX_TIMED_NP;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed98 {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3,
}
pub const PTHREAD_MUTEX_STALLED_NP: Enum_Unnamed99 =
    Enum_Unnamed99::PTHREAD_MUTEX_STALLED;
pub const PTHREAD_MUTEX_ROBUST_NP: Enum_Unnamed99 =
    Enum_Unnamed99::PTHREAD_MUTEX_ROBUST;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed99 {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_ROBUST = 1,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed100 {
    PTHREAD_PRIO_NONE = 0,
    PTHREAD_PRIO_INHERIT = 1,
    PTHREAD_PRIO_PROTECT = 2,
}
pub const PTHREAD_RWLOCK_DEFAULT_NP: Enum_Unnamed101 =
    Enum_Unnamed101::PTHREAD_RWLOCK_PREFER_READER_NP;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed101 {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed102 {
    PTHREAD_INHERIT_SCHED = 0,
    PTHREAD_EXPLICIT_SCHED = 1,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed103 {
    PTHREAD_SCOPE_SYSTEM = 0,
    PTHREAD_SCOPE_PROCESS = 1,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed104 {
    PTHREAD_PROCESS_PRIVATE = 0,
    PTHREAD_PROCESS_SHARED = 1,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut Struct__pthread_cleanup_buffer,
}
impl ::std::clone::Clone for Struct__pthread_cleanup_buffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__pthread_cleanup_buffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed105 {
    PTHREAD_CANCEL_ENABLE = 0,
    PTHREAD_CANCEL_DISABLE = 1,
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed106 {
    PTHREAD_CANCEL_DEFERRED = 0,
    PTHREAD_CANCEL_ASYNCHRONOUS = 1,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed107 {
    pub __cancel_jmp_buf: [Struct_Unnamed108; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
impl ::std::clone::Clone for Struct_Unnamed107 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed107 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed108 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed108 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed108 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_unwind_buf_t = Struct_Unnamed107;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_cleanup_frame {
    pub __cancel_routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___pthread_cleanup_frame {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_cleanup_frame {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___jmp_buf_tag { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed109 {
    pub mutex: *mut GMutex,
    pub unused: pthread_mutex_t,
}
impl ::std::clone::Clone for Struct_Unnamed109 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed109 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GStaticMutex = Struct_Unnamed109;
pub type GStaticRecMutex = Struct__GStaticRecMutex;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GStaticRecMutex {
    pub mutex: GStaticMutex,
    pub depth: guint,
    pub unused: Union_Unnamed110,
}
impl ::std::clone::Clone for Struct__GStaticRecMutex {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GStaticRecMutex {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed110 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed110 {
    pub unsafe fn owner(&mut self) -> *mut pthread_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn dummy(&mut self) -> *mut gdouble {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed110 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed110 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GStaticRWLock = Struct__GStaticRWLock;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GStaticRWLock {
    pub mutex: GStaticMutex,
    pub read_cond: *mut GCond,
    pub write_cond: *mut GCond,
    pub read_counter: guint,
    pub have_writer: gboolean,
    pub want_to_read: guint,
    pub want_to_write: guint,
}
impl ::std::clone::Clone for Struct__GStaticRWLock {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GStaticRWLock {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GStaticPrivate = Struct__GStaticPrivate;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GStaticPrivate {
    pub index: guint,
}
impl ::std::clone::Clone for Struct__GStaticPrivate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GStaticPrivate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GAsyncQueue_autoptr = *mut GAsyncQueue;
pub type GBookmarkFile_autoptr = *mut GBookmarkFile;
pub type GBytes_autoptr = *mut GBytes;
pub type GChecksum_autoptr = *mut GChecksum;
pub type GDateTime_autoptr = *mut GDateTime;
pub type GDir_autoptr = *mut GDir;
pub type GError_autoptr = *mut GError;
pub type GHashTable_autoptr = *mut GHashTable;
pub type GHmac_autoptr = *mut GHmac;
pub type GIOChannel_autoptr = *mut GIOChannel;
pub type GKeyFile_autoptr = *mut GKeyFile;
pub type GList_autoptr = *mut GList;
pub type GArray_autoptr = *mut GArray;
pub type GPtrArray_autoptr = *mut GPtrArray;
pub type GByteArray_autoptr = *mut GByteArray;
pub type GMainContext_autoptr = *mut GMainContext;
pub type GMainLoop_autoptr = *mut GMainLoop;
pub type GSource_autoptr = *mut GSource;
pub type GMappedFile_autoptr = *mut GMappedFile;
pub type GMarkupParseContext_autoptr = *mut GMarkupParseContext;
pub type GNode_autoptr = *mut GNode;
pub type GOptionContext_autoptr = *mut GOptionContext;
pub type GOptionGroup_autoptr = *mut GOptionGroup;
pub type GPatternSpec_autoptr = *mut GPatternSpec;
pub type GQueue_autoptr = *mut GQueue;
pub type GRand_autoptr = *mut GRand;
pub type GRegex_autoptr = *mut GRegex;
pub type GMatchInfo_autoptr = *mut GMatchInfo;
pub type GScanner_autoptr = *mut GScanner;
pub type GSequence_autoptr = *mut GSequence;
pub type GSList_autoptr = *mut GSList;
pub type GString_autoptr = *mut GString;
pub type GStringChunk_autoptr = *mut GStringChunk;
pub type GThread_autoptr = *mut GThread;
pub type GMutexLocker_autoptr = *mut GMutexLocker;
pub type GTimer_autoptr = *mut GTimer;
pub type GTimeZone_autoptr = *mut GTimeZone;
pub type GTree_autoptr = *mut GTree;
pub type GVariant_autoptr = *mut GVariant;
pub type GVariantBuilder_autoptr = *mut GVariantBuilder;
pub type GVariantIter_autoptr = *mut GVariantIter;
pub type GVariantDict_autoptr = *mut GVariantDict;
pub type GVariantType_autoptr = *mut GVariantType;
pub type GType = gsize;
pub type GValue = Struct__GValue;
pub enum Union__GTypeCValue { }
pub type GTypeCValue = Union__GTypeCValue;
pub enum Struct__GTypePlugin { }
pub type GTypePlugin = Struct__GTypePlugin;
pub type GTypeClass = Struct__GTypeClass;
pub type GTypeInterface = Struct__GTypeInterface;
pub type GTypeInstance = Struct__GTypeInstance;
pub type GTypeInfo = Struct__GTypeInfo;
pub type GTypeFundamentalInfo = Struct__GTypeFundamentalInfo;
pub type GInterfaceInfo = Struct__GInterfaceInfo;
pub type GTypeValueTable = Struct__GTypeValueTable;
pub type GTypeQuery = Struct__GTypeQuery;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GTypeClass {
    pub g_type: GType,
}
impl ::std::clone::Clone for Struct__GTypeClass {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GTypeClass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GTypeInstance {
    pub g_class: *mut GTypeClass,
}
impl ::std::clone::Clone for Struct__GTypeInstance {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GTypeInstance {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GTypeInterface {
    pub g_type: GType,
    pub g_instance_type: GType,
}
impl ::std::clone::Clone for Struct__GTypeInterface {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GTypeInterface {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GTypeQuery {
    pub _type: GType,
    pub type_name: *const gchar,
    pub class_size: guint,
    pub instance_size: guint,
}
impl ::std::clone::Clone for Struct__GTypeQuery {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GTypeQuery {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed111 {
    G_TYPE_DEBUG_NONE = 0,
    G_TYPE_DEBUG_OBJECTS = 1,
    G_TYPE_DEBUG_SIGNALS = 2,
    G_TYPE_DEBUG_INSTANCE_COUNT = 4,
    G_TYPE_DEBUG_MASK = 7,
}
pub type GTypeDebugFlags = Enum_Unnamed111;
pub type GBaseInitFunc =
    ::std::option::Option<extern "C" fn(g_class: gpointer)>;
pub type GBaseFinalizeFunc =
    ::std::option::Option<extern "C" fn(g_class: gpointer)>;
pub type GClassInitFunc =
    ::std::option::Option<extern "C" fn(g_class: gpointer,
                                        class_data: gpointer)>;
pub type GClassFinalizeFunc =
    ::std::option::Option<extern "C" fn(g_class: gpointer,
                                        class_data: gpointer)>;
pub type GInstanceInitFunc =
    ::std::option::Option<unsafe extern "C" fn(instance: *mut GTypeInstance,
                                               g_class: gpointer)>;
pub type GInterfaceInitFunc =
    ::std::option::Option<extern "C" fn(g_iface: gpointer,
                                        iface_data: gpointer)>;
pub type GInterfaceFinalizeFunc =
    ::std::option::Option<extern "C" fn(g_iface: gpointer,
                                        iface_data: gpointer)>;
pub type GTypeClassCacheFunc =
    ::std::option::Option<unsafe extern "C" fn(cache_data: gpointer,
                                               g_class: *mut GTypeClass)
                              -> gboolean>;
pub type GTypeInterfaceCheckFunc =
    ::std::option::Option<extern "C" fn(check_data: gpointer,
                                        g_iface: gpointer)>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed112 {
    G_TYPE_FLAG_CLASSED = 1,
    G_TYPE_FLAG_INSTANTIATABLE = 2,
    G_TYPE_FLAG_DERIVABLE = 4,
    G_TYPE_FLAG_DEEP_DERIVABLE = 8,
}
pub type GTypeFundamentalFlags = Enum_Unnamed112;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed113 {
    G_TYPE_FLAG_ABSTRACT = 16,
    G_TYPE_FLAG_VALUE_ABSTRACT = 32,
}
pub type GTypeFlags = Enum_Unnamed113;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GTypeInfo {
    pub class_size: guint16,
    pub base_init: GBaseInitFunc,
    pub base_finalize: GBaseFinalizeFunc,
    pub class_init: GClassInitFunc,
    pub class_finalize: GClassFinalizeFunc,
    pub class_data: gconstpointer,
    pub instance_size: guint16,
    pub n_preallocs: guint16,
    pub instance_init: GInstanceInitFunc,
    pub value_table: *const GTypeValueTable,
}
impl ::std::clone::Clone for Struct__GTypeInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GTypeInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GTypeFundamentalInfo {
    pub type_flags: GTypeFundamentalFlags,
}
impl ::std::clone::Clone for Struct__GTypeFundamentalInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GTypeFundamentalInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GInterfaceInfo {
    pub interface_init: GInterfaceInitFunc,
    pub interface_finalize: GInterfaceFinalizeFunc,
    pub interface_data: gpointer,
}
impl ::std::clone::Clone for Struct__GInterfaceInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GInterfaceInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GTypeValueTable {
    pub value_init: ::std::option::Option<unsafe extern "C" fn(value:
                                                                   *mut GValue)>,
    pub value_free: ::std::option::Option<unsafe extern "C" fn(value:
                                                                   *mut GValue)>,
    pub value_copy: ::std::option::Option<unsafe extern "C" fn(src_value:
                                                                   *const GValue,
                                                               dest_value:
                                                                   *mut GValue)>,
    pub value_peek_pointer: ::std::option::Option<unsafe extern "C" fn(value:
                                                                           *const GValue)
                                                      -> gpointer>,
    pub collect_format: *const gchar,
    pub collect_value: ::std::option::Option<unsafe extern "C" fn(value:
                                                                      *mut GValue,
                                                                  n_collect_values:
                                                                      guint,
                                                                  collect_values:
                                                                      *mut GTypeCValue,
                                                                  collect_flags:
                                                                      guint)
                                                 -> *mut gchar>,
    pub lcopy_format: *const gchar,
    pub lcopy_value: ::std::option::Option<unsafe extern "C" fn(value:
                                                                    *const GValue,
                                                                n_collect_values:
                                                                    guint,
                                                                collect_values:
                                                                    *mut GTypeCValue,
                                                                collect_flags:
                                                                    guint)
                                               -> *mut gchar>,
}
impl ::std::clone::Clone for Struct__GTypeValueTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GTypeValueTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GValueTransform =
    ::std::option::Option<unsafe extern "C" fn(src_value: *const GValue,
                                               dest_value: *mut GValue)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GValue {
    pub g_type: GType,
    pub data: [Union_Unnamed114; 2usize],
}
impl ::std::clone::Clone for Struct__GValue {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GValue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed114 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed114 {
    pub unsafe fn v_int(&mut self) -> *mut gint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_uint(&mut self) -> *mut guint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_long(&mut self) -> *mut glong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_ulong(&mut self) -> *mut gulong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_int64(&mut self) -> *mut gint64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_uint64(&mut self) -> *mut guint64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_float(&mut self) -> *mut gfloat {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_double(&mut self) -> *mut gdouble {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn v_pointer(&mut self) -> *mut gpointer {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed114 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed114 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub const G_PARAM_PRIVATE: Enum_Unnamed115 =
    Enum_Unnamed115::G_PARAM_STATIC_NAME;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_Unnamed115 {
    G_PARAM_READABLE = 1,
    G_PARAM_WRITABLE = 2,
    G_PARAM_READWRITE = 3,
    G_PARAM_CONSTRUCT = 4,
    G_PARAM_CONSTRUCT_ONLY = 8,
    G_PARAM_LAX_VALIDATION = 16,
    G_PARAM_STATIC_NAME = 32,
    G_PARAM_STATIC_NICK = 64,
    G_PARAM_STATIC_BLURB = 128,
    G_PARAM_EXPLICIT_NOTIFY = 1073741824,
    G_PARAM_DEPRECATED = -2147483648,
}
pub type GParamFlags = Enum_Unnamed115;
pub type GParamSpec = Struct__GParamSpec;
pub type GParamSpecClass = Struct__GParamSpecClass;
pub type GParameter = Struct__GParameter;
pub enum Struct__GParamSpecPool { }
pub type GParamSpecPool = Struct__GParamSpecPool;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpec {
    pub g_type_instance: GTypeInstance,
    pub name: *const gchar,
    pub flags: GParamFlags,
    pub value_type: GType,
    pub owner_type: GType,
    pub _nick: *mut gchar,
    pub _blurb: *mut gchar,
    pub qdata: *mut GData,
    pub ref_count: guint,
    pub param_id: guint,
}
impl ::std::clone::Clone for Struct__GParamSpec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecClass {
    pub g_type_class: GTypeClass,
    pub value_type: GType,
    pub finalize: ::std::option::Option<unsafe extern "C" fn(pspec:
                                                                 *mut GParamSpec)>,
    pub value_set_default: ::std::option::Option<unsafe extern "C" fn(pspec:
                                                                          *mut GParamSpec,
                                                                      value:
                                                                          *mut GValue)>,
    pub value_validate: ::std::option::Option<unsafe extern "C" fn(pspec:
                                                                       *mut GParamSpec,
                                                                   value:
                                                                       *mut GValue)
                                                  -> gboolean>,
    pub values_cmp: ::std::option::Option<unsafe extern "C" fn(pspec:
                                                                   *mut GParamSpec,
                                                               value1:
                                                                   *const GValue,
                                                               value2:
                                                                   *const GValue)
                                              -> gint>,
    pub dummy: [gpointer; 4usize],
}
impl ::std::clone::Clone for Struct__GParamSpecClass {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecClass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParameter {
    pub name: *const gchar,
    pub value: GValue,
}
impl ::std::clone::Clone for Struct__GParameter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParameter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GParamSpecTypeInfo = Struct__GParamSpecTypeInfo;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecTypeInfo {
    pub instance_size: guint16,
    pub n_preallocs: guint16,
    pub instance_init: ::std::option::Option<unsafe extern "C" fn(pspec:
                                                                      *mut GParamSpec)>,
    pub value_type: GType,
    pub finalize: ::std::option::Option<unsafe extern "C" fn(pspec:
                                                                 *mut GParamSpec)>,
    pub value_set_default: ::std::option::Option<unsafe extern "C" fn(pspec:
                                                                          *mut GParamSpec,
                                                                      value:
                                                                          *mut GValue)>,
    pub value_validate: ::std::option::Option<unsafe extern "C" fn(pspec:
                                                                       *mut GParamSpec,
                                                                   value:
                                                                       *mut GValue)
                                                  -> gboolean>,
    pub values_cmp: ::std::option::Option<unsafe extern "C" fn(pspec:
                                                                   *mut GParamSpec,
                                                               value1:
                                                                   *const GValue,
                                                               value2:
                                                                   *const GValue)
                                              -> gint>,
}
impl ::std::clone::Clone for Struct__GParamSpecTypeInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecTypeInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GClosure = Struct__GClosure;
pub type GClosureNotifyData = Struct__GClosureNotifyData;
pub type GCallback = ::std::option::Option<extern "C" fn()>;
pub type GClosureNotify =
    ::std::option::Option<unsafe extern "C" fn(data: gpointer,
                                               closure: *mut GClosure)>;
pub type GClosureMarshal =
    ::std::option::Option<unsafe extern "C" fn(closure: *mut GClosure,
                                               return_value: *mut GValue,
                                               n_param_values: guint,
                                               param_values: *const GValue,
                                               invocation_hint: gpointer,
                                               marshal_data: gpointer)>;
pub type GVaClosureMarshal =
    ::std::option::Option<unsafe extern "C" fn(closure: *mut GClosure,
                                               return_value: *mut GValue,
                                               instance: gpointer,
                                               args: va_list,
                                               marshal_data: gpointer,
                                               n_params:
                                                   ::std::os::raw::c_int,
                                               param_types: *mut GType)>;
pub type GCClosure = Struct__GCClosure;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GClosureNotifyData {
    pub data: gpointer,
    pub notify: GClosureNotify,
}
impl ::std::clone::Clone for Struct__GClosureNotifyData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GClosureNotifyData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GClosure {
    pub _bindgen_bitfield_1_: guint,
    pub _bindgen_bitfield_2_: guint,
    pub _bindgen_bitfield_3_: guint,
    pub _bindgen_bitfield_4_: guint,
    pub _bindgen_bitfield_5_: guint,
    pub _bindgen_bitfield_6_: guint,
    pub _bindgen_bitfield_7_: guint,
    pub _bindgen_bitfield_8_: guint,
    pub _bindgen_bitfield_9_: guint,
    pub _bindgen_bitfield_10_: guint,
    pub marshal: ::std::option::Option<unsafe extern "C" fn(closure:
                                                                *mut GClosure,
                                                            return_value:
                                                                *mut GValue,
                                                            n_param_values:
                                                                guint,
                                                            param_values:
                                                                *const GValue,
                                                            invocation_hint:
                                                                gpointer,
                                                            marshal_data:
                                                                gpointer)>,
    pub data: gpointer,
    pub notifiers: *mut GClosureNotifyData,
}
impl ::std::clone::Clone for Struct__GClosure {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GClosure {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GCClosure {
    pub closure: GClosure,
    pub callback: gpointer,
}
impl ::std::clone::Clone for Struct__GCClosure {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GCClosure {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GSignalQuery = Struct__GSignalQuery;
pub type GSignalInvocationHint = Struct__GSignalInvocationHint;
pub type GSignalCMarshaller = GClosureMarshal;
pub type GSignalCVaMarshaller = GVaClosureMarshal;
pub type GSignalEmissionHook =
    ::std::option::Option<unsafe extern "C" fn(ihint:
                                                   *mut GSignalInvocationHint,
                                               n_param_values: guint,
                                               param_values: *const GValue,
                                               data: gpointer) -> gboolean>;
pub type GSignalAccumulator =
    ::std::option::Option<unsafe extern "C" fn(ihint:
                                                   *mut GSignalInvocationHint,
                                               return_accu: *mut GValue,
                                               handler_return: *const GValue,
                                               data: gpointer) -> gboolean>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed116 {
    G_SIGNAL_RUN_FIRST = 1,
    G_SIGNAL_RUN_LAST = 2,
    G_SIGNAL_RUN_CLEANUP = 4,
    G_SIGNAL_NO_RECURSE = 8,
    G_SIGNAL_DETAILED = 16,
    G_SIGNAL_ACTION = 32,
    G_SIGNAL_NO_HOOKS = 64,
    G_SIGNAL_MUST_COLLECT = 128,
    G_SIGNAL_DEPRECATED = 256,
}
pub type GSignalFlags = Enum_Unnamed116;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed117 { G_CONNECT_AFTER = 1, G_CONNECT_SWAPPED = 2, }
pub type GConnectFlags = Enum_Unnamed117;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed118 {
    G_SIGNAL_MATCH_ID = 1,
    G_SIGNAL_MATCH_DETAIL = 2,
    G_SIGNAL_MATCH_CLOSURE = 4,
    G_SIGNAL_MATCH_FUNC = 8,
    G_SIGNAL_MATCH_DATA = 16,
    G_SIGNAL_MATCH_UNBLOCKED = 32,
}
pub type GSignalMatchType = Enum_Unnamed118;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GSignalInvocationHint {
    pub signal_id: guint,
    pub detail: GQuark,
    pub run_type: GSignalFlags,
}
impl ::std::clone::Clone for Struct__GSignalInvocationHint {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GSignalInvocationHint {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GSignalQuery {
    pub signal_id: guint,
    pub signal_name: *const gchar,
    pub itype: GType,
    pub signal_flags: GSignalFlags,
    pub return_type: GType,
    pub n_params: guint,
    pub param_types: *const GType,
}
impl ::std::clone::Clone for Struct__GSignalQuery {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GSignalQuery {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GBoxedCopyFunc =
    ::std::option::Option<extern "C" fn(boxed: gpointer) -> gpointer>;
pub type GBoxedFreeFunc =
    ::std::option::Option<extern "C" fn(boxed: gpointer)>;
pub type GObject = Struct__GObject;
pub type GObjectClass = Struct__GObjectClass;
pub type GInitiallyUnowned = Struct__GObject;
pub type GInitiallyUnownedClass = Struct__GObjectClass;
pub type GObjectConstructParam = Struct__GObjectConstructParam;
pub type GObjectGetPropertyFunc =
    ::std::option::Option<unsafe extern "C" fn(object: *mut GObject,
                                               property_id: guint,
                                               value: *mut GValue,
                                               pspec: *mut GParamSpec)>;
pub type GObjectSetPropertyFunc =
    ::std::option::Option<unsafe extern "C" fn(object: *mut GObject,
                                               property_id: guint,
                                               value: *const GValue,
                                               pspec: *mut GParamSpec)>;
pub type GObjectFinalizeFunc =
    ::std::option::Option<unsafe extern "C" fn(object: *mut GObject)>;
pub type GWeakNotify =
    ::std::option::Option<unsafe extern "C" fn(data: gpointer,
                                               where_the_object_was:
                                                   *mut GObject)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GObject {
    pub g_type_instance: GTypeInstance,
    pub ref_count: guint,
    pub qdata: *mut GData,
}
impl ::std::clone::Clone for Struct__GObject {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GObject {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GObjectClass {
    pub g_type_class: GTypeClass,
    pub construct_properties: *mut GSList,
    pub constructor: ::std::option::Option<unsafe extern "C" fn(_type: GType,
                                                                n_construct_properties:
                                                                    guint,
                                                                construct_properties:
                                                                    *mut GObjectConstructParam)
                                               -> *mut GObject>,
    pub set_property: ::std::option::Option<unsafe extern "C" fn(object:
                                                                     *mut GObject,
                                                                 property_id:
                                                                     guint,
                                                                 value:
                                                                     *const GValue,
                                                                 pspec:
                                                                     *mut GParamSpec)>,
    pub get_property: ::std::option::Option<unsafe extern "C" fn(object:
                                                                     *mut GObject,
                                                                 property_id:
                                                                     guint,
                                                                 value:
                                                                     *mut GValue,
                                                                 pspec:
                                                                     *mut GParamSpec)>,
    pub dispose: ::std::option::Option<unsafe extern "C" fn(object:
                                                                *mut GObject)>,
    pub finalize: ::std::option::Option<unsafe extern "C" fn(object:
                                                                 *mut GObject)>,
    pub dispatch_properties_changed: ::std::option::Option<unsafe extern "C" fn(object:
                                                                                    *mut GObject,
                                                                                n_pspecs:
                                                                                    guint,
                                                                                pspecs:
                                                                                    *mut *mut GParamSpec)>,
    pub notify: ::std::option::Option<unsafe extern "C" fn(object:
                                                               *mut GObject,
                                                           pspec:
                                                               *mut GParamSpec)>,
    pub constructed: ::std::option::Option<unsafe extern "C" fn(object:
                                                                    *mut GObject)>,
    pub flags: gsize,
    pub pdummy: [gpointer; 6usize],
}
impl ::std::clone::Clone for Struct__GObjectClass {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GObjectClass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GObjectConstructParam {
    pub pspec: *mut GParamSpec,
    pub value: *mut GValue,
}
impl ::std::clone::Clone for Struct__GObjectConstructParam {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GObjectConstructParam {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GToggleNotify =
    ::std::option::Option<unsafe extern "C" fn(data: gpointer,
                                               object: *mut GObject,
                                               is_last_ref: gboolean)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed119 {
    pub _priv: Union_Unnamed120,
}
impl ::std::clone::Clone for Struct_Unnamed119 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed119 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed120 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed120 {
    pub unsafe fn p(&mut self) -> *mut gpointer {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed120 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed120 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GWeakRef = Struct_Unnamed119;
pub enum Struct__GBinding { }
pub type GBinding = Struct__GBinding;
pub type GBindingTransformFunc =
    ::std::option::Option<unsafe extern "C" fn(binding: *mut GBinding,
                                               from_value: *const GValue,
                                               to_value: *mut GValue,
                                               user_data: gpointer)
                              -> gboolean>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed121 {
    G_BINDING_DEFAULT = 0,
    G_BINDING_BIDIRECTIONAL = 1,
    G_BINDING_SYNC_CREATE = 2,
    G_BINDING_INVERT_BOOLEAN = 4,
}
pub type GBindingFlags = Enum_Unnamed121;
pub type GEnumClass = Struct__GEnumClass;
pub type GFlagsClass = Struct__GFlagsClass;
pub type GEnumValue = Struct__GEnumValue;
pub type GFlagsValue = Struct__GFlagsValue;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GEnumClass {
    pub g_type_class: GTypeClass,
    pub minimum: gint,
    pub maximum: gint,
    pub n_values: guint,
    pub values: *mut GEnumValue,
}
impl ::std::clone::Clone for Struct__GEnumClass {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GEnumClass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GFlagsClass {
    pub g_type_class: GTypeClass,
    pub mask: guint,
    pub n_values: guint,
    pub values: *mut GFlagsValue,
}
impl ::std::clone::Clone for Struct__GFlagsClass {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GFlagsClass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GEnumValue {
    pub value: gint,
    pub value_name: *const gchar,
    pub value_nick: *const gchar,
}
impl ::std::clone::Clone for Struct__GEnumValue {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GEnumValue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GFlagsValue {
    pub value: guint,
    pub value_name: *const gchar,
    pub value_nick: *const gchar,
}
impl ::std::clone::Clone for Struct__GFlagsValue {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GFlagsValue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GParamSpecChar = Struct__GParamSpecChar;
pub type GParamSpecUChar = Struct__GParamSpecUChar;
pub type GParamSpecBoolean = Struct__GParamSpecBoolean;
pub type GParamSpecInt = Struct__GParamSpecInt;
pub type GParamSpecUInt = Struct__GParamSpecUInt;
pub type GParamSpecLong = Struct__GParamSpecLong;
pub type GParamSpecULong = Struct__GParamSpecULong;
pub type GParamSpecInt64 = Struct__GParamSpecInt64;
pub type GParamSpecUInt64 = Struct__GParamSpecUInt64;
pub type GParamSpecUnichar = Struct__GParamSpecUnichar;
pub type GParamSpecEnum = Struct__GParamSpecEnum;
pub type GParamSpecFlags = Struct__GParamSpecFlags;
pub type GParamSpecFloat = Struct__GParamSpecFloat;
pub type GParamSpecDouble = Struct__GParamSpecDouble;
pub type GParamSpecString = Struct__GParamSpecString;
pub type GParamSpecParam = Struct__GParamSpecParam;
pub type GParamSpecBoxed = Struct__GParamSpecBoxed;
pub type GParamSpecPointer = Struct__GParamSpecPointer;
pub type GParamSpecValueArray = Struct__GParamSpecValueArray;
pub type GParamSpecObject = Struct__GParamSpecObject;
pub type GParamSpecOverride = Struct__GParamSpecOverride;
pub type GParamSpecGType = Struct__GParamSpecGType;
pub type GParamSpecVariant = Struct__GParamSpecVariant;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecChar {
    pub parent_instance: GParamSpec,
    pub minimum: gint8,
    pub maximum: gint8,
    pub default_value: gint8,
}
impl ::std::clone::Clone for Struct__GParamSpecChar {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecChar {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecUChar {
    pub parent_instance: GParamSpec,
    pub minimum: guint8,
    pub maximum: guint8,
    pub default_value: guint8,
}
impl ::std::clone::Clone for Struct__GParamSpecUChar {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecUChar {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecBoolean {
    pub parent_instance: GParamSpec,
    pub default_value: gboolean,
}
impl ::std::clone::Clone for Struct__GParamSpecBoolean {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecBoolean {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecInt {
    pub parent_instance: GParamSpec,
    pub minimum: gint,
    pub maximum: gint,
    pub default_value: gint,
}
impl ::std::clone::Clone for Struct__GParamSpecInt {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecInt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecUInt {
    pub parent_instance: GParamSpec,
    pub minimum: guint,
    pub maximum: guint,
    pub default_value: guint,
}
impl ::std::clone::Clone for Struct__GParamSpecUInt {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecUInt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecLong {
    pub parent_instance: GParamSpec,
    pub minimum: glong,
    pub maximum: glong,
    pub default_value: glong,
}
impl ::std::clone::Clone for Struct__GParamSpecLong {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecLong {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecULong {
    pub parent_instance: GParamSpec,
    pub minimum: gulong,
    pub maximum: gulong,
    pub default_value: gulong,
}
impl ::std::clone::Clone for Struct__GParamSpecULong {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecULong {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecInt64 {
    pub parent_instance: GParamSpec,
    pub minimum: gint64,
    pub maximum: gint64,
    pub default_value: gint64,
}
impl ::std::clone::Clone for Struct__GParamSpecInt64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecInt64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecUInt64 {
    pub parent_instance: GParamSpec,
    pub minimum: guint64,
    pub maximum: guint64,
    pub default_value: guint64,
}
impl ::std::clone::Clone for Struct__GParamSpecUInt64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecUInt64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecUnichar {
    pub parent_instance: GParamSpec,
    pub default_value: gunichar,
}
impl ::std::clone::Clone for Struct__GParamSpecUnichar {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecUnichar {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecEnum {
    pub parent_instance: GParamSpec,
    pub enum_class: *mut GEnumClass,
    pub default_value: gint,
}
impl ::std::clone::Clone for Struct__GParamSpecEnum {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecEnum {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecFlags {
    pub parent_instance: GParamSpec,
    pub flags_class: *mut GFlagsClass,
    pub default_value: guint,
}
impl ::std::clone::Clone for Struct__GParamSpecFlags {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecFlags {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecFloat {
    pub parent_instance: GParamSpec,
    pub minimum: gfloat,
    pub maximum: gfloat,
    pub default_value: gfloat,
    pub epsilon: gfloat,
}
impl ::std::clone::Clone for Struct__GParamSpecFloat {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecFloat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecDouble {
    pub parent_instance: GParamSpec,
    pub minimum: gdouble,
    pub maximum: gdouble,
    pub default_value: gdouble,
    pub epsilon: gdouble,
}
impl ::std::clone::Clone for Struct__GParamSpecDouble {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecDouble {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecString {
    pub parent_instance: GParamSpec,
    pub default_value: *mut gchar,
    pub cset_first: *mut gchar,
    pub cset_nth: *mut gchar,
    pub substitutor: gchar,
    pub _bindgen_bitfield_1_: guint,
    pub _bindgen_bitfield_2_: guint,
}
impl ::std::clone::Clone for Struct__GParamSpecString {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecString {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecParam {
    pub parent_instance: GParamSpec,
}
impl ::std::clone::Clone for Struct__GParamSpecParam {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecParam {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecBoxed {
    pub parent_instance: GParamSpec,
}
impl ::std::clone::Clone for Struct__GParamSpecBoxed {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecBoxed {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecPointer {
    pub parent_instance: GParamSpec,
}
impl ::std::clone::Clone for Struct__GParamSpecPointer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecPointer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecValueArray {
    pub parent_instance: GParamSpec,
    pub element_spec: *mut GParamSpec,
    pub fixed_n_elements: guint,
}
impl ::std::clone::Clone for Struct__GParamSpecValueArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecValueArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecObject {
    pub parent_instance: GParamSpec,
}
impl ::std::clone::Clone for Struct__GParamSpecObject {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecObject {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecOverride {
    pub parent_instance: GParamSpec,
    pub overridden: *mut GParamSpec,
}
impl ::std::clone::Clone for Struct__GParamSpecOverride {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecOverride {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecGType {
    pub parent_instance: GParamSpec,
    pub is_a_type: GType,
}
impl ::std::clone::Clone for Struct__GParamSpecGType {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecGType {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GParamSpecVariant {
    pub parent_instance: GParamSpec,
    pub _type: *mut GVariantType,
    pub default_value: *mut GVariant,
    pub padding: [gpointer; 4usize],
}
impl ::std::clone::Clone for Struct__GParamSpecVariant {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GParamSpecVariant {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GTypeModule = Struct__GTypeModule;
pub type GTypeModuleClass = Struct__GTypeModuleClass;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GTypeModule {
    pub parent_instance: GObject,
    pub use_count: guint,
    pub type_infos: *mut GSList,
    pub interface_infos: *mut GSList,
    pub name: *mut gchar,
}
impl ::std::clone::Clone for Struct__GTypeModule {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GTypeModule {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GTypeModuleClass {
    pub parent_class: GObjectClass,
    pub load: ::std::option::Option<unsafe extern "C" fn(module:
                                                             *mut GTypeModule)
                                        -> gboolean>,
    pub unload: ::std::option::Option<unsafe extern "C" fn(module:
                                                               *mut GTypeModule)>,
    pub reserved1: ::std::option::Option<extern "C" fn()>,
    pub reserved2: ::std::option::Option<extern "C" fn()>,
    pub reserved3: ::std::option::Option<extern "C" fn()>,
    pub reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__GTypeModuleClass {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GTypeModuleClass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GTypePluginClass = Struct__GTypePluginClass;
pub type GTypePluginUse =
    ::std::option::Option<unsafe extern "C" fn(plugin: *mut GTypePlugin)>;
pub type GTypePluginUnuse =
    ::std::option::Option<unsafe extern "C" fn(plugin: *mut GTypePlugin)>;
pub type GTypePluginCompleteTypeInfo =
    ::std::option::Option<unsafe extern "C" fn(plugin: *mut GTypePlugin,
                                               g_type: GType,
                                               info: *mut GTypeInfo,
                                               value_table:
                                                   *mut GTypeValueTable)>;
pub type GTypePluginCompleteInterfaceInfo =
    ::std::option::Option<unsafe extern "C" fn(plugin: *mut GTypePlugin,
                                               instance_type: GType,
                                               interface_type: GType,
                                               info: *mut GInterfaceInfo)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GTypePluginClass {
    pub base_iface: GTypeInterface,
    pub use_plugin: GTypePluginUse,
    pub unuse_plugin: GTypePluginUnuse,
    pub complete_type_info: GTypePluginCompleteTypeInfo,
    pub complete_interface_info: GTypePluginCompleteInterfaceInfo,
}
impl ::std::clone::Clone for Struct__GTypePluginClass {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GTypePluginClass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type GValueArray = Struct__GValueArray;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__GValueArray {
    pub n_values: guint,
    pub values: *mut GValue,
    pub n_prealloced: guint,
}
impl ::std::clone::Clone for Struct__GValueArray {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__GValueArray {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gchararray = *mut gchar;
pub type GObject_autoptr = *mut GObject;
pub type GInitiallyUnowned_autoptr = *mut GInitiallyUnowned;
pub type PurpleAccountUiOps = Struct__PurpleAccountUiOps;
pub type PurpleAccount = Struct__PurpleAccount;
pub type PurpleFilterAccountFunc =
    ::std::option::Option<unsafe extern "C" fn(account: *mut PurpleAccount)
                              -> gboolean>;
pub type PurpleAccountRequestAuthorizationCb =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void)>;
pub type PurpleAccountRegistrationCb =
    ::std::option::Option<unsafe extern "C" fn(account: *mut PurpleAccount,
                                               succeeded: gboolean,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)>;
pub type PurpleAccountUnregistrationCb =
    ::std::option::Option<unsafe extern "C" fn(account: *mut PurpleAccount,
                                               succeeded: gboolean,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)>;
pub type PurpleSetPublicAliasSuccessCallback =
    ::std::option::Option<unsafe extern "C" fn(account: *mut PurpleAccount,
                                               new_alias:
                                                   *const ::std::os::raw::c_char)>;
pub type PurpleSetPublicAliasFailureCallback =
    ::std::option::Option<unsafe extern "C" fn(account: *mut PurpleAccount,
                                               error:
                                                   *const ::std::os::raw::c_char)>;
pub type PurpleGetPublicAliasSuccessCallback =
    ::std::option::Option<unsafe extern "C" fn(account: *mut PurpleAccount,
                                               alias:
                                                   *const ::std::os::raw::c_char)>;
pub type PurpleGetPublicAliasFailureCallback =
    ::std::option::Option<unsafe extern "C" fn(account: *mut PurpleAccount,
                                               error:
                                                   *const ::std::os::raw::c_char)>;
pub type PurpleConnection = Struct__PurpleConnection;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed122 {
    PURPLE_CONNECTION_HTML = 1,
    PURPLE_CONNECTION_NO_BGCOLOR = 2,
    PURPLE_CONNECTION_AUTO_RESP = 4,
    PURPLE_CONNECTION_FORMATTING_WBFO = 8,
    PURPLE_CONNECTION_NO_NEWLINES = 16,
    PURPLE_CONNECTION_NO_FONTSIZE = 32,
    PURPLE_CONNECTION_NO_URLDESC = 64,
    PURPLE_CONNECTION_NO_IMAGES = 128,
    PURPLE_CONNECTION_ALLOW_CUSTOM_SMILEY = 256,
    PURPLE_CONNECTION_SUPPORT_MOODS = 512,
    PURPLE_CONNECTION_SUPPORT_MOOD_MESSAGES = 1024,
}
pub type PurpleConnectionFlags = Enum_Unnamed122;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed123 {
    PURPLE_DISCONNECTED = 0,
    PURPLE_CONNECTED = 1,
    PURPLE_CONNECTING = 2,
}
pub type PurpleConnectionState = Enum_Unnamed123;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed124 {
    PURPLE_CONNECTION_ERROR_NETWORK_ERROR = 0,
    PURPLE_CONNECTION_ERROR_INVALID_USERNAME = 1,
    PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED = 2,
    PURPLE_CONNECTION_ERROR_AUTHENTICATION_IMPOSSIBLE = 3,
    PURPLE_CONNECTION_ERROR_NO_SSL_SUPPORT = 4,
    PURPLE_CONNECTION_ERROR_ENCRYPTION_ERROR = 5,
    PURPLE_CONNECTION_ERROR_NAME_IN_USE = 6,
    PURPLE_CONNECTION_ERROR_INVALID_SETTINGS = 7,
    PURPLE_CONNECTION_ERROR_CERT_NOT_PROVIDED = 8,
    PURPLE_CONNECTION_ERROR_CERT_UNTRUSTED = 9,
    PURPLE_CONNECTION_ERROR_CERT_EXPIRED = 10,
    PURPLE_CONNECTION_ERROR_CERT_NOT_ACTIVATED = 11,
    PURPLE_CONNECTION_ERROR_CERT_HOSTNAME_MISMATCH = 12,
    PURPLE_CONNECTION_ERROR_CERT_FINGERPRINT_MISMATCH = 13,
    PURPLE_CONNECTION_ERROR_CERT_SELF_SIGNED = 14,
    PURPLE_CONNECTION_ERROR_CERT_OTHER_ERROR = 15,
    PURPLE_CONNECTION_ERROR_OTHER_ERROR = 16,
}
pub type PurpleConnectionError = Enum_Unnamed124;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed125 {
    pub _type: PurpleConnectionError,
    pub description: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed125 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed125 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleConnectionErrorInfo = Struct_Unnamed125;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed126 {
    G_MODULE_BIND_LAZY = 1,
    G_MODULE_BIND_LOCAL = 2,
    G_MODULE_BIND_MASK = 3,
}
pub type GModuleFlags = Enum_Unnamed126;
pub enum Struct__GModule { }
pub type GModule = Struct__GModule;
pub type GModuleCheckInit =
    ::std::option::Option<unsafe extern "C" fn(module: *mut GModule)
                              -> *const gchar>;
pub type GModuleUnload =
    ::std::option::Option<unsafe extern "C" fn(module: *mut GModule)>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed127 {
    PURPLE_TYPE_UNKNOWN = 0,
    PURPLE_TYPE_SUBTYPE = 1,
    PURPLE_TYPE_CHAR = 2,
    PURPLE_TYPE_UCHAR = 3,
    PURPLE_TYPE_BOOLEAN = 4,
    PURPLE_TYPE_SHORT = 5,
    PURPLE_TYPE_USHORT = 6,
    PURPLE_TYPE_INT = 7,
    PURPLE_TYPE_UINT = 8,
    PURPLE_TYPE_LONG = 9,
    PURPLE_TYPE_ULONG = 10,
    PURPLE_TYPE_INT64 = 11,
    PURPLE_TYPE_UINT64 = 12,
    PURPLE_TYPE_STRING = 13,
    PURPLE_TYPE_OBJECT = 14,
    PURPLE_TYPE_POINTER = 15,
    PURPLE_TYPE_ENUM = 16,
    PURPLE_TYPE_BOXED = 17,
}
pub type PurpleType = Enum_Unnamed127;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed128 {
    PURPLE_SUBTYPE_UNKNOWN = 0,
    PURPLE_SUBTYPE_ACCOUNT = 1,
    PURPLE_SUBTYPE_BLIST = 2,
    PURPLE_SUBTYPE_BLIST_BUDDY = 3,
    PURPLE_SUBTYPE_BLIST_GROUP = 4,
    PURPLE_SUBTYPE_BLIST_CHAT = 5,
    PURPLE_SUBTYPE_BUDDY_ICON = 6,
    PURPLE_SUBTYPE_CONNECTION = 7,
    PURPLE_SUBTYPE_CONVERSATION = 8,
    PURPLE_SUBTYPE_PLUGIN = 9,
    PURPLE_SUBTYPE_BLIST_NODE = 10,
    PURPLE_SUBTYPE_CIPHER = 11,
    PURPLE_SUBTYPE_STATUS = 12,
    PURPLE_SUBTYPE_LOG = 13,
    PURPLE_SUBTYPE_XFER = 14,
    PURPLE_SUBTYPE_SAVEDSTATUS = 15,
    PURPLE_SUBTYPE_XMLNODE = 16,
    PURPLE_SUBTYPE_USERINFO = 17,
    PURPLE_SUBTYPE_STORED_IMAGE = 18,
    PURPLE_SUBTYPE_CERTIFICATEPOOL = 19,
    PURPLE_SUBTYPE_CHATBUDDY = 20,
}
pub type PurpleSubType = Enum_Unnamed128;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed129 {
    pub _type: PurpleType,
    pub flags: ::std::os::raw::c_ushort,
    pub data: Union_Unnamed130,
    pub u: Union_Unnamed131,
}
impl ::std::clone::Clone for Struct_Unnamed129 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed129 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed130 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed130 {
    pub unsafe fn char_data(&mut self) -> *mut ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn uchar_data(&mut self) -> *mut ::std::os::raw::c_uchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn boolean_data(&mut self) -> *mut gboolean {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn short_data(&mut self) -> *mut ::std::os::raw::c_short {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ushort_data(&mut self) -> *mut ::std::os::raw::c_ushort {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn int_data(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn uint_data(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn long_data(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ulong_data(&mut self) -> *mut ::std::os::raw::c_ulong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn int64_data(&mut self) -> *mut gint64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn uint64_data(&mut self) -> *mut guint64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn string_data(&mut self) -> *mut *mut ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn object_data(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn pointer_data(&mut self)
     -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn enum_data(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn boxed_data(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed130 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed130 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed131 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed131 {
    pub unsafe fn subtype(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn specific_type(&mut self)
     -> *mut *mut ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed131 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed131 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleValue = Struct_Unnamed129;
pub type PurpleCallback = ::std::option::Option<extern "C" fn()>;
pub type PurpleSignalMarshalFunc =
    ::std::option::Option<unsafe extern "C" fn(cb: PurpleCallback,
                                               args: va_list,
                                               data:
                                                   *mut ::std::os::raw::c_void,
                                               return_val:
                                                   *mut *mut ::std::os::raw::c_void)>;
pub type PurplePlugin = Struct__PurplePlugin;
pub type PurplePluginInfo = Struct__PurplePluginInfo;
pub type PurplePluginUiInfo = Struct__PurplePluginUiInfo;
pub type PurplePluginLoaderInfo = Struct__PurplePluginLoaderInfo;
pub type PurplePluginAction = Struct__PurplePluginAction;
pub type PurplePluginPriority = ::std::os::raw::c_int;
pub enum Struct__PurplePluginPrefFrame { }
pub type PurplePluginPrefFrame = Struct__PurplePluginPrefFrame;
pub enum Struct__PurplePluginPref { }
pub type PurplePluginPref = Struct__PurplePluginPref;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed132 {
    PURPLE_STRING_FORMAT_TYPE_NONE = 0,
    PURPLE_STRING_FORMAT_TYPE_MULTILINE = 1,
    PURPLE_STRING_FORMAT_TYPE_HTML = 2,
}
pub type PurpleStringFormatType = Enum_Unnamed132;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed133 {
    PURPLE_PLUGIN_PREF_NONE = 0,
    PURPLE_PLUGIN_PREF_CHOICE = 1,
    PURPLE_PLUGIN_PREF_INFO = 2,
    PURPLE_PLUGIN_PREF_STRING_FORMAT = 3,
}
pub type PurplePluginPrefType = Enum_Unnamed133;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__PurplePrefType {
    PURPLE_PREF_NONE = 0,
    PURPLE_PREF_BOOLEAN = 1,
    PURPLE_PREF_INT = 2,
    PURPLE_PREF_STRING = 3,
    PURPLE_PREF_STRING_LIST = 4,
    PURPLE_PREF_PATH = 5,
    PURPLE_PREF_PATH_LIST = 6,
}
pub type PurplePrefType = Enum__PurplePrefType;
pub type PurplePrefCallback =
    ::std::option::Option<unsafe extern "C" fn(name:
                                                   *const ::std::os::raw::c_char,
                                               _type: PurplePrefType,
                                               val: gconstpointer,
                                               data: gpointer)>;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_Unnamed134 {
    PURPLE_PLUGIN_UNKNOWN = -1,
    PURPLE_PLUGIN_STANDARD = 0,
    PURPLE_PLUGIN_LOADER = 1,
    PURPLE_PLUGIN_PROTOCOL = 2,
}
pub type PurplePluginType = Enum_Unnamed134;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurplePluginInfo {
    pub magic: ::std::os::raw::c_uint,
    pub major_version: ::std::os::raw::c_uint,
    pub minor_version: ::std::os::raw::c_uint,
    pub _type: PurplePluginType,
    pub ui_requirement: *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_ulong,
    pub dependencies: *mut GList,
    pub priority: PurplePluginPriority,
    pub id: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
    pub summary: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub author: *mut ::std::os::raw::c_char,
    pub homepage: *mut ::std::os::raw::c_char,
    pub load: ::std::option::Option<unsafe extern "C" fn(plugin:
                                                             *mut PurplePlugin)
                                        -> gboolean>,
    pub unload: ::std::option::Option<unsafe extern "C" fn(plugin:
                                                               *mut PurplePlugin)
                                          -> gboolean>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(plugin:
                                                                *mut PurplePlugin)>,
    pub ui_info: *mut ::std::os::raw::c_void,
    pub extra_info: *mut ::std::os::raw::c_void,
    pub prefs_info: *mut PurplePluginUiInfo,
    pub actions: ::std::option::Option<unsafe extern "C" fn(plugin:
                                                                *mut PurplePlugin,
                                                            context: gpointer)
                                           -> *mut GList>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurplePluginInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurplePluginInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurplePluginLoaderInfo {
    pub exts: *mut GList,
    pub probe: ::std::option::Option<unsafe extern "C" fn(plugin:
                                                              *mut PurplePlugin)
                                         -> gboolean>,
    pub load: ::std::option::Option<unsafe extern "C" fn(plugin:
                                                             *mut PurplePlugin)
                                        -> gboolean>,
    pub unload: ::std::option::Option<unsafe extern "C" fn(plugin:
                                                               *mut PurplePlugin)
                                          -> gboolean>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(plugin:
                                                                *mut PurplePlugin)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurplePluginLoaderInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurplePluginLoaderInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurplePlugin {
    pub native_plugin: gboolean,
    pub loaded: gboolean,
    pub handle: *mut ::std::os::raw::c_void,
    pub path: *mut ::std::os::raw::c_char,
    pub info: *mut PurplePluginInfo,
    pub error: *mut ::std::os::raw::c_char,
    pub ipc_data: *mut ::std::os::raw::c_void,
    pub extra: *mut ::std::os::raw::c_void,
    pub unloadable: gboolean,
    pub dependent_plugins: *mut GList,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurplePlugin {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurplePlugin {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurplePluginUiInfo {
    pub get_plugin_pref_frame: ::std::option::Option<unsafe extern "C" fn(plugin:
                                                                              *mut PurplePlugin)
                                                         ->
                                                             *mut PurplePluginPrefFrame>,
    pub page_num: ::std::os::raw::c_int,
    pub frame: *mut PurplePluginPrefFrame,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurplePluginUiInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurplePluginUiInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurplePluginAction {
    pub label: *mut ::std::os::raw::c_char,
    pub callback: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut PurplePluginAction)>,
    pub plugin: *mut PurplePlugin,
    pub context: gpointer,
    pub user_data: gpointer,
}
impl ::std::clone::Clone for Struct__PurplePluginAction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurplePluginAction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__PurpleStatusType { }
pub type PurpleStatusType = Struct__PurpleStatusType;
pub enum Struct__PurpleStatusAttr { }
pub type PurpleStatusAttr = Struct__PurpleStatusAttr;
pub enum Struct__PurplePresence { }
pub type PurplePresence = Struct__PurplePresence;
pub enum Struct__PurpleStatus { }
pub type PurpleStatus = Struct__PurpleStatus;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleMood {
    pub mood: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub padding: *mut gpointer,
}
impl ::std::clone::Clone for Struct__PurpleMood {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleMood {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleMood = Struct__PurpleMood;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed135 {
    PURPLE_PRESENCE_CONTEXT_UNSET = 0,
    PURPLE_PRESENCE_CONTEXT_ACCOUNT = 1,
    PURPLE_PRESENCE_CONTEXT_CONV = 2,
    PURPLE_PRESENCE_CONTEXT_BUDDY = 3,
}
pub type PurplePresenceContext = Enum_Unnamed135;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed136 {
    PURPLE_STATUS_UNSET = 0,
    PURPLE_STATUS_OFFLINE = 1,
    PURPLE_STATUS_AVAILABLE = 2,
    PURPLE_STATUS_UNAVAILABLE = 3,
    PURPLE_STATUS_INVISIBLE = 4,
    PURPLE_STATUS_AWAY = 5,
    PURPLE_STATUS_EXTENDED_AWAY = 6,
    PURPLE_STATUS_MOBILE = 7,
    PURPLE_STATUS_TUNE = 8,
    PURPLE_STATUS_MOOD = 9,
    PURPLE_STATUS_NUM_PRIMITIVES = 10,
}
pub type PurpleStatusPrimitive = Enum_Unnamed136;
pub type PurpleBuddyList = Struct__PurpleBuddyList;
pub type PurpleBlistUiOps = Struct__PurpleBlistUiOps;
pub type PurpleBlistNode = Struct__PurpleBlistNode;
pub type PurpleChat = Struct__PurpleChat;
pub type PurpleGroup = Struct__PurpleGroup;
pub type PurpleContact = Struct__PurpleContact;
pub type PurpleBuddy = Struct__PurpleBuddy;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed137 {
    PURPLE_BLIST_GROUP_NODE = 0,
    PURPLE_BLIST_CONTACT_NODE = 1,
    PURPLE_BLIST_BUDDY_NODE = 2,
    PURPLE_BLIST_CHAT_NODE = 3,
    PURPLE_BLIST_OTHER_NODE = 4,
}
pub type PurpleBlistNodeType = Enum_Unnamed137;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed138 { PURPLE_BLIST_NODE_FLAG_NO_SAVE = 1, }
pub type PurpleBlistNodeFlags = Enum_Unnamed138;
pub enum Struct__PurpleBuddyIcon { }
pub type PurpleBuddyIcon = Struct__PurpleBuddyIcon;
pub enum Struct__PurpleStoredImage { }
pub type PurpleStoredImage = Struct__PurpleStoredImage;
pub type PurplePluginProtocolInfo = Struct__PurplePluginProtocolInfo;
pub type PurpleAttentionType = Struct__PurpleAttentionType;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed139 {
    PURPLE_ICON_SCALE_DISPLAY = 1,
    PURPLE_ICON_SCALE_SEND = 2,
}
pub type PurpleIconScaleRules = Enum_Unnamed139;
pub type PurpleBuddyIconSpec = Struct__PurpleBuddyIconSpec;
pub enum Struct__PurpleThumbnailSpec { }
pub type PurpleThumbnailSpec = Struct__PurpleThumbnailSpec;
pub type PurpleConversationUiOps = Struct__PurpleConversationUiOps;
pub type PurpleConversation = Struct__PurpleConversation;
pub type PurpleConvIm = Struct__PurpleConvIm;
pub type PurpleConvChat = Struct__PurpleConvChat;
pub type PurpleConvChatBuddy = Struct__PurpleConvChatBuddy;
pub type PurpleConvMessage = Struct__PurpleConvMessage;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed140 {
    PURPLE_CONV_TYPE_UNKNOWN = 0,
    PURPLE_CONV_TYPE_IM = 1,
    PURPLE_CONV_TYPE_CHAT = 2,
    PURPLE_CONV_TYPE_MISC = 3,
    PURPLE_CONV_TYPE_ANY = 4,
}
pub type PurpleConversationType = Enum_Unnamed140;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed141 {
    PURPLE_CONV_UPDATE_ADD = 0,
    PURPLE_CONV_UPDATE_REMOVE = 1,
    PURPLE_CONV_UPDATE_ACCOUNT = 2,
    PURPLE_CONV_UPDATE_TYPING = 3,
    PURPLE_CONV_UPDATE_UNSEEN = 4,
    PURPLE_CONV_UPDATE_LOGGING = 5,
    PURPLE_CONV_UPDATE_TOPIC = 6,
    PURPLE_CONV_ACCOUNT_ONLINE = 7,
    PURPLE_CONV_ACCOUNT_OFFLINE = 8,
    PURPLE_CONV_UPDATE_AWAY = 9,
    PURPLE_CONV_UPDATE_ICON = 10,
    PURPLE_CONV_UPDATE_TITLE = 11,
    PURPLE_CONV_UPDATE_CHATLEFT = 12,
    PURPLE_CONV_UPDATE_FEATURES = 13,
}
pub type PurpleConvUpdateType = Enum_Unnamed141;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed142 {
    PURPLE_NOT_TYPING = 0,
    PURPLE_TYPING = 1,
    PURPLE_TYPED = 2,
}
pub type PurpleTypingState = Enum_Unnamed142;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed143 {
    PURPLE_MESSAGE_SEND = 1,
    PURPLE_MESSAGE_RECV = 2,
    PURPLE_MESSAGE_SYSTEM = 4,
    PURPLE_MESSAGE_AUTO_RESP = 8,
    PURPLE_MESSAGE_ACTIVE_ONLY = 16,
    PURPLE_MESSAGE_NICK = 32,
    PURPLE_MESSAGE_NO_LOG = 64,
    PURPLE_MESSAGE_WHISPER = 128,
    PURPLE_MESSAGE_ERROR = 512,
    PURPLE_MESSAGE_DELAYED = 1024,
    PURPLE_MESSAGE_RAW = 2048,
    PURPLE_MESSAGE_IMAGES = 4096,
    PURPLE_MESSAGE_NOTIFY = 8192,
    PURPLE_MESSAGE_NO_LINKIFY = 16384,
    PURPLE_MESSAGE_INVISIBLE = 32768,
}
pub type PurpleMessageFlags = Enum_Unnamed143;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed144 {
    PURPLE_CBFLAGS_NONE = 0,
    PURPLE_CBFLAGS_VOICE = 1,
    PURPLE_CBFLAGS_HALFOP = 2,
    PURPLE_CBFLAGS_OP = 4,
    PURPLE_CBFLAGS_FOUNDER = 8,
    PURPLE_CBFLAGS_TYPING = 16,
    PURPLE_CBFLAGS_AWAY = 32,
}
pub type PurpleConvChatBuddyFlags = Enum_Unnamed144;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed145 {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed146,
}
impl ::std::clone::Clone for Struct_Unnamed145 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed145 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed146 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed146 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed146 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed146 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed145;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed147 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed147 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed147 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed147;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed148 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed148 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed148 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed148;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct__IO_marker {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum___codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::clone::Clone for Struct__IO_FILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *mut ::std::os::raw::c_char, __nbytes: size_t)
        -> __ssize_t;
pub type __io_write_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __buf: *const ::std::os::raw::c_char, __n: size_t)
        -> __ssize_t;
pub type __io_seek_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void,
                         __pos: *mut __off64_t, __w: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
pub type __io_close_fn =
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
pub type fpos_t = _G_fpos_t;
pub type PurpleLog = Struct__PurpleLog;
pub type PurpleLogLogger = Struct__PurpleLogLogger;
pub type PurpleLogCommonLoggerData = Struct__PurpleLogCommonLoggerData;
pub type PurpleLogSet = Struct__PurpleLogSet;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed149 {
    PURPLE_LOG_IM = 0,
    PURPLE_LOG_CHAT = 1,
    PURPLE_LOG_SYSTEM = 2,
}
pub type PurpleLogType = Enum_Unnamed149;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed150 { PURPLE_LOG_READ_NO_NEWLINE = 1, }
pub type PurpleLogReadFlags = Enum_Unnamed150;
pub type PurpleLogSetCallback =
    ::std::option::Option<unsafe extern "C" fn(sets: *mut GHashTable,
                                               set: *mut PurpleLogSet)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleLogLogger {
    pub name: *mut ::std::os::raw::c_char,
    pub id: *mut ::std::os::raw::c_char,
    pub create: ::std::option::Option<unsafe extern "C" fn(log:
                                                               *mut PurpleLog)>,
    pub write: ::std::option::Option<unsafe extern "C" fn(log: *mut PurpleLog,
                                                          _type:
                                                              PurpleMessageFlags,
                                                          from:
                                                              *const ::std::os::raw::c_char,
                                                          time: time_t,
                                                          message:
                                                              *const ::std::os::raw::c_char)
                                         -> gsize>,
    pub finalize: ::std::option::Option<unsafe extern "C" fn(log:
                                                                 *mut PurpleLog)>,
    pub list: ::std::option::Option<unsafe extern "C" fn(_type: PurpleLogType,
                                                         name:
                                                             *const ::std::os::raw::c_char,
                                                         account:
                                                             *mut PurpleAccount)
                                        -> *mut GList>,
    pub read: ::std::option::Option<unsafe extern "C" fn(log: *mut PurpleLog,
                                                         flags:
                                                             *mut PurpleLogReadFlags)
                                        -> *mut ::std::os::raw::c_char>,
    pub size: ::std::option::Option<unsafe extern "C" fn(log: *mut PurpleLog)
                                        -> ::std::os::raw::c_int>,
    pub total_size: ::std::option::Option<unsafe extern "C" fn(_type:
                                                                   PurpleLogType,
                                                               name:
                                                                   *const ::std::os::raw::c_char,
                                                               account:
                                                                   *mut PurpleAccount)
                                              -> ::std::os::raw::c_int>,
    pub list_syslog: ::std::option::Option<unsafe extern "C" fn(account:
                                                                    *mut PurpleAccount)
                                               -> *mut GList>,
    pub get_log_sets: ::std::option::Option<unsafe extern "C" fn(cb:
                                                                     PurpleLogSetCallback,
                                                                 sets:
                                                                     *mut GHashTable)>,
    pub remove: ::std::option::Option<unsafe extern "C" fn(log:
                                                               *mut PurpleLog)
                                          -> gboolean>,
    pub is_deletable: ::std::option::Option<unsafe extern "C" fn(log:
                                                                     *mut PurpleLog)
                                                -> gboolean>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurpleLogLogger {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleLogLogger {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleLog {
    pub _type: PurpleLogType,
    pub name: *mut ::std::os::raw::c_char,
    pub account: *mut PurpleAccount,
    pub conv: *mut PurpleConversation,
    pub time: time_t,
    pub logger: *mut PurpleLogLogger,
    pub logger_data: *mut ::std::os::raw::c_void,
    pub tm: *mut Struct_tm,
}
impl ::std::clone::Clone for Struct__PurpleLog {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleLog {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleLogCommonLoggerData {
    pub path: *mut ::std::os::raw::c_char,
    pub file: *mut FILE,
    pub extra_data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__PurpleLogCommonLoggerData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleLogCommonLoggerData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleLogSet {
    pub _type: PurpleLogType,
    pub name: *mut ::std::os::raw::c_char,
    pub account: *mut PurpleAccount,
    pub buddy: gboolean,
    pub normalized_name: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct__PurpleLogSet {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleLogSet {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleConversationUiOps {
    pub create_conversation: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                            *mut PurpleConversation)>,
    pub destroy_conversation: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                             *mut PurpleConversation)>,
    pub write_chat: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                   *mut PurpleConversation,
                                                               who:
                                                                   *const ::std::os::raw::c_char,
                                                               message:
                                                                   *const ::std::os::raw::c_char,
                                                               flags:
                                                                   PurpleMessageFlags,
                                                               mtime:
                                                                   time_t)>,
    pub write_im: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                 *mut PurpleConversation,
                                                             who:
                                                                 *const ::std::os::raw::c_char,
                                                             message:
                                                                 *const ::std::os::raw::c_char,
                                                             flags:
                                                                 PurpleMessageFlags,
                                                             mtime: time_t)>,
    pub write_conv: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                   *mut PurpleConversation,
                                                               name:
                                                                   *const ::std::os::raw::c_char,
                                                               alias:
                                                                   *const ::std::os::raw::c_char,
                                                               message:
                                                                   *const ::std::os::raw::c_char,
                                                               flags:
                                                                   PurpleMessageFlags,
                                                               mtime:
                                                                   time_t)>,
    pub chat_add_users: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                       *mut PurpleConversation,
                                                                   cbuddies:
                                                                       *mut GList,
                                                                   new_arrivals:
                                                                       gboolean)>,
    pub chat_rename_user: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                         *mut PurpleConversation,
                                                                     old_name:
                                                                         *const ::std::os::raw::c_char,
                                                                     new_name:
                                                                         *const ::std::os::raw::c_char,
                                                                     new_alias:
                                                                         *const ::std::os::raw::c_char)>,
    pub chat_remove_users: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                          *mut PurpleConversation,
                                                                      users:
                                                                          *mut GList)>,
    pub chat_update_user: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                         *mut PurpleConversation,
                                                                     user:
                                                                         *const ::std::os::raw::c_char)>,
    pub present: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                *mut PurpleConversation)>,
    pub has_focus: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                  *mut PurpleConversation)
                                             -> gboolean>,
    pub custom_smiley_add: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                          *mut PurpleConversation,
                                                                      smile:
                                                                          *const ::std::os::raw::c_char,
                                                                      remote:
                                                                          gboolean)
                                                     -> gboolean>,
    pub custom_smiley_write: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                            *mut PurpleConversation,
                                                                        smile:
                                                                            *const ::std::os::raw::c_char,
                                                                        data:
                                                                            *const guchar,
                                                                        size:
                                                                            gsize)>,
    pub custom_smiley_close: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                            *mut PurpleConversation,
                                                                        smile:
                                                                            *const ::std::os::raw::c_char)>,
    pub send_confirm: ::std::option::Option<unsafe extern "C" fn(conv:
                                                                     *mut PurpleConversation,
                                                                 message:
                                                                     *const ::std::os::raw::c_char)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurpleConversationUiOps {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleConversationUiOps {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleConvIm {
    pub conv: *mut PurpleConversation,
    pub typing_state: PurpleTypingState,
    pub typing_timeout: guint,
    pub type_again: time_t,
    pub send_typed_timeout: guint,
    pub icon: *mut PurpleBuddyIcon,
}
impl ::std::clone::Clone for Struct__PurpleConvIm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleConvIm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleConvChat {
    pub conv: *mut PurpleConversation,
    pub in_room: *mut GList,
    pub ignored: *mut GList,
    pub who: *mut ::std::os::raw::c_char,
    pub topic: *mut ::std::os::raw::c_char,
    pub id: ::std::os::raw::c_int,
    pub nick: *mut ::std::os::raw::c_char,
    pub left: gboolean,
    pub users: *mut GHashTable,
}
impl ::std::clone::Clone for Struct__PurpleConvChat {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleConvChat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleConvChatBuddy {
    pub name: *mut ::std::os::raw::c_char,
    pub alias: *mut ::std::os::raw::c_char,
    pub alias_key: *mut ::std::os::raw::c_char,
    pub buddy: gboolean,
    pub flags: PurpleConvChatBuddyFlags,
    pub attributes: *mut GHashTable,
    pub ui_data: gpointer,
}
impl ::std::clone::Clone for Struct__PurpleConvChatBuddy {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleConvChatBuddy {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleConvMessage {
    pub who: *mut ::std::os::raw::c_char,
    pub what: *mut ::std::os::raw::c_char,
    pub flags: PurpleMessageFlags,
    pub when: time_t,
    pub conv: *mut PurpleConversation,
    pub alias: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct__PurpleConvMessage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleConvMessage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleConversation {
    pub _type: PurpleConversationType,
    pub account: *mut PurpleAccount,
    pub name: *mut ::std::os::raw::c_char,
    pub title: *mut ::std::os::raw::c_char,
    pub logging: gboolean,
    pub logs: *mut GList,
    pub u: Union_Unnamed151,
    pub ui_ops: *mut PurpleConversationUiOps,
    pub ui_data: *mut ::std::os::raw::c_void,
    pub data: *mut GHashTable,
    pub features: PurpleConnectionFlags,
    pub message_history: *mut GList,
}
impl ::std::clone::Clone for Struct__PurpleConversation {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleConversation {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed151 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed151 {
    pub unsafe fn im(&mut self) -> *mut *mut PurpleConvIm {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn chat(&mut self) -> *mut *mut PurpleConvChat {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn misc(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed151 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed151 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleXfer = Struct__PurpleXfer;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed152 {
    PURPLE_XFER_UNKNOWN = 0,
    PURPLE_XFER_SEND = 1,
    PURPLE_XFER_RECEIVE = 2,
}
pub type PurpleXferType = Enum_Unnamed152;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed153 {
    PURPLE_XFER_STATUS_UNKNOWN = 0,
    PURPLE_XFER_STATUS_NOT_STARTED = 1,
    PURPLE_XFER_STATUS_ACCEPTED = 2,
    PURPLE_XFER_STATUS_STARTED = 3,
    PURPLE_XFER_STATUS_DONE = 4,
    PURPLE_XFER_STATUS_CANCEL_LOCAL = 5,
    PURPLE_XFER_STATUS_CANCEL_REMOTE = 6,
}
pub type PurpleXferStatusType = Enum_Unnamed153;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed154 {
    pub new_xfer: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                                 *mut PurpleXfer)>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                                *mut PurpleXfer)>,
    pub add_xfer: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                                 *mut PurpleXfer)>,
    pub update_progress: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                                        *mut PurpleXfer,
                                                                    percent:
                                                                        ::std::os::raw::c_double)>,
    pub cancel_local: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                                     *mut PurpleXfer)>,
    pub cancel_remote: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                                      *mut PurpleXfer)>,
    pub ui_write: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                                 *mut PurpleXfer,
                                                             buffer:
                                                                 *const guchar,
                                                             size: gssize)
                                            -> gssize>,
    pub ui_read: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                                *mut PurpleXfer,
                                                            buffer:
                                                                *mut *mut guchar,
                                                            size: gssize)
                                           -> gssize>,
    pub data_not_sent: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                                      *mut PurpleXfer,
                                                                  buffer:
                                                                      *const guchar,
                                                                  size:
                                                                      gsize)>,
    pub add_thumbnail: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                                      *mut PurpleXfer,
                                                                  formats:
                                                                      *const gchar)>,
}
impl ::std::clone::Clone for Struct_Unnamed154 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed154 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleXferUiOps = Struct_Unnamed154;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleXfer {
    pub _ref: guint,
    pub _type: PurpleXferType,
    pub account: *mut PurpleAccount,
    pub who: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
    pub filename: *mut ::std::os::raw::c_char,
    pub local_filename: *mut ::std::os::raw::c_char,
    pub size: size_t,
    pub dest_fp: *mut FILE,
    pub remote_ip: *mut ::std::os::raw::c_char,
    pub local_port: ::std::os::raw::c_int,
    pub remote_port: ::std::os::raw::c_int,
    pub fd: ::std::os::raw::c_int,
    pub watcher: ::std::os::raw::c_int,
    pub bytes_sent: size_t,
    pub bytes_remaining: size_t,
    pub start_time: time_t,
    pub end_time: time_t,
    pub current_buffer_size: size_t,
    pub status: PurpleXferStatusType,
    pub ops: Struct_Unnamed155,
    pub ui_ops: *mut PurpleXferUiOps,
    pub ui_data: *mut ::std::os::raw::c_void,
    pub data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__PurpleXfer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleXfer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed155 {
    pub init: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                             *mut PurpleXfer)>,
    pub request_denied: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                                       *mut PurpleXfer)>,
    pub start: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                              *mut PurpleXfer)>,
    pub end: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                            *mut PurpleXfer)>,
    pub cancel_send: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                                    *mut PurpleXfer)>,
    pub cancel_recv: ::std::option::Option<unsafe extern "C" fn(xfer:
                                                                    *mut PurpleXfer)>,
    pub read: ::std::option::Option<unsafe extern "C" fn(buffer:
                                                             *mut *mut guchar,
                                                         xfer:
                                                             *mut PurpleXfer)
                                        -> gssize>,
    pub write: ::std::option::Option<unsafe extern "C" fn(buffer:
                                                              *const guchar,
                                                          size: size_t,
                                                          xfer:
                                                              *mut PurpleXfer)
                                         -> gssize>,
    pub ack: ::std::option::Option<unsafe extern "C" fn(xfer: *mut PurpleXfer,
                                                        buffer: *const guchar,
                                                        size: size_t)>,
}
impl ::std::clone::Clone for Struct_Unnamed155 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed155 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed156 {
    PURPLE_MEDIA_CANDIDATE_TYPE_HOST = 0,
    PURPLE_MEDIA_CANDIDATE_TYPE_SRFLX = 1,
    PURPLE_MEDIA_CANDIDATE_TYPE_PRFLX = 2,
    PURPLE_MEDIA_CANDIDATE_TYPE_RELAY = 3,
    PURPLE_MEDIA_CANDIDATE_TYPE_MULTICAST = 4,
}
pub type PurpleMediaCandidateType = Enum_Unnamed156;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed157 {
    PURPLE_MEDIA_CAPS_NONE = 0,
    PURPLE_MEDIA_CAPS_AUDIO = 1,
    PURPLE_MEDIA_CAPS_AUDIO_SINGLE_DIRECTION = 2,
    PURPLE_MEDIA_CAPS_VIDEO = 4,
    PURPLE_MEDIA_CAPS_VIDEO_SINGLE_DIRECTION = 8,
    PURPLE_MEDIA_CAPS_AUDIO_VIDEO = 16,
    PURPLE_MEDIA_CAPS_MODIFY_SESSION = 32,
    PURPLE_MEDIA_CAPS_CHANGE_DIRECTION = 64,
}
pub type PurpleMediaCaps = Enum_Unnamed157;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed158 {
    PURPLE_MEDIA_COMPONENT_NONE = 0,
    PURPLE_MEDIA_COMPONENT_RTP = 1,
    PURPLE_MEDIA_COMPONENT_RTCP = 2,
}
pub type PurpleMediaComponentType = Enum_Unnamed158;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed159 {
    PURPLE_MEDIA_INFO_HANGUP = 0,
    PURPLE_MEDIA_INFO_ACCEPT = 1,
    PURPLE_MEDIA_INFO_REJECT = 2,
    PURPLE_MEDIA_INFO_MUTE = 3,
    PURPLE_MEDIA_INFO_UNMUTE = 4,
    PURPLE_MEDIA_INFO_PAUSE = 5,
    PURPLE_MEDIA_INFO_UNPAUSE = 6,
    PURPLE_MEDIA_INFO_HOLD = 7,
    PURPLE_MEDIA_INFO_UNHOLD = 8,
}
pub type PurpleMediaInfoType = Enum_Unnamed159;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed160 {
    PURPLE_MEDIA_NETWORK_PROTOCOL_UDP = 0,
    PURPLE_MEDIA_NETWORK_PROTOCOL_TCP_PASSIVE = 1,
    PURPLE_MEDIA_NETWORK_PROTOCOL_TCP_ACTIVE = 2,
    PURPLE_MEDIA_NETWORK_PROTOCOL_TCP_SO = 3,
}
pub type PurpleMediaNetworkProtocol = Enum_Unnamed160;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed161 {
    PURPLE_MEDIA_NONE = 0,
    PURPLE_MEDIA_RECV_AUDIO = 1,
    PURPLE_MEDIA_SEND_AUDIO = 2,
    PURPLE_MEDIA_RECV_VIDEO = 4,
    PURPLE_MEDIA_SEND_VIDEO = 8,
    PURPLE_MEDIA_RECV_APPLICATION = 16,
    PURPLE_MEDIA_SEND_APPLICATION = 32,
    PURPLE_MEDIA_AUDIO = 3,
    PURPLE_MEDIA_VIDEO = 12,
    PURPLE_MEDIA_APPLICATION = 48,
}
pub type PurpleMediaSessionType = Enum_Unnamed161;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed162 {
    PURPLE_MEDIA_STATE_NEW = 0,
    PURPLE_MEDIA_STATE_CONNECTED = 1,
    PURPLE_MEDIA_STATE_END = 2,
}
pub type PurpleMediaState = Enum_Unnamed162;
pub enum Struct__PurpleMediaCandidate { }
pub type PurpleMediaCandidate = Struct__PurpleMediaCandidate;
pub enum Struct__PurpleMediaCodec { }
pub type PurpleMediaCodec = Struct__PurpleMediaCodec;
pub enum Struct__PurpleUtilFetchUrlData { }
pub type PurpleUtilFetchUrlData = Struct__PurpleUtilFetchUrlData;
pub type PurpleMenuAction = Struct__PurpleMenuAction;
pub type PurpleKeyValuePair = Struct__PurpleKeyValuePair;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__XMLNodeType {
    XMLNODE_TYPE_TAG = 0,
    XMLNODE_TYPE_ATTRIB = 1,
    XMLNODE_TYPE_DATA = 2,
}
pub type XMLNodeType = Enum__XMLNodeType;
pub type xmlnode = Struct__xmlnode;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xmlnode {
    pub name: *mut ::std::os::raw::c_char,
    pub xmlns: *mut ::std::os::raw::c_char,
    pub _type: XMLNodeType,
    pub data: *mut ::std::os::raw::c_char,
    pub data_sz: size_t,
    pub parent: *mut xmlnode,
    pub child: *mut xmlnode,
    pub lastchild: *mut xmlnode,
    pub next: *mut xmlnode,
    pub prefix: *mut ::std::os::raw::c_char,
    pub namespace_map: *mut GHashTable,
}
impl ::std::clone::Clone for Struct__xmlnode {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__xmlnode {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed163 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed164 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_wait {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed163 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed163 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed163 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed164 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed164 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed164 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed165 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed165 {
    pub unsafe fn __uptr(&mut self) -> *mut *mut Union_wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed165 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed165 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __WAIT_STATUS = Union_Unnamed165;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed166 {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed166 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed166 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed166;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed167 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed167 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed167 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed167;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed168 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed168 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed168 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed168;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::clone::Clone for Struct_random_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
impl ::std::clone::Clone for Struct_drand48_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub enum Struct__PurpleNotifyUserInfoEntry { }
pub type PurpleNotifyUserInfoEntry = Struct__PurpleNotifyUserInfoEntry;
pub enum Struct__PurpleNotifyUserInfo { }
pub type PurpleNotifyUserInfo = Struct__PurpleNotifyUserInfo;
pub type PurpleNotifyCloseCallback =
    ::std::option::Option<extern "C" fn(user_data: gpointer)>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed169 {
    PURPLE_NOTIFY_MESSAGE = 0,
    PURPLE_NOTIFY_EMAIL = 1,
    PURPLE_NOTIFY_EMAILS = 2,
    PURPLE_NOTIFY_FORMATTED = 3,
    PURPLE_NOTIFY_SEARCHRESULTS = 4,
    PURPLE_NOTIFY_USERINFO = 5,
    PURPLE_NOTIFY_URI = 6,
}
pub type PurpleNotifyType = Enum_Unnamed169;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed170 {
    PURPLE_NOTIFY_MSG_ERROR = 0,
    PURPLE_NOTIFY_MSG_WARNING = 1,
    PURPLE_NOTIFY_MSG_INFO = 2,
}
pub type PurpleNotifyMsgType = Enum_Unnamed170;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed171 {
    PURPLE_NOTIFY_BUTTON_LABELED = 0,
    PURPLE_NOTIFY_BUTTON_CONTINUE = 1,
    PURPLE_NOTIFY_BUTTON_ADD = 2,
    PURPLE_NOTIFY_BUTTON_INFO = 3,
    PURPLE_NOTIFY_BUTTON_IM = 4,
    PURPLE_NOTIFY_BUTTON_JOIN = 5,
    PURPLE_NOTIFY_BUTTON_INVITE = 6,
}
pub type PurpleNotifySearchButtonType = Enum_Unnamed171;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed172 {
    pub columns: *mut GList,
    pub rows: *mut GList,
    pub buttons: *mut GList,
}
impl ::std::clone::Clone for Struct_Unnamed172 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed172 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleNotifySearchResults = Struct_Unnamed172;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed173 {
    PURPLE_NOTIFY_USER_INFO_ENTRY_PAIR = 0,
    PURPLE_NOTIFY_USER_INFO_ENTRY_SECTION_BREAK = 1,
    PURPLE_NOTIFY_USER_INFO_ENTRY_SECTION_HEADER = 2,
}
pub type PurpleNotifyUserInfoEntryType = Enum_Unnamed173;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed174 {
    pub title: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed174 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed174 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleNotifySearchColumn = Struct_Unnamed174;
pub type PurpleNotifySearchResultsCallback =
    ::std::option::Option<unsafe extern "C" fn(c: *mut PurpleConnection,
                                               row: *mut GList,
                                               user_data: gpointer)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed175 {
    pub _type: PurpleNotifySearchButtonType,
    pub callback: PurpleNotifySearchResultsCallback,
    pub label: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed175 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed175 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleNotifySearchButton = Struct_Unnamed175;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed176 {
    pub notify_message: ::std::option::Option<unsafe extern "C" fn(_type:
                                                                       PurpleNotifyMsgType,
                                                                   title:
                                                                       *const ::std::os::raw::c_char,
                                                                   primary:
                                                                       *const ::std::os::raw::c_char,
                                                                   secondary:
                                                                       *const ::std::os::raw::c_char)
                                                  ->
                                                      *mut ::std::os::raw::c_void>,
    pub notify_email: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                     *mut PurpleConnection,
                                                                 subject:
                                                                     *const ::std::os::raw::c_char,
                                                                 from:
                                                                     *const ::std::os::raw::c_char,
                                                                 to:
                                                                     *const ::std::os::raw::c_char,
                                                                 url:
                                                                     *const ::std::os::raw::c_char)
                                                ->
                                                    *mut ::std::os::raw::c_void>,
    pub notify_emails: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                      *mut PurpleConnection,
                                                                  count:
                                                                      size_t,
                                                                  detailed:
                                                                      gboolean,
                                                                  subjects:
                                                                      *mut *const ::std::os::raw::c_char,
                                                                  froms:
                                                                      *mut *const ::std::os::raw::c_char,
                                                                  tos:
                                                                      *mut *const ::std::os::raw::c_char,
                                                                  urls:
                                                                      *mut *const ::std::os::raw::c_char)
                                                 ->
                                                     *mut ::std::os::raw::c_void>,
    pub notify_formatted: ::std::option::Option<unsafe extern "C" fn(title:
                                                                         *const ::std::os::raw::c_char,
                                                                     primary:
                                                                         *const ::std::os::raw::c_char,
                                                                     secondary:
                                                                         *const ::std::os::raw::c_char,
                                                                     text:
                                                                         *const ::std::os::raw::c_char)
                                                    ->
                                                        *mut ::std::os::raw::c_void>,
    pub notify_searchresults: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                             *mut PurpleConnection,
                                                                         title:
                                                                             *const ::std::os::raw::c_char,
                                                                         primary:
                                                                             *const ::std::os::raw::c_char,
                                                                         secondary:
                                                                             *const ::std::os::raw::c_char,
                                                                         results:
                                                                             *mut PurpleNotifySearchResults,
                                                                         user_data:
                                                                             gpointer)
                                                        ->
                                                            *mut ::std::os::raw::c_void>,
    pub notify_searchresults_new_rows: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                                      *mut PurpleConnection,
                                                                                  results:
                                                                                      *mut PurpleNotifySearchResults,
                                                                                  data:
                                                                                      *mut ::std::os::raw::c_void)>,
    pub notify_userinfo: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                        *mut PurpleConnection,
                                                                    who:
                                                                        *const ::std::os::raw::c_char,
                                                                    user_info:
                                                                        *mut PurpleNotifyUserInfo)
                                                   ->
                                                       *mut ::std::os::raw::c_void>,
    pub notify_uri: ::std::option::Option<unsafe extern "C" fn(uri:
                                                                   *const ::std::os::raw::c_char)
                                              -> *mut ::std::os::raw::c_void>,
    pub close_notify: ::std::option::Option<unsafe extern "C" fn(_type:
                                                                     PurpleNotifyType,
                                                                 ui_handle:
                                                                     *mut ::std::os::raw::c_void)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_Unnamed176 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed176 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleNotifyUiOps = Struct_Unnamed176;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleMenuAction {
    pub label: *mut ::std::os::raw::c_char,
    pub callback: PurpleCallback,
    pub data: gpointer,
    pub children: *mut GList,
}
impl ::std::clone::Clone for Struct__PurpleMenuAction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleMenuAction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleInfoFieldFormatCallback =
    ::std::option::Option<unsafe extern "C" fn(field:
                                                   *const ::std::os::raw::c_char,
                                               len: size_t)
                              -> *mut ::std::os::raw::c_char>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleKeyValuePair {
    pub key: *mut gchar,
    pub value: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__PurpleKeyValuePair {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleKeyValuePair {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleUtilFetchUrlCallback =
    ::std::option::Option<unsafe extern "C" fn(url_data:
                                                   *mut PurpleUtilFetchUrlData,
                                               user_data: gpointer,
                                               url_text: *const gchar,
                                               len: gsize,
                                               error_message: *const gchar)>;
pub enum Struct__PurpleMedia { }
pub type PurpleMedia = Struct__PurpleMedia;
pub enum Struct__PurpleMediaManager { }
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed177 { PURPLE_INPUT_READ = 1, PURPLE_INPUT_WRITE = 2, }
pub type PurpleInputCondition = Enum_Unnamed177;
pub type PurpleInputFunction =
    ::std::option::Option<extern "C" fn(arg1: gpointer, arg2: gint,
                                        arg3: PurpleInputCondition)>;
pub type PurpleEventLoopUiOps = Struct__PurpleEventLoopUiOps;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleEventLoopUiOps {
    pub timeout_add: ::std::option::Option<extern "C" fn(interval: guint,
                                                         function:
                                                             GSourceFunc,
                                                         data: gpointer)
                                               -> guint>,
    pub timeout_remove: ::std::option::Option<extern "C" fn(handle: guint)
                                                  -> gboolean>,
    pub input_add: ::std::option::Option<extern "C" fn(fd:
                                                           ::std::os::raw::c_int,
                                                       cond:
                                                           PurpleInputCondition,
                                                       func:
                                                           PurpleInputFunction,
                                                       user_data: gpointer)
                                             -> guint>,
    pub input_remove: ::std::option::Option<extern "C" fn(handle: guint)
                                                -> gboolean>,
    pub input_get_error: ::std::option::Option<unsafe extern "C" fn(fd:
                                                                        ::std::os::raw::c_int,
                                                                    error:
                                                                        *mut ::std::os::raw::c_int)
                                                   -> ::std::os::raw::c_int>,
    pub timeout_add_seconds: ::std::option::Option<extern "C" fn(interval:
                                                                     guint,
                                                                 function:
                                                                     GSourceFunc,
                                                                 data:
                                                                     gpointer)
                                                       -> guint>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurpleEventLoopUiOps {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleEventLoopUiOps {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_Unnamed178 {
    PURPLE_PROXY_USE_GLOBAL = -1,
    PURPLE_PROXY_NONE = 0,
    PURPLE_PROXY_HTTP = 1,
    PURPLE_PROXY_SOCKS4 = 2,
    PURPLE_PROXY_SOCKS5 = 3,
    PURPLE_PROXY_USE_ENVVAR = 4,
    PURPLE_PROXY_TOR = 5,
}
pub type PurpleProxyType = Enum_Unnamed178;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed179 {
    pub _type: PurpleProxyType,
    pub host: *mut ::std::os::raw::c_char,
    pub port: ::std::os::raw::c_int,
    pub username: *mut ::std::os::raw::c_char,
    pub password: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed179 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed179 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleProxyInfo = Struct_Unnamed179;
pub enum Struct__PurpleProxyConnectData { }
pub type PurpleProxyConnectData = Struct__PurpleProxyConnectData;
pub type PurpleProxyConnectFunction =
    ::std::option::Option<unsafe extern "C" fn(data: gpointer, source: gint,
                                               error_message: *const gchar)>;
pub type PurpleRoomlist = Struct__PurpleRoomlist;
pub type PurpleRoomlistRoom = Struct__PurpleRoomlistRoom;
pub type PurpleRoomlistField = Struct__PurpleRoomlistField;
pub type PurpleRoomlistUiOps = Struct__PurpleRoomlistUiOps;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed180 {
    PURPLE_ROOMLIST_ROOMTYPE_CATEGORY = 1,
    PURPLE_ROOMLIST_ROOMTYPE_ROOM = 2,
}
pub type PurpleRoomlistRoomType = Enum_Unnamed180;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed181 {
    PURPLE_ROOMLIST_FIELD_BOOL = 0,
    PURPLE_ROOMLIST_FIELD_INT = 1,
    PURPLE_ROOMLIST_FIELD_STRING = 2,
}
pub type PurpleRoomlistFieldType = Enum_Unnamed181;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleRoomlist {
    pub account: *mut PurpleAccount,
    pub fields: *mut GList,
    pub rooms: *mut GList,
    pub in_progress: gboolean,
    pub ui_data: gpointer,
    pub proto_data: gpointer,
    pub _ref: guint,
}
impl ::std::clone::Clone for Struct__PurpleRoomlist {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleRoomlist {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleRoomlistRoom {
    pub _type: PurpleRoomlistRoomType,
    pub name: *mut gchar,
    pub fields: *mut GList,
    pub parent: *mut PurpleRoomlistRoom,
    pub expanded_once: gboolean,
}
impl ::std::clone::Clone for Struct__PurpleRoomlistRoom {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleRoomlistRoom {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleRoomlistField {
    pub _type: PurpleRoomlistFieldType,
    pub label: *mut gchar,
    pub name: *mut gchar,
    pub hidden: gboolean,
}
impl ::std::clone::Clone for Struct__PurpleRoomlistField {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleRoomlistField {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleRoomlistUiOps {
    pub show_with_account: ::std::option::Option<unsafe extern "C" fn(account:
                                                                          *mut PurpleAccount)>,
    pub create: ::std::option::Option<unsafe extern "C" fn(list:
                                                               *mut PurpleRoomlist)>,
    pub set_fields: ::std::option::Option<unsafe extern "C" fn(list:
                                                                   *mut PurpleRoomlist,
                                                               fields:
                                                                   *mut GList)>,
    pub add_room: ::std::option::Option<unsafe extern "C" fn(list:
                                                                 *mut PurpleRoomlist,
                                                             room:
                                                                 *mut PurpleRoomlistRoom)>,
    pub in_progress: ::std::option::Option<unsafe extern "C" fn(list:
                                                                    *mut PurpleRoomlist,
                                                                flag:
                                                                    gboolean)>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(list:
                                                                *mut PurpleRoomlist)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurpleRoomlistUiOps {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleRoomlistUiOps {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleWhiteboardPrplOps = Struct__PurpleWhiteboardPrplOps;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleWhiteboard {
    pub state: ::std::os::raw::c_int,
    pub account: *mut PurpleAccount,
    pub who: *mut ::std::os::raw::c_char,
    pub ui_data: *mut ::std::os::raw::c_void,
    pub proto_data: *mut ::std::os::raw::c_void,
    pub prpl_ops: *mut PurpleWhiteboardPrplOps,
    pub draw_list: *mut GList,
}
impl ::std::clone::Clone for Struct__PurpleWhiteboard {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleWhiteboard {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleWhiteboard = Struct__PurpleWhiteboard;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleWhiteboardUiOps {
    pub create: ::std::option::Option<unsafe extern "C" fn(wb:
                                                               *mut PurpleWhiteboard)>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(wb:
                                                                *mut PurpleWhiteboard)>,
    pub set_dimensions: ::std::option::Option<unsafe extern "C" fn(wb:
                                                                       *mut PurpleWhiteboard,
                                                                   width:
                                                                       ::std::os::raw::c_int,
                                                                   height:
                                                                       ::std::os::raw::c_int)>,
    pub set_brush: ::std::option::Option<unsafe extern "C" fn(wb:
                                                                  *mut PurpleWhiteboard,
                                                              size:
                                                                  ::std::os::raw::c_int,
                                                              color:
                                                                  ::std::os::raw::c_int)>,
    pub draw_point: ::std::option::Option<unsafe extern "C" fn(wb:
                                                                   *mut PurpleWhiteboard,
                                                               x:
                                                                   ::std::os::raw::c_int,
                                                               y:
                                                                   ::std::os::raw::c_int,
                                                               color:
                                                                   ::std::os::raw::c_int,
                                                               size:
                                                                   ::std::os::raw::c_int)>,
    pub draw_line: ::std::option::Option<unsafe extern "C" fn(wb:
                                                                  *mut PurpleWhiteboard,
                                                              x1:
                                                                  ::std::os::raw::c_int,
                                                              y1:
                                                                  ::std::os::raw::c_int,
                                                              x2:
                                                                  ::std::os::raw::c_int,
                                                              y2:
                                                                  ::std::os::raw::c_int,
                                                              color:
                                                                  ::std::os::raw::c_int,
                                                              size:
                                                                  ::std::os::raw::c_int)>,
    pub clear: ::std::option::Option<unsafe extern "C" fn(wb:
                                                              *mut PurpleWhiteboard)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurpleWhiteboardUiOps {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleWhiteboardUiOps {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleWhiteboardUiOps = Struct__PurpleWhiteboardUiOps;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleWhiteboardPrplOps {
    pub start: ::std::option::Option<unsafe extern "C" fn(wb:
                                                              *mut PurpleWhiteboard)>,
    pub end: ::std::option::Option<unsafe extern "C" fn(wb:
                                                            *mut PurpleWhiteboard)>,
    pub get_dimensions: ::std::option::Option<unsafe extern "C" fn(wb:
                                                                       *const PurpleWhiteboard,
                                                                   width:
                                                                       *mut ::std::os::raw::c_int,
                                                                   height:
                                                                       *mut ::std::os::raw::c_int)>,
    pub set_dimensions: ::std::option::Option<unsafe extern "C" fn(wb:
                                                                       *mut PurpleWhiteboard,
                                                                   width:
                                                                       ::std::os::raw::c_int,
                                                                   height:
                                                                       ::std::os::raw::c_int)>,
    pub get_brush: ::std::option::Option<unsafe extern "C" fn(wb:
                                                                  *const PurpleWhiteboard,
                                                              size:
                                                                  *mut ::std::os::raw::c_int,
                                                              color:
                                                                  *mut ::std::os::raw::c_int)>,
    pub set_brush: ::std::option::Option<unsafe extern "C" fn(wb:
                                                                  *mut PurpleWhiteboard,
                                                              size:
                                                                  ::std::os::raw::c_int,
                                                              color:
                                                                  ::std::os::raw::c_int)>,
    pub send_draw_list: ::std::option::Option<unsafe extern "C" fn(wb:
                                                                       *mut PurpleWhiteboard,
                                                                   draw_list:
                                                                       *mut GList)>,
    pub clear: ::std::option::Option<unsafe extern "C" fn(wb:
                                                              *mut PurpleWhiteboard)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurpleWhiteboardPrplOps {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleWhiteboardPrplOps {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleBuddyIconSpec {
    pub format: *mut ::std::os::raw::c_char,
    pub min_width: ::std::os::raw::c_int,
    pub min_height: ::std::os::raw::c_int,
    pub max_width: ::std::os::raw::c_int,
    pub max_height: ::std::os::raw::c_int,
    pub max_filesize: size_t,
    pub scale_rules: PurpleIconScaleRules,
}
impl ::std::clone::Clone for Struct__PurpleBuddyIconSpec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleBuddyIconSpec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_proto_chat_entry {
    pub label: *const ::std::os::raw::c_char,
    pub identifier: *const ::std::os::raw::c_char,
    pub required: gboolean,
    pub is_int: gboolean,
    pub min: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub secret: gboolean,
}
impl ::std::clone::Clone for Struct_proto_chat_entry {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_proto_chat_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleAttentionType {
    pub name: *const ::std::os::raw::c_char,
    pub incoming_description: *const ::std::os::raw::c_char,
    pub outgoing_description: *const ::std::os::raw::c_char,
    pub icon_name: *const ::std::os::raw::c_char,
    pub unlocalized_name: *const ::std::os::raw::c_char,
    pub _reserved2: gpointer,
    pub _reserved3: gpointer,
    pub _reserved4: gpointer,
}
impl ::std::clone::Clone for Struct__PurpleAttentionType {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleAttentionType {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed182 {
    OPT_PROTO_UNIQUE_CHATNAME = 4,
    OPT_PROTO_CHAT_TOPIC = 8,
    OPT_PROTO_NO_PASSWORD = 16,
    OPT_PROTO_MAIL_CHECK = 32,
    OPT_PROTO_IM_IMAGE = 64,
    OPT_PROTO_PASSWORD_OPTIONAL = 128,
    OPT_PROTO_USE_POINTSIZE = 256,
    OPT_PROTO_REGISTER_NOSCREENNAME = 512,
    OPT_PROTO_SLASH_COMMANDS_NATIVE = 1024,
    OPT_PROTO_INVITE_MESSAGE = 2048,
}
pub type PurpleProtocolOptions = Enum_Unnamed182;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurplePluginProtocolInfo {
    pub options: PurpleProtocolOptions,
    pub user_splits: *mut GList,
    pub protocol_options: *mut GList,
    pub icon_spec: PurpleBuddyIconSpec,
    pub list_icon: ::std::option::Option<unsafe extern "C" fn(account:
                                                                  *mut PurpleAccount,
                                                              buddy:
                                                                  *mut PurpleBuddy)
                                             ->
                                                 *const ::std::os::raw::c_char>,
    pub list_emblem: ::std::option::Option<unsafe extern "C" fn(buddy:
                                                                    *mut PurpleBuddy)
                                               ->
                                                   *const ::std::os::raw::c_char>,
    pub status_text: ::std::option::Option<unsafe extern "C" fn(buddy:
                                                                    *mut PurpleBuddy)
                                               ->
                                                   *mut ::std::os::raw::c_char>,
    pub tooltip_text: ::std::option::Option<unsafe extern "C" fn(buddy:
                                                                     *mut PurpleBuddy,
                                                                 user_info:
                                                                     *mut PurpleNotifyUserInfo,
                                                                 full:
                                                                     gboolean)>,
    pub status_types: ::std::option::Option<unsafe extern "C" fn(account:
                                                                     *mut PurpleAccount)
                                                -> *mut GList>,
    pub blist_node_menu: ::std::option::Option<unsafe extern "C" fn(node:
                                                                        *mut PurpleBlistNode)
                                                   -> *mut GList>,
    pub chat_info: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut PurpleConnection)
                                             -> *mut GList>,
    pub chat_info_defaults: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                           *mut PurpleConnection,
                                                                       chat_name:
                                                                           *const ::std::os::raw::c_char)
                                                      -> *mut GHashTable>,
    pub login: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut PurpleAccount)>,
    pub close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut PurpleConnection)>,
    pub send_im: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                *mut PurpleConnection,
                                                            who:
                                                                *const ::std::os::raw::c_char,
                                                            message:
                                                                *const ::std::os::raw::c_char,
                                                            flags:
                                                                PurpleMessageFlags)
                                           -> ::std::os::raw::c_int>,
    pub set_info: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut PurpleConnection,
                                                             info:
                                                                 *const ::std::os::raw::c_char)>,
    pub send_typing: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut PurpleConnection,
                                                                name:
                                                                    *const ::std::os::raw::c_char,
                                                                state:
                                                                    PurpleTypingState)
                                               -> ::std::os::raw::c_uint>,
    pub get_info: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut PurpleConnection,
                                                             who:
                                                                 *const ::std::os::raw::c_char)>,
    pub set_status: ::std::option::Option<unsafe extern "C" fn(account:
                                                                   *mut PurpleAccount,
                                                               status:
                                                                   *mut PurpleStatus)>,
    pub set_idle: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut PurpleConnection,
                                                             idletime:
                                                                 ::std::os::raw::c_int)>,
    pub change_passwd: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut PurpleConnection,
                                                                  old_pass:
                                                                      *const ::std::os::raw::c_char,
                                                                  new_pass:
                                                                      *const ::std::os::raw::c_char)>,
    pub add_buddy: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut PurpleConnection,
                                                              buddy:
                                                                  *mut PurpleBuddy,
                                                              group:
                                                                  *mut PurpleGroup)>,
    pub add_buddies: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut PurpleConnection,
                                                                buddies:
                                                                    *mut GList,
                                                                groups:
                                                                    *mut GList)>,
    pub remove_buddy: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut PurpleConnection,
                                                                 buddy:
                                                                     *mut PurpleBuddy,
                                                                 group:
                                                                     *mut PurpleGroup)>,
    pub remove_buddies: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut PurpleConnection,
                                                                   buddies:
                                                                       *mut GList,
                                                                   groups:
                                                                       *mut GList)>,
    pub add_permit: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut PurpleConnection,
                                                               name:
                                                                   *const ::std::os::raw::c_char)>,
    pub add_deny: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut PurpleConnection,
                                                             name:
                                                                 *const ::std::os::raw::c_char)>,
    pub rem_permit: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut PurpleConnection,
                                                               name:
                                                                   *const ::std::os::raw::c_char)>,
    pub rem_deny: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut PurpleConnection,
                                                             name:
                                                                 *const ::std::os::raw::c_char)>,
    pub set_permit_deny: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut PurpleConnection)>,
    pub join_chat: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut PurpleConnection,
                                                              components:
                                                                  *mut GHashTable)>,
    pub reject_chat: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut PurpleConnection,
                                                                components:
                                                                    *mut GHashTable)>,
    pub get_chat_name: ::std::option::Option<unsafe extern "C" fn(components:
                                                                      *mut GHashTable)
                                                 ->
                                                     *mut ::std::os::raw::c_char>,
    pub chat_invite: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut PurpleConnection,
                                                                id:
                                                                    ::std::os::raw::c_int,
                                                                message:
                                                                    *const ::std::os::raw::c_char,
                                                                who:
                                                                    *const ::std::os::raw::c_char)>,
    pub chat_leave: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut PurpleConnection,
                                                               id:
                                                                   ::std::os::raw::c_int)>,
    pub chat_whisper: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut PurpleConnection,
                                                                 id:
                                                                     ::std::os::raw::c_int,
                                                                 who:
                                                                     *const ::std::os::raw::c_char,
                                                                 message:
                                                                     *const ::std::os::raw::c_char)>,
    pub chat_send: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut PurpleConnection,
                                                              id:
                                                                  ::std::os::raw::c_int,
                                                              message:
                                                                  *const ::std::os::raw::c_char,
                                                              flags:
                                                                  PurpleMessageFlags)
                                             -> ::std::os::raw::c_int>,
    pub keepalive: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut PurpleConnection)>,
    pub register_user: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut PurpleAccount)>,
    pub get_cb_info: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut PurpleConnection,
                                                                arg2:
                                                                    ::std::os::raw::c_int,
                                                                who:
                                                                    *const ::std::os::raw::c_char)>,
    pub get_cb_away: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut PurpleConnection,
                                                                arg2:
                                                                    ::std::os::raw::c_int,
                                                                who:
                                                                    *const ::std::os::raw::c_char)>,
    pub alias_buddy: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut PurpleConnection,
                                                                who:
                                                                    *const ::std::os::raw::c_char,
                                                                alias:
                                                                    *const ::std::os::raw::c_char)>,
    pub group_buddy: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *mut PurpleConnection,
                                                                who:
                                                                    *const ::std::os::raw::c_char,
                                                                old_group:
                                                                    *const ::std::os::raw::c_char,
                                                                new_group:
                                                                    *const ::std::os::raw::c_char)>,
    pub rename_group: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut PurpleConnection,
                                                                 old_name:
                                                                     *const ::std::os::raw::c_char,
                                                                 group:
                                                                     *mut PurpleGroup,
                                                                 moved_buddies:
                                                                     *mut GList)>,
    pub buddy_free: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut PurpleBuddy)>,
    pub convo_closed: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *mut PurpleConnection,
                                                                 who:
                                                                     *const ::std::os::raw::c_char)>,
    pub normalize: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *const PurpleAccount,
                                                              who:
                                                                  *const ::std::os::raw::c_char)
                                             ->
                                                 *const ::std::os::raw::c_char>,
    pub set_buddy_icon: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut PurpleConnection,
                                                                   img:
                                                                       *mut PurpleStoredImage)>,
    pub remove_group: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                     *mut PurpleConnection,
                                                                 group:
                                                                     *mut PurpleGroup)>,
    pub get_cb_real_name: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                         *mut PurpleConnection,
                                                                     id:
                                                                         ::std::os::raw::c_int,
                                                                     who:
                                                                         *const ::std::os::raw::c_char)
                                                    ->
                                                        *mut ::std::os::raw::c_char>,
    pub set_chat_topic: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                       *mut PurpleConnection,
                                                                   id:
                                                                       ::std::os::raw::c_int,
                                                                   topic:
                                                                       *const ::std::os::raw::c_char)>,
    pub find_blist_chat: ::std::option::Option<unsafe extern "C" fn(account:
                                                                        *mut PurpleAccount,
                                                                    name:
                                                                        *const ::std::os::raw::c_char)
                                                   -> *mut PurpleChat>,
    pub roomlist_get_list: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                          *mut PurpleConnection)
                                                     -> *mut PurpleRoomlist>,
    pub roomlist_cancel: ::std::option::Option<unsafe extern "C" fn(list:
                                                                        *mut PurpleRoomlist)>,
    pub roomlist_expand_category: ::std::option::Option<unsafe extern "C" fn(list:
                                                                                 *mut PurpleRoomlist,
                                                                             category:
                                                                                 *mut PurpleRoomlistRoom)>,
    pub can_receive_file: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut PurpleConnection,
                                                                     who:
                                                                         *const ::std::os::raw::c_char)
                                                    -> gboolean>,
    pub send_file: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut PurpleConnection,
                                                              who:
                                                                  *const ::std::os::raw::c_char,
                                                              filename:
                                                                  *const ::std::os::raw::c_char)>,
    pub new_xfer: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut PurpleConnection,
                                                             who:
                                                                 *const ::std::os::raw::c_char)
                                            -> *mut PurpleXfer>,
    pub offline_message: ::std::option::Option<unsafe extern "C" fn(buddy:
                                                                        *const PurpleBuddy)
                                                   -> gboolean>,
    pub whiteboard_prpl_ops: *mut PurpleWhiteboardPrplOps,
    pub send_raw: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                 *mut PurpleConnection,
                                                             buf:
                                                                 *const ::std::os::raw::c_char,
                                                             len:
                                                                 ::std::os::raw::c_int)
                                            -> ::std::os::raw::c_int>,
    pub roomlist_room_serialize: ::std::option::Option<unsafe extern "C" fn(room:
                                                                                *mut PurpleRoomlistRoom)
                                                           ->
                                                               *mut ::std::os::raw::c_char>,
    pub unregister_user: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut PurpleAccount,
                                                                    cb:
                                                                        PurpleAccountUnregistrationCb,
                                                                    user_data:
                                                                        *mut ::std::os::raw::c_void)>,
    pub send_attention: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                       *mut PurpleConnection,
                                                                   username:
                                                                       *const ::std::os::raw::c_char,
                                                                   _type:
                                                                       guint)
                                                  -> gboolean>,
    pub get_attention_types: ::std::option::Option<unsafe extern "C" fn(acct:
                                                                            *mut PurpleAccount)
                                                       -> *mut GList>,
    pub struct_size: ::std::os::raw::c_ulong,
    pub get_account_text_table: ::std::option::Option<unsafe extern "C" fn(account:
                                                                               *mut PurpleAccount)
                                                          -> *mut GHashTable>,
    pub initiate_media: ::std::option::Option<unsafe extern "C" fn(account:
                                                                       *mut PurpleAccount,
                                                                   who:
                                                                       *const ::std::os::raw::c_char,
                                                                   _type:
                                                                       PurpleMediaSessionType)
                                                  -> gboolean>,
    pub get_media_caps: ::std::option::Option<unsafe extern "C" fn(account:
                                                                       *mut PurpleAccount,
                                                                   who:
                                                                       *const ::std::os::raw::c_char)
                                                  -> PurpleMediaCaps>,
    pub get_moods: ::std::option::Option<unsafe extern "C" fn(account:
                                                                  *mut PurpleAccount)
                                             -> *mut PurpleMood>,
    pub set_public_alias: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                         *mut PurpleConnection,
                                                                     alias:
                                                                         *const ::std::os::raw::c_char,
                                                                     success_cb:
                                                                         PurpleSetPublicAliasSuccessCallback,
                                                                     failure_cb:
                                                                         PurpleSetPublicAliasFailureCallback)>,
    pub get_public_alias: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                         *mut PurpleConnection,
                                                                     success_cb:
                                                                         PurpleGetPublicAliasSuccessCallback,
                                                                     failure_cb:
                                                                         PurpleGetPublicAliasFailureCallback)>,
    pub add_buddy_with_invite: ::std::option::Option<unsafe extern "C" fn(pc:
                                                                              *mut PurpleConnection,
                                                                          buddy:
                                                                              *mut PurpleBuddy,
                                                                          group:
                                                                              *mut PurpleGroup,
                                                                          message:
                                                                              *const ::std::os::raw::c_char)>,
    pub add_buddies_with_invite: ::std::option::Option<unsafe extern "C" fn(pc:
                                                                                *mut PurpleConnection,
                                                                            buddies:
                                                                                *mut GList,
                                                                            groups:
                                                                                *mut GList,
                                                                            message:
                                                                                *const ::std::os::raw::c_char)>,
}
impl ::std::clone::Clone for Struct__PurplePluginProtocolInfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurplePluginProtocolInfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleBlistNode {
    pub _type: PurpleBlistNodeType,
    pub prev: *mut PurpleBlistNode,
    pub next: *mut PurpleBlistNode,
    pub parent: *mut PurpleBlistNode,
    pub child: *mut PurpleBlistNode,
    pub settings: *mut GHashTable,
    pub ui_data: *mut ::std::os::raw::c_void,
    pub flags: PurpleBlistNodeFlags,
}
impl ::std::clone::Clone for Struct__PurpleBlistNode {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleBlistNode {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleBuddy {
    pub node: PurpleBlistNode,
    pub name: *mut ::std::os::raw::c_char,
    pub alias: *mut ::std::os::raw::c_char,
    pub server_alias: *mut ::std::os::raw::c_char,
    pub proto_data: *mut ::std::os::raw::c_void,
    pub icon: *mut PurpleBuddyIcon,
    pub account: *mut PurpleAccount,
    pub presence: *mut PurplePresence,
    pub media_caps: PurpleMediaCaps,
}
impl ::std::clone::Clone for Struct__PurpleBuddy {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleBuddy {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleContact {
    pub node: PurpleBlistNode,
    pub alias: *mut ::std::os::raw::c_char,
    pub totalsize: ::std::os::raw::c_int,
    pub currentsize: ::std::os::raw::c_int,
    pub online: ::std::os::raw::c_int,
    pub priority: *mut PurpleBuddy,
    pub priority_valid: gboolean,
}
impl ::std::clone::Clone for Struct__PurpleContact {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleContact {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleGroup {
    pub node: PurpleBlistNode,
    pub name: *mut ::std::os::raw::c_char,
    pub totalsize: ::std::os::raw::c_int,
    pub currentsize: ::std::os::raw::c_int,
    pub online: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct__PurpleGroup {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleGroup {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleChat {
    pub node: PurpleBlistNode,
    pub alias: *mut ::std::os::raw::c_char,
    pub components: *mut GHashTable,
    pub account: *mut PurpleAccount,
}
impl ::std::clone::Clone for Struct__PurpleChat {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleChat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleBuddyList {
    pub root: *mut PurpleBlistNode,
    pub buddies: *mut GHashTable,
    pub ui_data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__PurpleBuddyList {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleBuddyList {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleBlistUiOps {
    pub new_list: ::std::option::Option<unsafe extern "C" fn(list:
                                                                 *mut PurpleBuddyList)>,
    pub new_node: ::std::option::Option<unsafe extern "C" fn(node:
                                                                 *mut PurpleBlistNode)>,
    pub show: ::std::option::Option<unsafe extern "C" fn(list:
                                                             *mut PurpleBuddyList)>,
    pub update: ::std::option::Option<unsafe extern "C" fn(list:
                                                               *mut PurpleBuddyList,
                                                           node:
                                                               *mut PurpleBlistNode)>,
    pub remove: ::std::option::Option<unsafe extern "C" fn(list:
                                                               *mut PurpleBuddyList,
                                                           node:
                                                               *mut PurpleBlistNode)>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(list:
                                                                *mut PurpleBuddyList)>,
    pub set_visible: ::std::option::Option<unsafe extern "C" fn(list:
                                                                    *mut PurpleBuddyList,
                                                                show:
                                                                    gboolean)>,
    pub request_add_buddy: ::std::option::Option<unsafe extern "C" fn(account:
                                                                          *mut PurpleAccount,
                                                                      username:
                                                                          *const ::std::os::raw::c_char,
                                                                      group:
                                                                          *const ::std::os::raw::c_char,
                                                                      alias:
                                                                          *const ::std::os::raw::c_char)>,
    pub request_add_chat: ::std::option::Option<unsafe extern "C" fn(account:
                                                                         *mut PurpleAccount,
                                                                     group:
                                                                         *mut PurpleGroup,
                                                                     alias:
                                                                         *const ::std::os::raw::c_char,
                                                                     name:
                                                                         *const ::std::os::raw::c_char)>,
    pub request_add_group: ::std::option::Option<extern "C" fn()>,
    pub save_node: ::std::option::Option<unsafe extern "C" fn(node:
                                                                  *mut PurpleBlistNode)>,
    pub remove_node: ::std::option::Option<unsafe extern "C" fn(node:
                                                                    *mut PurpleBlistNode)>,
    pub save_account: ::std::option::Option<unsafe extern "C" fn(account:
                                                                     *mut PurpleAccount)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurpleBlistUiOps {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleBlistUiOps {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed183 {
    PURPLE_SSL_HANDSHAKE_FAILED = 1,
    PURPLE_SSL_CONNECT_FAILED = 2,
    PURPLE_SSL_CERTIFICATE_INVALID = 3,
}
pub type PurpleSslErrorType = Enum_Unnamed183;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed184 {
    PURPLE_CERTIFICATE_INVALID = 0,
    PURPLE_CERTIFICATE_VALID = 1,
}
pub type PurpleCertificateVerificationStatus = Enum_Unnamed184;
#[derive(Clone, Copy)]
#[repr(i64)]
pub enum Enum_Unnamed185 {
    PURPLE_CERTIFICATE_UNKNOWN_ERROR = -1,
    PURPLE_CERTIFICATE_NO_PROBLEMS = 0,
    PURPLE_CERTIFICATE_NON_FATALS_MASK = 65535,
    PURPLE_CERTIFICATE_SELF_SIGNED = 1,
    PURPLE_CERTIFICATE_CA_UNKNOWN = 2,
    PURPLE_CERTIFICATE_NOT_ACTIVATED = 4,
    PURPLE_CERTIFICATE_EXPIRED = 8,
    PURPLE_CERTIFICATE_NAME_MISMATCH = 16,
    PURPLE_CERTIFICATE_NO_CA_POOL = 32,
    PURPLE_CERTIFICATE_FATALS_MASK = 4294901760,
    PURPLE_CERTIFICATE_INVALID_CHAIN = 65536,
    PURPLE_CERTIFICATE_REVOKED = 131072,
    PURPLE_CERTIFICATE_LAST = 262144,
}
pub type PurpleCertificateInvalidityFlags = Enum_Unnamed185;
pub type PurpleCertificate = Struct__PurpleCertificate;
pub type PurpleCertificatePool = Struct__PurpleCertificatePool;
pub type PurpleCertificateScheme = Struct__PurpleCertificateScheme;
pub type PurpleCertificateVerifier = Struct__PurpleCertificateVerifier;
pub type PurpleCertificateVerificationRequest =
    Struct__PurpleCertificateVerificationRequest;
pub type PurpleCertificateVerifiedCallback =
    ::std::option::Option<extern "C" fn(st:
                                            PurpleCertificateVerificationStatus,
                                        userdata: gpointer)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleCertificate {
    pub scheme: *mut PurpleCertificateScheme,
    pub data: gpointer,
}
impl ::std::clone::Clone for Struct__PurpleCertificate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleCertificate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleCertificatePool {
    pub scheme_name: *mut gchar,
    pub name: *mut gchar,
    pub fullname: *mut gchar,
    pub data: gpointer,
    pub init: ::std::option::Option<extern "C" fn() -> gboolean>,
    pub uninit: ::std::option::Option<extern "C" fn()>,
    pub cert_in_pool: ::std::option::Option<unsafe extern "C" fn(id:
                                                                     *const gchar)
                                                -> gboolean>,
    pub get_cert: ::std::option::Option<unsafe extern "C" fn(id: *const gchar)
                                            -> *mut PurpleCertificate>,
    pub put_cert: ::std::option::Option<unsafe extern "C" fn(id: *const gchar,
                                                             crt:
                                                                 *mut PurpleCertificate)
                                            -> gboolean>,
    pub delete_cert: ::std::option::Option<unsafe extern "C" fn(id:
                                                                    *const gchar)
                                               -> gboolean>,
    pub get_idlist: ::std::option::Option<extern "C" fn() -> *mut GList>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurpleCertificatePool {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleCertificatePool {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleCertificateScheme {
    pub name: *mut gchar,
    pub fullname: *mut gchar,
    pub import_certificate: ::std::option::Option<unsafe extern "C" fn(filename:
                                                                           *const gchar)
                                                      ->
                                                          *mut PurpleCertificate>,
    pub export_certificate: ::std::option::Option<unsafe extern "C" fn(filename:
                                                                           *const gchar,
                                                                       crt:
                                                                           *mut PurpleCertificate)
                                                      -> gboolean>,
    pub copy_certificate: ::std::option::Option<unsafe extern "C" fn(crt:
                                                                         *mut PurpleCertificate)
                                                    ->
                                                        *mut PurpleCertificate>,
    pub destroy_certificate: ::std::option::Option<unsafe extern "C" fn(crt:
                                                                            *mut PurpleCertificate)>,
    pub signed_by: ::std::option::Option<unsafe extern "C" fn(crt:
                                                                  *mut PurpleCertificate,
                                                              issuer:
                                                                  *mut PurpleCertificate)
                                             -> gboolean>,
    pub get_fingerprint_sha1: ::std::option::Option<unsafe extern "C" fn(crt:
                                                                             *mut PurpleCertificate)
                                                        -> *mut GByteArray>,
    pub get_unique_id: ::std::option::Option<unsafe extern "C" fn(crt:
                                                                      *mut PurpleCertificate)
                                                 -> *mut gchar>,
    pub get_issuer_unique_id: ::std::option::Option<unsafe extern "C" fn(crt:
                                                                             *mut PurpleCertificate)
                                                        -> *mut gchar>,
    pub get_subject_name: ::std::option::Option<unsafe extern "C" fn(crt:
                                                                         *mut PurpleCertificate)
                                                    -> *mut gchar>,
    pub check_subject_name: ::std::option::Option<unsafe extern "C" fn(crt:
                                                                           *mut PurpleCertificate,
                                                                       name:
                                                                           *const gchar)
                                                      -> gboolean>,
    pub get_times: ::std::option::Option<unsafe extern "C" fn(crt:
                                                                  *mut PurpleCertificate,
                                                              activation:
                                                                  *mut time_t,
                                                              expiration:
                                                                  *mut time_t)
                                             -> gboolean>,
    pub import_certificates: ::std::option::Option<unsafe extern "C" fn(filename:
                                                                            *const gchar)
                                                       -> *mut GSList>,
    pub register_trusted_tls_cert: ::std::option::Option<unsafe extern "C" fn(crt:
                                                                                  *mut PurpleCertificate,
                                                                              ca:
                                                                                  gboolean)
                                                             -> gboolean>,
    pub verify_cert: ::std::option::Option<unsafe extern "C" fn(vrq:
                                                                    *mut PurpleCertificateVerificationRequest,
                                                                flags:
                                                                    *mut PurpleCertificateInvalidityFlags)>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurpleCertificateScheme {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleCertificateScheme {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleCertificateVerifier {
    pub scheme_name: *mut gchar,
    pub name: *mut gchar,
    pub start_verification: ::std::option::Option<unsafe extern "C" fn(vrq:
                                                                           *mut PurpleCertificateVerificationRequest)>,
    pub destroy_request: ::std::option::Option<unsafe extern "C" fn(vrq:
                                                                        *mut PurpleCertificateVerificationRequest)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurpleCertificateVerifier {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleCertificateVerifier {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleCertificateVerificationRequest {
    pub verifier: *mut PurpleCertificateVerifier,
    pub scheme: *mut PurpleCertificateScheme,
    pub subject_name: *mut gchar,
    pub cert_chain: *mut GList,
    pub data: gpointer,
    pub cb: PurpleCertificateVerifiedCallback,
    pub cb_data: gpointer,
}
impl ::std::clone::Clone for Struct__PurpleCertificateVerificationRequest {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleCertificateVerificationRequest
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleSslConnection = Struct__PurpleSslConnection;
pub type PurpleSslInputFunction =
    ::std::option::Option<unsafe extern "C" fn(arg1: gpointer,
                                               arg2: *mut PurpleSslConnection,
                                               arg3: PurpleInputCondition)>;
pub type PurpleSslErrorFunction =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PurpleSslConnection,
                                               arg2: PurpleSslErrorType,
                                               arg3: gpointer)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleSslConnection {
    pub host: *mut ::std::os::raw::c_char,
    pub port: ::std::os::raw::c_int,
    pub connect_cb_data: *mut ::std::os::raw::c_void,
    pub connect_cb: PurpleSslInputFunction,
    pub error_cb: PurpleSslErrorFunction,
    pub recv_cb_data: *mut ::std::os::raw::c_void,
    pub recv_cb: PurpleSslInputFunction,
    pub fd: ::std::os::raw::c_int,
    pub inpa: guint,
    pub connect_data: *mut PurpleProxyConnectData,
    pub private_data: *mut ::std::os::raw::c_void,
    pub verifier: *mut PurpleCertificateVerifier,
}
impl ::std::clone::Clone for Struct__PurpleSslConnection {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleSslConnection {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed186 {
    pub init: ::std::option::Option<extern "C" fn() -> gboolean>,
    pub uninit: ::std::option::Option<extern "C" fn()>,
    pub connectfunc: ::std::option::Option<unsafe extern "C" fn(gsc:
                                                                    *mut PurpleSslConnection)>,
    pub close: ::std::option::Option<unsafe extern "C" fn(gsc:
                                                              *mut PurpleSslConnection)>,
    pub read: ::std::option::Option<unsafe extern "C" fn(gsc:
                                                             *mut PurpleSslConnection,
                                                         data:
                                                             *mut ::std::os::raw::c_void,
                                                         len: size_t)
                                        -> size_t>,
    pub write: ::std::option::Option<unsafe extern "C" fn(gsc:
                                                              *mut PurpleSslConnection,
                                                          data:
                                                              *const ::std::os::raw::c_void,
                                                          len: size_t)
                                         -> size_t>,
    pub get_peer_certificates: ::std::option::Option<unsafe extern "C" fn(gsc:
                                                                              *mut PurpleSslConnection)
                                                         -> *mut GList>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_Unnamed186 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed186 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleSslOps = Struct_Unnamed186;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed187 {
    pub connect_progress: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                         *mut PurpleConnection,
                                                                     text:
                                                                         *const ::std::os::raw::c_char,
                                                                     step:
                                                                         size_t,
                                                                     step_count:
                                                                         size_t)>,
    pub connected: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                  *mut PurpleConnection)>,
    pub disconnected: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                     *mut PurpleConnection)>,
    pub notice: ::std::option::Option<unsafe extern "C" fn(gc:
                                                               *mut PurpleConnection,
                                                           text:
                                                               *const ::std::os::raw::c_char)>,
    pub report_disconnect: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                          *mut PurpleConnection,
                                                                      text:
                                                                          *const ::std::os::raw::c_char)>,
    pub network_connected: ::std::option::Option<extern "C" fn()>,
    pub network_disconnected: ::std::option::Option<extern "C" fn()>,
    pub report_disconnect_reason: ::std::option::Option<unsafe extern "C" fn(gc:
                                                                                 *mut PurpleConnection,
                                                                             reason:
                                                                                 PurpleConnectionError,
                                                                             text:
                                                                                 *const ::std::os::raw::c_char)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_Unnamed187 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed187 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleConnectionUiOps = Struct_Unnamed187;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleConnection {
    pub prpl: *mut PurplePlugin,
    pub flags: PurpleConnectionFlags,
    pub state: PurpleConnectionState,
    pub account: *mut PurpleAccount,
    pub password: *mut ::std::os::raw::c_char,
    pub inpa: ::std::os::raw::c_int,
    pub buddy_chats: *mut GSList,
    pub proto_data: *mut ::std::os::raw::c_void,
    pub display_name: *mut ::std::os::raw::c_char,
    pub keepalive: guint,
    pub wants_to_die: gboolean,
    pub disconnect_timeout: guint,
    pub last_received: time_t,
}
impl ::std::clone::Clone for Struct__PurpleConnection {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleConnection {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__PurplePrivacyType {
    PURPLE_PRIVACY_ALLOW_ALL = 1,
    PURPLE_PRIVACY_DENY_ALL = 2,
    PURPLE_PRIVACY_ALLOW_USERS = 3,
    PURPLE_PRIVACY_DENY_USERS = 4,
    PURPLE_PRIVACY_ALLOW_BUDDYLIST = 5,
}
pub type PurplePrivacyType = Enum__PurplePrivacyType;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed188 {
    pub permit_added: ::std::option::Option<unsafe extern "C" fn(account:
                                                                     *mut PurpleAccount,
                                                                 name:
                                                                     *const ::std::os::raw::c_char)>,
    pub permit_removed: ::std::option::Option<unsafe extern "C" fn(account:
                                                                       *mut PurpleAccount,
                                                                   name:
                                                                       *const ::std::os::raw::c_char)>,
    pub deny_added: ::std::option::Option<unsafe extern "C" fn(account:
                                                                   *mut PurpleAccount,
                                                               name:
                                                                   *const ::std::os::raw::c_char)>,
    pub deny_removed: ::std::option::Option<unsafe extern "C" fn(account:
                                                                     *mut PurpleAccount,
                                                                 name:
                                                                     *const ::std::os::raw::c_char)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_Unnamed188 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed188 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurplePrivacyUiOps = Struct_Unnamed188;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed189 { PURPLE_ACCOUNT_REQUEST_AUTHORIZATION = 0, }
pub type PurpleAccountRequestType = Enum_Unnamed189;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_Unnamed190 {
    PURPLE_ACCOUNT_RESPONSE_IGNORE = -2,
    PURPLE_ACCOUNT_RESPONSE_DENY = -1,
    PURPLE_ACCOUNT_RESPONSE_PASS = 0,
    PURPLE_ACCOUNT_RESPONSE_ACCEPT = 1,
}
pub type PurpleAccountRequestResponse = Enum_Unnamed190;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleAccountUiOps {
    pub notify_added: ::std::option::Option<unsafe extern "C" fn(account:
                                                                     *mut PurpleAccount,
                                                                 remote_user:
                                                                     *const ::std::os::raw::c_char,
                                                                 id:
                                                                     *const ::std::os::raw::c_char,
                                                                 alias:
                                                                     *const ::std::os::raw::c_char,
                                                                 message:
                                                                     *const ::std::os::raw::c_char)>,
    pub status_changed: ::std::option::Option<unsafe extern "C" fn(account:
                                                                       *mut PurpleAccount,
                                                                   status:
                                                                       *mut PurpleStatus)>,
    pub request_add: ::std::option::Option<unsafe extern "C" fn(account:
                                                                    *mut PurpleAccount,
                                                                remote_user:
                                                                    *const ::std::os::raw::c_char,
                                                                id:
                                                                    *const ::std::os::raw::c_char,
                                                                alias:
                                                                    *const ::std::os::raw::c_char,
                                                                message:
                                                                    *const ::std::os::raw::c_char)>,
    pub request_authorize: ::std::option::Option<unsafe extern "C" fn(account:
                                                                          *mut PurpleAccount,
                                                                      remote_user:
                                                                          *const ::std::os::raw::c_char,
                                                                      id:
                                                                          *const ::std::os::raw::c_char,
                                                                      alias:
                                                                          *const ::std::os::raw::c_char,
                                                                      message:
                                                                          *const ::std::os::raw::c_char,
                                                                      on_list:
                                                                          gboolean,
                                                                      authorize_cb:
                                                                          PurpleAccountRequestAuthorizationCb,
                                                                      deny_cb:
                                                                          PurpleAccountRequestAuthorizationCb,
                                                                      user_data:
                                                                          *mut ::std::os::raw::c_void)
                                                     ->
                                                         *mut ::std::os::raw::c_void>,
    pub close_account_request: ::std::option::Option<unsafe extern "C" fn(ui_handle:
                                                                              *mut ::std::os::raw::c_void)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurpleAccountUiOps {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleAccountUiOps {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleAccount {
    pub username: *mut ::std::os::raw::c_char,
    pub alias: *mut ::std::os::raw::c_char,
    pub password: *mut ::std::os::raw::c_char,
    pub user_info: *mut ::std::os::raw::c_char,
    pub buddy_icon_path: *mut ::std::os::raw::c_char,
    pub remember_pass: gboolean,
    pub protocol_id: *mut ::std::os::raw::c_char,
    pub gc: *mut PurpleConnection,
    pub disconnecting: gboolean,
    pub settings: *mut GHashTable,
    pub ui_settings: *mut GHashTable,
    pub proxy_info: *mut PurpleProxyInfo,
    pub permit: *mut GSList,
    pub deny: *mut GSList,
    pub perm_deny: PurplePrivacyType,
    pub status_types: *mut GList,
    pub presence: *mut PurplePresence,
    pub system_log: *mut PurpleLog,
    pub ui_data: *mut ::std::os::raw::c_void,
    pub registration_cb: PurpleAccountRegistrationCb,
    pub registration_cb_user_data: *mut ::std::os::raw::c_void,
    pub _priv: gpointer,
}
impl ::std::clone::Clone for Struct__PurpleAccount {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleAccount {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed191 {
    pub _type: PurplePrefType,
    pub text: *mut ::std::os::raw::c_char,
    pub pref_name: *mut ::std::os::raw::c_char,
    pub default_value: Union_Unnamed192,
    pub masked: gboolean,
}
impl ::std::clone::Clone for Struct_Unnamed191 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed191 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed192 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed192 {
    pub unsafe fn boolean(&mut self) -> *mut gboolean {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn integer(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn string(&mut self) -> *mut *mut ::std::os::raw::c_char {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn list(&mut self) -> *mut *mut GList {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed192 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed192 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleAccountOption = Struct_Unnamed191;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed193 {
    pub text: *mut ::std::os::raw::c_char,
    pub default_value: *mut ::std::os::raw::c_char,
    pub field_sep: ::std::os::raw::c_char,
    pub reverse: gboolean,
}
impl ::std::clone::Clone for Struct_Unnamed193 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed193 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleAccountUserSplit = Struct_Unnamed193;
pub enum Struct__PurpleCipher { }
pub type PurpleCipher = Struct__PurpleCipher;
pub type PurpleCipherOps = Struct__PurpleCipherOps;
pub enum Struct__PurpleCipherContext { }
pub type PurpleCipherContext = Struct__PurpleCipherContext;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__PurpleCipherBatchMode {
    PURPLE_CIPHER_BATCH_MODE_ECB = 0,
    PURPLE_CIPHER_BATCH_MODE_CBC = 1,
}
pub type PurpleCipherBatchMode = Enum__PurpleCipherBatchMode;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__PurpleCipherCaps {
    PURPLE_CIPHER_CAPS_SET_OPT = 2,
    PURPLE_CIPHER_CAPS_GET_OPT = 4,
    PURPLE_CIPHER_CAPS_INIT = 8,
    PURPLE_CIPHER_CAPS_RESET = 16,
    PURPLE_CIPHER_CAPS_UNINIT = 32,
    PURPLE_CIPHER_CAPS_SET_IV = 64,
    PURPLE_CIPHER_CAPS_APPEND = 128,
    PURPLE_CIPHER_CAPS_DIGEST = 256,
    PURPLE_CIPHER_CAPS_ENCRYPT = 512,
    PURPLE_CIPHER_CAPS_DECRYPT = 1024,
    PURPLE_CIPHER_CAPS_SET_SALT = 2048,
    PURPLE_CIPHER_CAPS_GET_SALT_SIZE = 4096,
    PURPLE_CIPHER_CAPS_SET_KEY = 8192,
    PURPLE_CIPHER_CAPS_GET_KEY_SIZE = 16384,
    PURPLE_CIPHER_CAPS_SET_BATCH_MODE = 32768,
    PURPLE_CIPHER_CAPS_GET_BATCH_MODE = 65536,
    PURPLE_CIPHER_CAPS_GET_BLOCK_SIZE = 131072,
    PURPLE_CIPHER_CAPS_SET_KEY_WITH_LEN = 262144,
    PURPLE_CIPHER_CAPS_UNKNOWN = 524288,
}
pub type PurpleCipherCaps = Enum__PurpleCipherCaps;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleCipherOps {
    pub set_option: ::std::option::Option<unsafe extern "C" fn(context:
                                                                   *mut PurpleCipherContext,
                                                               name:
                                                                   *const gchar,
                                                               value:
                                                                   *mut ::std::os::raw::c_void)>,
    pub get_option: ::std::option::Option<unsafe extern "C" fn(context:
                                                                   *mut PurpleCipherContext,
                                                               name:
                                                                   *const gchar)
                                              -> *mut ::std::os::raw::c_void>,
    pub init: ::std::option::Option<unsafe extern "C" fn(context:
                                                             *mut PurpleCipherContext,
                                                         extra:
                                                             *mut ::std::os::raw::c_void)>,
    pub reset: ::std::option::Option<unsafe extern "C" fn(context:
                                                              *mut PurpleCipherContext,
                                                          extra:
                                                              *mut ::std::os::raw::c_void)>,
    pub uninit: ::std::option::Option<unsafe extern "C" fn(context:
                                                               *mut PurpleCipherContext)>,
    pub set_iv: ::std::option::Option<unsafe extern "C" fn(context:
                                                               *mut PurpleCipherContext,
                                                           iv: *mut guchar,
                                                           len: size_t)>,
    pub append: ::std::option::Option<unsafe extern "C" fn(context:
                                                               *mut PurpleCipherContext,
                                                           data:
                                                               *const guchar,
                                                           len: size_t)>,
    pub digest: ::std::option::Option<unsafe extern "C" fn(context:
                                                               *mut PurpleCipherContext,
                                                           in_len: size_t,
                                                           digest:
                                                               *mut guchar,
                                                           out_len:
                                                               *mut size_t)
                                          -> gboolean>,
    pub encrypt: ::std::option::Option<unsafe extern "C" fn(context:
                                                                *mut PurpleCipherContext,
                                                            data:
                                                                *const guchar,
                                                            len: size_t,
                                                            output:
                                                                *mut guchar,
                                                            outlen:
                                                                *mut size_t)
                                           -> ::std::os::raw::c_int>,
    pub decrypt: ::std::option::Option<unsafe extern "C" fn(context:
                                                                *mut PurpleCipherContext,
                                                            data:
                                                                *const guchar,
                                                            len: size_t,
                                                            output:
                                                                *mut guchar,
                                                            outlen:
                                                                *mut size_t)
                                           -> ::std::os::raw::c_int>,
    pub set_salt: ::std::option::Option<unsafe extern "C" fn(context:
                                                                 *mut PurpleCipherContext,
                                                             salt:
                                                                 *mut guchar)>,
    pub get_salt_size: ::std::option::Option<unsafe extern "C" fn(context:
                                                                      *mut PurpleCipherContext)
                                                 -> size_t>,
    pub set_key: ::std::option::Option<unsafe extern "C" fn(context:
                                                                *mut PurpleCipherContext,
                                                            key:
                                                                *const guchar)>,
    pub get_key_size: ::std::option::Option<unsafe extern "C" fn(context:
                                                                     *mut PurpleCipherContext)
                                                -> size_t>,
    pub set_batch_mode: ::std::option::Option<unsafe extern "C" fn(context:
                                                                       *mut PurpleCipherContext,
                                                                   mode:
                                                                       PurpleCipherBatchMode)>,
    pub get_batch_mode: ::std::option::Option<unsafe extern "C" fn(context:
                                                                       *mut PurpleCipherContext)
                                                  -> PurpleCipherBatchMode>,
    pub get_block_size: ::std::option::Option<unsafe extern "C" fn(context:
                                                                       *mut PurpleCipherContext)
                                                  -> size_t>,
    pub set_key_with_len: ::std::option::Option<unsafe extern "C" fn(context:
                                                                         *mut PurpleCipherContext,
                                                                     key:
                                                                         *const guchar,
                                                                     len:
                                                                         size_t)>,
}
impl ::std::clone::Clone for Struct__PurpleCipherOps {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleCipherOps {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleCircBuffer {
    pub buffer: *mut gchar,
    pub growsize: gsize,
    pub buflen: gsize,
    pub bufused: gsize,
    pub inptr: *mut gchar,
    pub outptr: *mut gchar,
}
impl ::std::clone::Clone for Struct__PurpleCircBuffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleCircBuffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleCircBuffer = Struct__PurpleCircBuffer;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__PurpleCmdStatus {
    PURPLE_CMD_STATUS_OK = 0,
    PURPLE_CMD_STATUS_FAILED = 1,
    PURPLE_CMD_STATUS_NOT_FOUND = 2,
    PURPLE_CMD_STATUS_WRONG_ARGS = 3,
    PURPLE_CMD_STATUS_WRONG_PRPL = 4,
    PURPLE_CMD_STATUS_WRONG_TYPE = 5,
}
pub type PurpleCmdStatus = Enum__PurpleCmdStatus;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__PurpleCmdRet {
    PURPLE_CMD_RET_OK = 0,
    PURPLE_CMD_RET_FAILED = 1,
    PURPLE_CMD_RET_CONTINUE = 2,
}
pub type PurpleCmdRet = Enum__PurpleCmdRet;
pub type PurpleCmdFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PurpleConversation,
                                               cmd: *const gchar,
                                               args: *mut *mut gchar,
                                               error: *mut *mut gchar,
                                               data:
                                                   *mut ::std::os::raw::c_void)
                              -> PurpleCmdRet>;
pub type PurpleCmdId = guint;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum__PurpleCmdPriority {
    PURPLE_CMD_P_VERY_LOW = -1000,
    PURPLE_CMD_P_LOW = 0,
    PURPLE_CMD_P_DEFAULT = 1000,
    PURPLE_CMD_P_PRPL = 2000,
    PURPLE_CMD_P_PLUGIN = 3000,
    PURPLE_CMD_P_ALIAS = 4000,
    PURPLE_CMD_P_HIGH = 5000,
    PURPLE_CMD_P_VERY_HIGH = 6000,
}
pub type PurpleCmdPriority = Enum__PurpleCmdPriority;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__PurpleCmdFlag {
    PURPLE_CMD_FLAG_IM = 1,
    PURPLE_CMD_FLAG_CHAT = 2,
    PURPLE_CMD_FLAG_PRPL_ONLY = 4,
    PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS = 8,
}
pub type PurpleCmdFlag = Enum__PurpleCmdFlag;
pub enum Struct_PurpleCore { }
pub type PurpleCore = Struct_PurpleCore;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed194 {
    pub ui_prefs_init: ::std::option::Option<extern "C" fn()>,
    pub debug_ui_init: ::std::option::Option<extern "C" fn()>,
    pub ui_init: ::std::option::Option<extern "C" fn()>,
    pub quit: ::std::option::Option<extern "C" fn()>,
    pub get_ui_info: ::std::option::Option<extern "C" fn()
                                               -> *mut GHashTable>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_Unnamed194 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed194 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleCoreUiOps = Struct_Unnamed194;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed195 {
    PURPLE_DEBUG_ALL = 0,
    PURPLE_DEBUG_MISC = 1,
    PURPLE_DEBUG_INFO = 2,
    PURPLE_DEBUG_WARNING = 3,
    PURPLE_DEBUG_ERROR = 4,
    PURPLE_DEBUG_FATAL = 5,
}
pub type PurpleDebugLevel = Enum_Unnamed195;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed196 {
    pub print: ::std::option::Option<unsafe extern "C" fn(level:
                                                              PurpleDebugLevel,
                                                          category:
                                                              *const ::std::os::raw::c_char,
                                                          arg_s:
                                                              *const ::std::os::raw::c_char)>,
    pub is_enabled: ::std::option::Option<unsafe extern "C" fn(level:
                                                                   PurpleDebugLevel,
                                                               category:
                                                                   *const ::std::os::raw::c_char)
                                              -> gboolean>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_Unnamed196 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed196 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleDebugUiOps = Struct_Unnamed196;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed197 {
    PURPLE_DESKTOP_ITEM_TYPE_NULL = 0,
    PURPLE_DESKTOP_ITEM_TYPE_OTHER = 1,
    PURPLE_DESKTOP_ITEM_TYPE_APPLICATION = 2,
    PURPLE_DESKTOP_ITEM_TYPE_LINK = 3,
    PURPLE_DESKTOP_ITEM_TYPE_FSDEVICE = 4,
    PURPLE_DESKTOP_ITEM_TYPE_MIME_TYPE = 5,
    PURPLE_DESKTOP_ITEM_TYPE_DIRECTORY = 6,
    PURPLE_DESKTOP_ITEM_TYPE_SERVICE = 7,
    PURPLE_DESKTOP_ITEM_TYPE_SERVICE_TYPE = 8,
}
pub type PurpleDesktopItemType = Enum_Unnamed197;
pub enum Struct__PurpleDesktopItem { }
pub type PurpleDesktopItem = Struct__PurpleDesktopItem;
pub enum Struct__PurpleDnsQueryData { }
pub type PurpleDnsQueryData = Struct__PurpleDnsQueryData;
pub type PurpleDnsQueryConnectFunction =
    ::std::option::Option<unsafe extern "C" fn(hosts: *mut GSList,
                                               data: gpointer,
                                               error_message:
                                                   *const ::std::os::raw::c_char)>;
pub type PurpleDnsQueryResolvedCallback =
    ::std::option::Option<unsafe extern "C" fn(query_data:
                                                   *mut PurpleDnsQueryData,
                                               hosts: *mut GSList)>;
pub type PurpleDnsQueryFailedCallback =
    ::std::option::Option<unsafe extern "C" fn(query_data:
                                                   *mut PurpleDnsQueryData,
                                               error_message: *const gchar)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed198 {
    pub resolve_host: ::std::option::Option<unsafe extern "C" fn(query_data:
                                                                     *mut PurpleDnsQueryData,
                                                                 resolved_cb:
                                                                     PurpleDnsQueryResolvedCallback,
                                                                 failed_cb:
                                                                     PurpleDnsQueryFailedCallback)
                                                -> gboolean>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(query_data:
                                                                *mut PurpleDnsQueryData)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_Unnamed198 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed198 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleDnsQueryUiOps = Struct_Unnamed198;
pub enum Struct__PurpleSrvTxtQueryData { }
pub type PurpleSrvTxtQueryData = Struct__PurpleSrvTxtQueryData;
pub type PurpleSrvResponse = Struct__PurpleSrvResponse;
pub type PurpleTxtResponse = Struct__PurpleTxtResponse;
pub type PurpleSrvQueryData = Struct__PurpleSrvTxtQueryData;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_PurpleDnsType { PurpleDnsTypeTxt = 16, PurpleDnsTypeSrv = 33, }
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleSrvResponse {
    pub hostname: [::std::os::raw::c_char; 256usize],
    pub port: ::std::os::raw::c_int,
    pub weight: ::std::os::raw::c_int,
    pub pref: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct__PurpleSrvResponse {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleSrvResponse {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleTxtResponse {
    pub content: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct__PurpleTxtResponse {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleTxtResponse {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleSrvTxtQueryResolvedCallback =
    ::std::option::Option<unsafe extern "C" fn(query_data:
                                                   *mut PurpleSrvTxtQueryData,
                                               records: *mut GList)>;
pub type PurpleSrvTxtQueryFailedCallback =
    ::std::option::Option<unsafe extern "C" fn(query_data:
                                                   *mut PurpleSrvTxtQueryData,
                                               error_message: *const gchar)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed199 {
    pub resolve: ::std::option::Option<unsafe extern "C" fn(query_data:
                                                                *mut PurpleSrvTxtQueryData,
                                                            resolved_cb:
                                                                PurpleSrvTxtQueryResolvedCallback,
                                                            failed_cb:
                                                                PurpleSrvTxtQueryFailedCallback)
                                           -> gboolean>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(query_data:
                                                                *mut PurpleSrvTxtQueryData)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_Unnamed199 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed199 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleSrvTxtQueryUiOps = Struct_Unnamed199;
pub type PurpleSrvCallback =
    ::std::option::Option<unsafe extern "C" fn(resp: *mut PurpleSrvResponse,
                                               results: ::std::os::raw::c_int,
                                               data: gpointer)>;
pub type PurpleTxtCallback =
    ::std::option::Option<unsafe extern "C" fn(responses: *mut GList,
                                               data: gpointer)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed200 {
    pub get_time_idle: ::std::option::Option<extern "C" fn() -> time_t>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_Unnamed200 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed200 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleIdleUiOps = Struct_Unnamed200;
pub type PurpleMediaManager = Struct__PurpleMediaManager;
pub enum Struct__PurpleMediaManagerClass { }
pub type PurpleMediaManagerClass = Struct__PurpleMediaManagerClass;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed201 {
    pub readable: ::std::option::Option<unsafe extern "C" fn(manager:
                                                                 *mut PurpleMediaManager,
                                                             media:
                                                                 *mut PurpleMedia,
                                                             session_id:
                                                                 *const gchar,
                                                             participant:
                                                                 *const gchar,
                                                             user_data:
                                                                 gpointer)>,
    pub writable: ::std::option::Option<unsafe extern "C" fn(manager:
                                                                 *mut PurpleMediaManager,
                                                             media:
                                                                 *mut PurpleMedia,
                                                             session_id:
                                                                 *const gchar,
                                                             participant:
                                                                 *const gchar,
                                                             writable:
                                                                 gboolean,
                                                             user_data:
                                                                 gpointer)>,
}
impl ::std::clone::Clone for Struct_Unnamed201 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed201 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleMediaAppDataCallbacks = Struct_Unnamed201;
pub enum Struct__PurpleMimeDocument { }
pub type PurpleMimeDocument = Struct__PurpleMimeDocument;
pub enum Struct__PurpleMimePart { }
pub type PurpleMimePart = Struct__PurpleMimePart;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed202 { PURPLE_PMP_TYPE_UDP = 0, PURPLE_PMP_TYPE_TCP = 1, }
pub type PurplePmpType = Enum_Unnamed202;
pub enum Struct__PurpleNetworkListenData { }
pub type PurpleNetworkListenData = Struct__PurpleNetworkListenData;
pub type PurpleNetworkListenCallback =
    ::std::option::Option<extern "C" fn(listenfd: ::std::os::raw::c_int,
                                        data: gpointer)>;
pub type PurplePounce = Struct__PurplePounce;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed203 {
    PURPLE_POUNCE_NONE = 0,
    PURPLE_POUNCE_SIGNON = 1,
    PURPLE_POUNCE_SIGNOFF = 2,
    PURPLE_POUNCE_AWAY = 4,
    PURPLE_POUNCE_AWAY_RETURN = 8,
    PURPLE_POUNCE_IDLE = 16,
    PURPLE_POUNCE_IDLE_RETURN = 32,
    PURPLE_POUNCE_TYPING = 64,
    PURPLE_POUNCE_TYPED = 128,
    PURPLE_POUNCE_TYPING_STOPPED = 256,
    PURPLE_POUNCE_MESSAGE_RECEIVED = 512,
}
pub type PurplePounceEvent = Enum_Unnamed203;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed204 {
    PURPLE_POUNCE_OPTION_NONE = 0,
    PURPLE_POUNCE_OPTION_AWAY = 1,
}
pub type PurplePounceOption = Enum_Unnamed204;
pub type PurplePounceCb =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PurplePounce,
                                               arg2: PurplePounceEvent,
                                               arg3:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurplePounce {
    pub ui_type: *mut ::std::os::raw::c_char,
    pub events: PurplePounceEvent,
    pub options: PurplePounceOption,
    pub pouncer: *mut PurpleAccount,
    pub pouncee: *mut ::std::os::raw::c_char,
    pub actions: *mut GHashTable,
    pub save: gboolean,
    pub data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__PurplePounce {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurplePounce {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleRequestField = Struct__PurpleRequestField;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed205 {
    PURPLE_REQUEST_INPUT = 0,
    PURPLE_REQUEST_CHOICE = 1,
    PURPLE_REQUEST_ACTION = 2,
    PURPLE_REQUEST_FIELDS = 3,
    PURPLE_REQUEST_FILE = 4,
    PURPLE_REQUEST_FOLDER = 5,
}
pub type PurpleRequestType = Enum_Unnamed205;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed206 {
    PURPLE_REQUEST_FIELD_NONE = 0,
    PURPLE_REQUEST_FIELD_STRING = 1,
    PURPLE_REQUEST_FIELD_INTEGER = 2,
    PURPLE_REQUEST_FIELD_BOOLEAN = 3,
    PURPLE_REQUEST_FIELD_CHOICE = 4,
    PURPLE_REQUEST_FIELD_LIST = 5,
    PURPLE_REQUEST_FIELD_LABEL = 6,
    PURPLE_REQUEST_FIELD_IMAGE = 7,
    PURPLE_REQUEST_FIELD_ACCOUNT = 8,
}
pub type PurpleRequestFieldType = Enum_Unnamed206;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed207 {
    pub groups: *mut GList,
    pub fields: *mut GHashTable,
    pub required_fields: *mut GList,
    pub ui_data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed207 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed207 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleRequestFields = Struct_Unnamed207;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed208 {
    pub fields_list: *mut PurpleRequestFields,
    pub title: *mut ::std::os::raw::c_char,
    pub fields: *mut GList,
}
impl ::std::clone::Clone for Struct_Unnamed208 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed208 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleRequestFieldGroup = Struct_Unnamed208;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleRequestField {
    pub _type: PurpleRequestFieldType,
    pub group: *mut PurpleRequestFieldGroup,
    pub id: *mut ::std::os::raw::c_char,
    pub label: *mut ::std::os::raw::c_char,
    pub type_hint: *mut ::std::os::raw::c_char,
    pub visible: gboolean,
    pub required: gboolean,
    pub u: Union_Unnamed209,
    pub ui_data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__PurpleRequestField {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleRequestField {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed209 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed209 {
    pub unsafe fn string(&mut self) -> *mut Struct_Unnamed210 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn integer(&mut self) -> *mut Struct_Unnamed211 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn boolean(&mut self) -> *mut Struct_Unnamed212 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn choice(&mut self) -> *mut Struct_Unnamed213 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn list(&mut self) -> *mut Struct_Unnamed214 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn account(&mut self) -> *mut Struct_Unnamed215 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn image(&mut self) -> *mut Struct_Unnamed216 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed209 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed209 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed210 {
    pub multiline: gboolean,
    pub masked: gboolean,
    pub editable: gboolean,
    pub default_value: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
impl ::std::clone::Clone for Struct_Unnamed210 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed210 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed211 {
    pub default_value: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed211 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed211 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed212 {
    pub default_value: gboolean,
    pub value: gboolean,
}
impl ::std::clone::Clone for Struct_Unnamed212 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed212 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed213 {
    pub default_value: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_int,
    pub labels: *mut GList,
}
impl ::std::clone::Clone for Struct_Unnamed213 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed213 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed214 {
    pub items: *mut GList,
    pub icons: *mut GList,
    pub item_data: *mut GHashTable,
    pub selected: *mut GList,
    pub selected_table: *mut GHashTable,
    pub multiple_selection: gboolean,
}
impl ::std::clone::Clone for Struct_Unnamed214 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed214 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed215 {
    pub default_account: *mut PurpleAccount,
    pub account: *mut PurpleAccount,
    pub show_all: gboolean,
    pub filter_func: PurpleFilterAccountFunc,
}
impl ::std::clone::Clone for Struct_Unnamed215 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed215 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed216 {
    pub scale_x: ::std::os::raw::c_uint,
    pub scale_y: ::std::os::raw::c_uint,
    pub buffer: *const ::std::os::raw::c_char,
    pub size: gsize,
}
impl ::std::clone::Clone for Struct_Unnamed216 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed216 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed217 {
    pub request_input: ::std::option::Option<unsafe extern "C" fn(title:
                                                                      *const ::std::os::raw::c_char,
                                                                  primary:
                                                                      *const ::std::os::raw::c_char,
                                                                  secondary:
                                                                      *const ::std::os::raw::c_char,
                                                                  default_value:
                                                                      *const ::std::os::raw::c_char,
                                                                  multiline:
                                                                      gboolean,
                                                                  masked:
                                                                      gboolean,
                                                                  hint:
                                                                      *mut gchar,
                                                                  ok_text:
                                                                      *const ::std::os::raw::c_char,
                                                                  ok_cb:
                                                                      GCallback,
                                                                  cancel_text:
                                                                      *const ::std::os::raw::c_char,
                                                                  cancel_cb:
                                                                      GCallback,
                                                                  account:
                                                                      *mut PurpleAccount,
                                                                  who:
                                                                      *const ::std::os::raw::c_char,
                                                                  conv:
                                                                      *mut PurpleConversation,
                                                                  user_data:
                                                                      *mut ::std::os::raw::c_void)
                                                 ->
                                                     *mut ::std::os::raw::c_void>,
    pub request_choice: ::std::option::Option<unsafe extern "C" fn(title:
                                                                       *const ::std::os::raw::c_char,
                                                                   primary:
                                                                       *const ::std::os::raw::c_char,
                                                                   secondary:
                                                                       *const ::std::os::raw::c_char,
                                                                   default_value:
                                                                       ::std::os::raw::c_int,
                                                                   ok_text:
                                                                       *const ::std::os::raw::c_char,
                                                                   ok_cb:
                                                                       GCallback,
                                                                   cancel_text:
                                                                       *const ::std::os::raw::c_char,
                                                                   cancel_cb:
                                                                       GCallback,
                                                                   account:
                                                                       *mut PurpleAccount,
                                                                   who:
                                                                       *const ::std::os::raw::c_char,
                                                                   conv:
                                                                       *mut PurpleConversation,
                                                                   user_data:
                                                                       *mut ::std::os::raw::c_void,
                                                                   choices:
                                                                       va_list)
                                                  ->
                                                      *mut ::std::os::raw::c_void>,
    pub request_action: ::std::option::Option<unsafe extern "C" fn(title:
                                                                       *const ::std::os::raw::c_char,
                                                                   primary:
                                                                       *const ::std::os::raw::c_char,
                                                                   secondary:
                                                                       *const ::std::os::raw::c_char,
                                                                   default_action:
                                                                       ::std::os::raw::c_int,
                                                                   account:
                                                                       *mut PurpleAccount,
                                                                   who:
                                                                       *const ::std::os::raw::c_char,
                                                                   conv:
                                                                       *mut PurpleConversation,
                                                                   user_data:
                                                                       *mut ::std::os::raw::c_void,
                                                                   action_count:
                                                                       size_t,
                                                                   actions:
                                                                       va_list)
                                                  ->
                                                      *mut ::std::os::raw::c_void>,
    pub request_fields: ::std::option::Option<unsafe extern "C" fn(title:
                                                                       *const ::std::os::raw::c_char,
                                                                   primary:
                                                                       *const ::std::os::raw::c_char,
                                                                   secondary:
                                                                       *const ::std::os::raw::c_char,
                                                                   fields:
                                                                       *mut PurpleRequestFields,
                                                                   ok_text:
                                                                       *const ::std::os::raw::c_char,
                                                                   ok_cb:
                                                                       GCallback,
                                                                   cancel_text:
                                                                       *const ::std::os::raw::c_char,
                                                                   cancel_cb:
                                                                       GCallback,
                                                                   account:
                                                                       *mut PurpleAccount,
                                                                   who:
                                                                       *const ::std::os::raw::c_char,
                                                                   conv:
                                                                       *mut PurpleConversation,
                                                                   user_data:
                                                                       *mut ::std::os::raw::c_void)
                                                  ->
                                                      *mut ::std::os::raw::c_void>,
    pub request_file: ::std::option::Option<unsafe extern "C" fn(title:
                                                                     *const ::std::os::raw::c_char,
                                                                 filename:
                                                                     *const ::std::os::raw::c_char,
                                                                 savedialog:
                                                                     gboolean,
                                                                 ok_cb:
                                                                     GCallback,
                                                                 cancel_cb:
                                                                     GCallback,
                                                                 account:
                                                                     *mut PurpleAccount,
                                                                 who:
                                                                     *const ::std::os::raw::c_char,
                                                                 conv:
                                                                     *mut PurpleConversation,
                                                                 user_data:
                                                                     *mut ::std::os::raw::c_void)
                                                ->
                                                    *mut ::std::os::raw::c_void>,
    pub close_request: ::std::option::Option<unsafe extern "C" fn(_type:
                                                                      PurpleRequestType,
                                                                  ui_handle:
                                                                      *mut ::std::os::raw::c_void)>,
    pub request_folder: ::std::option::Option<unsafe extern "C" fn(title:
                                                                       *const ::std::os::raw::c_char,
                                                                   dirname:
                                                                       *const ::std::os::raw::c_char,
                                                                   ok_cb:
                                                                       GCallback,
                                                                   cancel_cb:
                                                                       GCallback,
                                                                   account:
                                                                       *mut PurpleAccount,
                                                                   who:
                                                                       *const ::std::os::raw::c_char,
                                                                   conv:
                                                                       *mut PurpleConversation,
                                                                   user_data:
                                                                       *mut ::std::os::raw::c_void)
                                                  ->
                                                      *mut ::std::os::raw::c_void>,
    pub request_action_with_icon: ::std::option::Option<unsafe extern "C" fn(title:
                                                                                 *const ::std::os::raw::c_char,
                                                                             primary:
                                                                                 *const ::std::os::raw::c_char,
                                                                             secondary:
                                                                                 *const ::std::os::raw::c_char,
                                                                             default_action:
                                                                                 ::std::os::raw::c_int,
                                                                             account:
                                                                                 *mut PurpleAccount,
                                                                             who:
                                                                                 *const ::std::os::raw::c_char,
                                                                             conv:
                                                                                 *mut PurpleConversation,
                                                                             icon_data:
                                                                                 gconstpointer,
                                                                             icon_size:
                                                                                 gsize,
                                                                             user_data:
                                                                                 *mut ::std::os::raw::c_void,
                                                                             action_count:
                                                                                 size_t,
                                                                             actions:
                                                                                 va_list)
                                                            ->
                                                                *mut ::std::os::raw::c_void>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct_Unnamed217 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed217 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleRequestUiOps = Struct_Unnamed217;
pub type PurpleRequestInputCb =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_char)>;
pub type PurpleRequestActionCb =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void,
                                               arg2: ::std::os::raw::c_int)>;
pub type PurpleRequestChoiceCb =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void,
                                               arg2: ::std::os::raw::c_int)>;
pub type PurpleRequestFieldsCb =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void,
                                               fields:
                                                   *mut PurpleRequestFields)>;
pub type PurpleRequestFileCb =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut ::std::os::raw::c_void,
                                               filename:
                                                   *const ::std::os::raw::c_char)>;
pub enum Struct__PurpleSavedStatus { }
pub type PurpleSavedStatus = Struct__PurpleSavedStatus;
pub enum Struct__PurpleSavedStatusSub { }
pub type PurpleSavedStatusSub = Struct__PurpleSavedStatusSub;
pub enum Struct__PurpleSmiley { }
pub type PurpleSmiley = Struct__PurpleSmiley;
pub enum Struct__PurpleSmileyClass { }
pub type PurpleSmileyClass = Struct__PurpleSmileyClass;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__PurpleSoundEventID {
    PURPLE_SOUND_BUDDY_ARRIVE = 0,
    PURPLE_SOUND_BUDDY_LEAVE = 1,
    PURPLE_SOUND_RECEIVE = 2,
    PURPLE_SOUND_FIRST_RECEIVE = 3,
    PURPLE_SOUND_SEND = 4,
    PURPLE_SOUND_CHAT_JOIN = 5,
    PURPLE_SOUND_CHAT_LEAVE = 6,
    PURPLE_SOUND_CHAT_YOU_SAY = 7,
    PURPLE_SOUND_CHAT_SAY = 8,
    PURPLE_SOUND_POUNCE_DEFAULT = 9,
    PURPLE_SOUND_CHAT_NICK = 10,
    PURPLE_SOUND_GOT_ATTENTION = 11,
    PURPLE_NUM_SOUNDS = 12,
}
pub type PurpleSoundEventID = Enum__PurpleSoundEventID;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleSoundUiOps {
    pub init: ::std::option::Option<extern "C" fn()>,
    pub uninit: ::std::option::Option<extern "C" fn()>,
    pub play_file: ::std::option::Option<unsafe extern "C" fn(filename:
                                                                  *const ::std::os::raw::c_char)>,
    pub play_event: ::std::option::Option<extern "C" fn(event:
                                                            PurpleSoundEventID)>,
    pub _purple_reserved1: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved2: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved3: ::std::option::Option<extern "C" fn()>,
    pub _purple_reserved4: ::std::option::Option<extern "C" fn()>,
}
impl ::std::clone::Clone for Struct__PurpleSoundUiOps {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleSoundUiOps {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleSoundUiOps = Struct__PurpleSoundUiOps;
pub type PurpleTheme = Struct__PurpleTheme;
pub type PurpleThemeClass = Struct__PurpleThemeClass;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleTheme {
    pub parent: GObject,
    pub _priv: gpointer,
}
impl ::std::clone::Clone for Struct__PurpleTheme {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleTheme {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleThemeClass {
    pub parent_class: GObjectClass,
}
impl ::std::clone::Clone for Struct__PurpleThemeClass {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleThemeClass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleSoundTheme = Struct__PurpleSoundTheme;
pub type PurpleSoundThemeClass = Struct__PurpleSoundThemeClass;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleSoundTheme {
    pub parent: PurpleTheme,
    pub _priv: gpointer,
}
impl ::std::clone::Clone for Struct__PurpleSoundTheme {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleSoundTheme {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleSoundThemeClass {
    pub parent_class: PurpleThemeClass,
}
impl ::std::clone::Clone for Struct__PurpleSoundThemeClass {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleSoundThemeClass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleThemeLoader = Struct__PurpleThemeLoader;
pub type PurpleThemeLoaderClass = Struct__PurpleThemeLoaderClass;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleThemeLoader {
    pub parent: GObject,
    pub _priv: gpointer,
}
impl ::std::clone::Clone for Struct__PurpleThemeLoader {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleThemeLoader {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleThemeLoaderClass {
    pub parent_class: GObjectClass,
    pub purple_theme_loader_build: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                  *const gchar)>,
}
impl ::std::clone::Clone for Struct__PurpleThemeLoaderClass {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleThemeLoaderClass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PurpleSoundThemeLoader = Struct__PurpleSoundThemeLoader;
pub type PurpleSoundThemeLoaderClass = Struct__PurpleSoundThemeLoaderClass;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleSoundThemeLoader {
    pub parent: PurpleThemeLoader,
}
impl ::std::clone::Clone for Struct__PurpleSoundThemeLoader {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleSoundThemeLoader {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleSoundThemeLoaderClass {
    pub parent_class: PurpleThemeLoaderClass,
}
impl ::std::clone::Clone for Struct__PurpleSoundThemeLoaderClass {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleSoundThemeLoaderClass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__PurpleStringref { }
pub type PurpleStringref = Struct__PurpleStringref;
pub type PurpleStunNatDiscovery = Struct__PurpleStunNatDiscovery;
#[derive(Clone, Copy)]
#[repr(i32)]
pub enum Enum_Unnamed218 {
    PURPLE_STUN_STATUS_UNDISCOVERED = -1,
    PURPLE_STUN_STATUS_UNKNOWN = 0,
    PURPLE_STUN_STATUS_DISCOVERING = 1,
    PURPLE_STUN_STATUS_DISCOVERED = 2,
}
pub type PurpleStunStatus = Enum_Unnamed218;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed219 {
    PURPLE_STUN_NAT_TYPE_PUBLIC_IP = 0,
    PURPLE_STUN_NAT_TYPE_UNKNOWN_NAT = 1,
    PURPLE_STUN_NAT_TYPE_FULL_CONE = 2,
    PURPLE_STUN_NAT_TYPE_RESTRICTED_CONE = 3,
    PURPLE_STUN_NAT_TYPE_PORT_RESTRICTED_CONE = 4,
    PURPLE_STUN_NAT_TYPE_SYMMETRIC = 5,
}
pub type PurpleStunNatType = Enum_Unnamed219;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleStunNatDiscovery {
    pub status: PurpleStunStatus,
    pub _type: PurpleStunNatType,
    pub publicip: [::std::os::raw::c_char; 16usize],
    pub servername: *mut ::std::os::raw::c_char,
    pub lookup_time: time_t,
}
impl ::std::clone::Clone for Struct__PurpleStunNatDiscovery {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleStunNatDiscovery {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type StunCallback =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *mut PurpleStunNatDiscovery)>;
pub type PTFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PurpleTheme)>;
pub type PurpleThemeManager = Struct__PurpleThemeManager;
pub type PurpleThemeManagerClass = Struct__PurpleThemeManagerClass;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleThemeManager {
    pub parent: GObject,
}
impl ::std::clone::Clone for Struct__PurpleThemeManager {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleThemeManager {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PurpleThemeManagerClass {
    pub parent_class: GObjectClass,
}
impl ::std::clone::Clone for Struct__PurpleThemeManagerClass {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PurpleThemeManagerClass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__UPnPMappingAddRemove { }
pub type UPnPMappingAddRemove = Struct__UPnPMappingAddRemove;
pub type PurpleUPnPCallback =
    ::std::option::Option<extern "C" fn(success: gboolean, data: gpointer)>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
    pub static mut __daylight: ::std::os::raw::c_int;
    pub static mut __timezone: ::std::os::raw::c_long;
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
    pub static mut daylight: ::std::os::raw::c_int;
    pub static mut timezone: ::std::os::raw::c_long;
    pub static mut _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
    pub static mut sys_siglist: [*const ::std::os::raw::c_char; 65usize];
    pub static mut g_mem_gc_friendly: gboolean;
    pub static mut glib_mem_profiler_table: *mut GMemVTable;
    pub static mut g_timeout_funcs: GSourceFuncs;
    pub static mut g_child_watch_funcs: GSourceFuncs;
    pub static mut g_idle_funcs: GSourceFuncs;
    pub static mut g_unix_signal_funcs: GSourceFuncs;
    pub static mut g_unix_fd_source_funcs: GSourceFuncs;
    pub static g_utf8_skip: *const gchar;
    pub static mut g_io_watch_funcs: GSourceFuncs;
    pub static g_ascii_table: *const guint16;
    pub static g_test_config_vars: *const GTestConfig;
    pub static glib_major_version: guint;
    pub static glib_minor_version: guint;
    pub static glib_micro_version: guint;
    pub static glib_interface_age: guint;
    pub static glib_binary_age: guint;
    pub static mut g_thread_functions_for_glib_use: GThreadFunctions;
    pub static mut g_thread_use_default_impl: gboolean;
    pub static mut g_thread_gettime:
               ::std::option::Option<extern "C" fn() -> guint64>;
    pub static mut g_threads_got_initialized: gboolean;
    pub static mut g_param_spec_types: *mut GType;
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: *const *const ::std::os::raw::c_char;
    pub static purple_major_version: guint;
    pub static purple_minor_version: guint;
    pub static purple_micro_version: guint;
}
extern "C" {
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t)
     -> ::std::os::raw::c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut ::std::os::raw::c_char, __maxsize: size_t,
                    __format: *const ::std::os::raw::c_char,
                    __tp: *const Struct_tm) -> size_t;
    pub fn strftime_l(__s: *mut ::std::os::raw::c_char, __maxsize: size_t,
                      __format: *const ::std::os::raw::c_char,
                      __tp: *const Struct_tm, __loc: __locale_t) -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn asctime(__tp: *const Struct_tm) -> *mut ::std::os::raw::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
    pub fn asctime_r(__tp: *const Struct_tm,
                     __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tzset();
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn nanosleep(__requested_time: *const Struct_timespec,
                     __remaining: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::std::os::raw::c_int,
                           __req: *const Struct_timespec,
                           __rem: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::std::os::raw::c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t) -> ::std::os::raw::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: ::std::os::raw::c_int,
                         __value: *const Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec)
     -> ::std::os::raw::c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec)
     -> ::std::os::raw::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
    pub fn timespec_get(__ts: *mut Struct_timespec,
                        __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn g_array_new(zero_terminated: gboolean, clear_: gboolean,
                       element_size: guint) -> *mut GArray;
    pub fn g_array_sized_new(zero_terminated: gboolean, clear_: gboolean,
                             element_size: guint, reserved_size: guint)
     -> *mut GArray;
    pub fn g_array_free(array: *mut GArray, free_segment: gboolean)
     -> *mut gchar;
    pub fn g_array_ref(array: *mut GArray) -> *mut GArray;
    pub fn g_array_unref(array: *mut GArray);
    pub fn g_array_get_element_size(array: *mut GArray) -> guint;
    pub fn g_array_append_vals(array: *mut GArray, data: gconstpointer,
                               len: guint) -> *mut GArray;
    pub fn g_array_prepend_vals(array: *mut GArray, data: gconstpointer,
                                len: guint) -> *mut GArray;
    pub fn g_array_insert_vals(array: *mut GArray, index_: guint,
                               data: gconstpointer, len: guint)
     -> *mut GArray;
    pub fn g_array_set_size(array: *mut GArray, length: guint) -> *mut GArray;
    pub fn g_array_remove_index(array: *mut GArray, index_: guint)
     -> *mut GArray;
    pub fn g_array_remove_index_fast(array: *mut GArray, index_: guint)
     -> *mut GArray;
    pub fn g_array_remove_range(array: *mut GArray, index_: guint,
                                length: guint) -> *mut GArray;
    pub fn g_array_sort(array: *mut GArray, compare_func: GCompareFunc);
    pub fn g_array_sort_with_data(array: *mut GArray,
                                  compare_func: GCompareDataFunc,
                                  user_data: gpointer);
    pub fn g_array_set_clear_func(array: *mut GArray,
                                  clear_func: GDestroyNotify);
    pub fn g_ptr_array_new() -> *mut GPtrArray;
    pub fn g_ptr_array_new_with_free_func(element_free_func: GDestroyNotify)
     -> *mut GPtrArray;
    pub fn g_ptr_array_sized_new(reserved_size: guint) -> *mut GPtrArray;
    pub fn g_ptr_array_new_full(reserved_size: guint,
                                element_free_func: GDestroyNotify)
     -> *mut GPtrArray;
    pub fn g_ptr_array_free(array: *mut GPtrArray, free_seg: gboolean)
     -> *mut gpointer;
    pub fn g_ptr_array_ref(array: *mut GPtrArray) -> *mut GPtrArray;
    pub fn g_ptr_array_unref(array: *mut GPtrArray);
    pub fn g_ptr_array_set_free_func(array: *mut GPtrArray,
                                     element_free_func: GDestroyNotify);
    pub fn g_ptr_array_set_size(array: *mut GPtrArray, length: gint);
    pub fn g_ptr_array_remove_index(array: *mut GPtrArray, index_: guint)
     -> gpointer;
    pub fn g_ptr_array_remove_index_fast(array: *mut GPtrArray, index_: guint)
     -> gpointer;
    pub fn g_ptr_array_remove(array: *mut GPtrArray, data: gpointer)
     -> gboolean;
    pub fn g_ptr_array_remove_fast(array: *mut GPtrArray, data: gpointer)
     -> gboolean;
    pub fn g_ptr_array_remove_range(array: *mut GPtrArray, index_: guint,
                                    length: guint) -> *mut GPtrArray;
    pub fn g_ptr_array_add(array: *mut GPtrArray, data: gpointer);
    pub fn g_ptr_array_insert(array: *mut GPtrArray, index_: gint,
                              data: gpointer);
    pub fn g_ptr_array_sort(array: *mut GPtrArray,
                            compare_func: GCompareFunc);
    pub fn g_ptr_array_sort_with_data(array: *mut GPtrArray,
                                      compare_func: GCompareDataFunc,
                                      user_data: gpointer);
    pub fn g_ptr_array_foreach(array: *mut GPtrArray, func: GFunc,
                               user_data: gpointer);
    pub fn g_byte_array_new() -> *mut GByteArray;
    pub fn g_byte_array_new_take(data: *mut guint8, len: gsize)
     -> *mut GByteArray;
    pub fn g_byte_array_sized_new(reserved_size: guint) -> *mut GByteArray;
    pub fn g_byte_array_free(array: *mut GByteArray, free_segment: gboolean)
     -> *mut guint8;
    pub fn g_byte_array_free_to_bytes(array: *mut GByteArray) -> *mut GBytes;
    pub fn g_byte_array_ref(array: *mut GByteArray) -> *mut GByteArray;
    pub fn g_byte_array_unref(array: *mut GByteArray);
    pub fn g_byte_array_append(array: *mut GByteArray, data: *const guint8,
                               len: guint) -> *mut GByteArray;
    pub fn g_byte_array_prepend(array: *mut GByteArray, data: *const guint8,
                                len: guint) -> *mut GByteArray;
    pub fn g_byte_array_set_size(array: *mut GByteArray, length: guint)
     -> *mut GByteArray;
    pub fn g_byte_array_remove_index(array: *mut GByteArray, index_: guint)
     -> *mut GByteArray;
    pub fn g_byte_array_remove_index_fast(array: *mut GByteArray,
                                          index_: guint) -> *mut GByteArray;
    pub fn g_byte_array_remove_range(array: *mut GByteArray, index_: guint,
                                     length: guint) -> *mut GByteArray;
    pub fn g_byte_array_sort(array: *mut GByteArray,
                             compare_func: GCompareFunc);
    pub fn g_byte_array_sort_with_data(array: *mut GByteArray,
                                       compare_func: GCompareDataFunc,
                                       user_data: gpointer);
    pub fn g_atomic_int_get(atomic: *const gint) -> gint;
    pub fn g_atomic_int_set(atomic: *mut gint, newval: gint);
    pub fn g_atomic_int_inc(atomic: *mut gint);
    pub fn g_atomic_int_dec_and_test(atomic: *mut gint) -> gboolean;
    pub fn g_atomic_int_compare_and_exchange(atomic: *mut gint, oldval: gint,
                                             newval: gint) -> gboolean;
    pub fn g_atomic_int_add(atomic: *mut gint, val: gint) -> gint;
    pub fn g_atomic_int_and(atomic: *mut guint, val: guint) -> guint;
    pub fn g_atomic_int_or(atomic: *mut guint, val: guint) -> guint;
    pub fn g_atomic_int_xor(atomic: *mut guint, val: guint) -> guint;
    pub fn g_atomic_pointer_get(atomic: *const ::std::os::raw::c_void)
     -> gpointer;
    pub fn g_atomic_pointer_set(atomic: *mut ::std::os::raw::c_void,
                                newval: gpointer);
    pub fn g_atomic_pointer_compare_and_exchange(atomic:
                                                     *mut ::std::os::raw::c_void,
                                                 oldval: gpointer,
                                                 newval: gpointer)
     -> gboolean;
    pub fn g_atomic_pointer_add(atomic: *mut ::std::os::raw::c_void,
                                val: gssize) -> gssize;
    pub fn g_atomic_pointer_and(atomic: *mut ::std::os::raw::c_void,
                                val: gsize) -> gsize;
    pub fn g_atomic_pointer_or(atomic: *mut ::std::os::raw::c_void,
                               val: gsize) -> gsize;
    pub fn g_atomic_pointer_xor(atomic: *mut ::std::os::raw::c_void,
                                val: gsize) -> gsize;
    pub fn g_atomic_int_exchange_and_add(atomic: *mut gint, val: gint)
     -> gint;
    pub fn g_quark_try_string(string: *const gchar) -> GQuark;
    pub fn g_quark_from_static_string(string: *const gchar) -> GQuark;
    pub fn g_quark_from_string(string: *const gchar) -> GQuark;
    pub fn g_quark_to_string(quark: GQuark) -> *const gchar;
    pub fn g_intern_string(string: *const gchar) -> *const gchar;
    pub fn g_intern_static_string(string: *const gchar) -> *const gchar;
    pub fn g_error_new(domain: GQuark, code: gint, format: *const gchar, ...)
     -> *mut GError;
    pub fn g_error_new_literal(domain: GQuark, code: gint,
                               message: *const gchar) -> *mut GError;
    pub fn g_error_new_valist(domain: GQuark, code: gint,
                              format: *const gchar, args: va_list)
     -> *mut GError;
    pub fn g_error_free(error: *mut GError);
    pub fn g_error_copy(error: *const GError) -> *mut GError;
    pub fn g_error_matches(error: *const GError, domain: GQuark, code: gint)
     -> gboolean;
    pub fn g_set_error(err: *mut *mut GError, domain: GQuark, code: gint,
                       format: *const gchar, ...);
    pub fn g_set_error_literal(err: *mut *mut GError, domain: GQuark,
                               code: gint, message: *const gchar);
    pub fn g_propagate_error(dest: *mut *mut GError, src: *mut GError);
    pub fn g_clear_error(err: *mut *mut GError);
    pub fn g_prefix_error(err: *mut *mut GError, format: *const gchar, ...);
    pub fn g_propagate_prefixed_error(dest: *mut *mut GError,
                                      src: *mut GError,
                                      format: *const gchar, ...);
    pub fn g_get_user_name() -> *const gchar;
    pub fn g_get_real_name() -> *const gchar;
    pub fn g_get_home_dir() -> *const gchar;
    pub fn g_get_tmp_dir() -> *const gchar;
    pub fn g_get_host_name() -> *const gchar;
    pub fn g_get_prgname() -> *const gchar;
    pub fn g_set_prgname(prgname: *const gchar);
    pub fn g_get_application_name() -> *const gchar;
    pub fn g_set_application_name(application_name: *const gchar);
    pub fn g_reload_user_special_dirs_cache();
    pub fn g_get_user_data_dir() -> *const gchar;
    pub fn g_get_user_config_dir() -> *const gchar;
    pub fn g_get_user_cache_dir() -> *const gchar;
    pub fn g_get_system_data_dirs() -> *const *const gchar;
    pub fn g_get_system_config_dirs() -> *const *const gchar;
    pub fn g_get_user_runtime_dir() -> *const gchar;
    pub fn g_get_user_special_dir(directory: GUserDirectory) -> *const gchar;
    pub fn g_parse_debug_string(string: *const gchar, keys: *const GDebugKey,
                                nkeys: guint) -> guint;
    pub fn g_snprintf(string: *mut gchar, n: gulong,
                      format: *const gchar, ...) -> gint;
    pub fn g_vsnprintf(string: *mut gchar, n: gulong, format: *const gchar,
                       args: va_list) -> gint;
    pub fn g_nullify_pointer(nullify_location: *mut gpointer);
    pub fn g_format_size_full(size: guint64, flags: GFormatSizeFlags)
     -> *mut gchar;
    pub fn g_format_size(size: guint64) -> *mut gchar;
    pub fn g_format_size_for_display(size: goffset) -> *mut gchar;
    pub fn g_atexit(func: GVoidFunc);
    pub fn g_find_program_in_path(program: *const gchar) -> *mut gchar;
    pub fn g_bit_nth_lsf(mask: gulong, nth_bit: gint) -> gint;
    pub fn g_bit_nth_msf(mask: gulong, nth_bit: gint) -> gint;
    pub fn g_bit_storage(number: gulong) -> guint;
    pub fn g_thread_error_quark() -> GQuark;
    pub fn g_thread_ref(thread: *mut GThread) -> *mut GThread;
    pub fn g_thread_unref(thread: *mut GThread);
    pub fn g_thread_new(name: *const gchar, func: GThreadFunc, data: gpointer)
     -> *mut GThread;
    pub fn g_thread_try_new(name: *const gchar, func: GThreadFunc,
                            data: gpointer, error: *mut *mut GError)
     -> *mut GThread;
    pub fn g_thread_self() -> *mut GThread;
    pub fn g_thread_exit(retval: gpointer);
    pub fn g_thread_join(thread: *mut GThread) -> gpointer;
    pub fn g_thread_yield();
    pub fn g_mutex_init(mutex: *mut GMutex);
    pub fn g_mutex_clear(mutex: *mut GMutex);
    pub fn g_mutex_lock(mutex: *mut GMutex);
    pub fn g_mutex_trylock(mutex: *mut GMutex) -> gboolean;
    pub fn g_mutex_unlock(mutex: *mut GMutex);
    pub fn g_rw_lock_init(rw_lock: *mut GRWLock);
    pub fn g_rw_lock_clear(rw_lock: *mut GRWLock);
    pub fn g_rw_lock_writer_lock(rw_lock: *mut GRWLock);
    pub fn g_rw_lock_writer_trylock(rw_lock: *mut GRWLock) -> gboolean;
    pub fn g_rw_lock_writer_unlock(rw_lock: *mut GRWLock);
    pub fn g_rw_lock_reader_lock(rw_lock: *mut GRWLock);
    pub fn g_rw_lock_reader_trylock(rw_lock: *mut GRWLock) -> gboolean;
    pub fn g_rw_lock_reader_unlock(rw_lock: *mut GRWLock);
    pub fn g_rec_mutex_init(rec_mutex: *mut GRecMutex);
    pub fn g_rec_mutex_clear(rec_mutex: *mut GRecMutex);
    pub fn g_rec_mutex_lock(rec_mutex: *mut GRecMutex);
    pub fn g_rec_mutex_trylock(rec_mutex: *mut GRecMutex) -> gboolean;
    pub fn g_rec_mutex_unlock(rec_mutex: *mut GRecMutex);
    pub fn g_cond_init(cond: *mut GCond);
    pub fn g_cond_clear(cond: *mut GCond);
    pub fn g_cond_wait(cond: *mut GCond, mutex: *mut GMutex);
    pub fn g_cond_signal(cond: *mut GCond);
    pub fn g_cond_broadcast(cond: *mut GCond);
    pub fn g_cond_wait_until(cond: *mut GCond, mutex: *mut GMutex,
                             end_time: gint64) -> gboolean;
    pub fn g_private_get(key: *mut GPrivate) -> gpointer;
    pub fn g_private_set(key: *mut GPrivate, value: gpointer);
    pub fn g_private_replace(key: *mut GPrivate, value: gpointer);
    pub fn g_once_impl(once: *mut GOnce, func: GThreadFunc, arg: gpointer)
     -> gpointer;
    pub fn g_once_init_enter(location: *mut ::std::os::raw::c_void)
     -> gboolean;
    pub fn g_once_init_leave(location: *mut ::std::os::raw::c_void,
                             result: gsize);
    pub fn g_get_num_processors() -> guint;
    pub fn g_async_queue_new() -> *mut GAsyncQueue;
    pub fn g_async_queue_new_full(item_free_func: GDestroyNotify)
     -> *mut GAsyncQueue;
    pub fn g_async_queue_lock(queue: *mut GAsyncQueue);
    pub fn g_async_queue_unlock(queue: *mut GAsyncQueue);
    pub fn g_async_queue_ref(queue: *mut GAsyncQueue) -> *mut GAsyncQueue;
    pub fn g_async_queue_unref(queue: *mut GAsyncQueue);
    pub fn g_async_queue_ref_unlocked(queue: *mut GAsyncQueue);
    pub fn g_async_queue_unref_and_unlock(queue: *mut GAsyncQueue);
    pub fn g_async_queue_push(queue: *mut GAsyncQueue, data: gpointer);
    pub fn g_async_queue_push_unlocked(queue: *mut GAsyncQueue,
                                       data: gpointer);
    pub fn g_async_queue_push_sorted(queue: *mut GAsyncQueue, data: gpointer,
                                     func: GCompareDataFunc,
                                     user_data: gpointer);
    pub fn g_async_queue_push_sorted_unlocked(queue: *mut GAsyncQueue,
                                              data: gpointer,
                                              func: GCompareDataFunc,
                                              user_data: gpointer);
    pub fn g_async_queue_pop(queue: *mut GAsyncQueue) -> gpointer;
    pub fn g_async_queue_pop_unlocked(queue: *mut GAsyncQueue) -> gpointer;
    pub fn g_async_queue_try_pop(queue: *mut GAsyncQueue) -> gpointer;
    pub fn g_async_queue_try_pop_unlocked(queue: *mut GAsyncQueue)
     -> gpointer;
    pub fn g_async_queue_timeout_pop(queue: *mut GAsyncQueue,
                                     timeout: guint64) -> gpointer;
    pub fn g_async_queue_timeout_pop_unlocked(queue: *mut GAsyncQueue,
                                              timeout: guint64) -> gpointer;
    pub fn g_async_queue_length(queue: *mut GAsyncQueue) -> gint;
    pub fn g_async_queue_length_unlocked(queue: *mut GAsyncQueue) -> gint;
    pub fn g_async_queue_sort(queue: *mut GAsyncQueue, func: GCompareDataFunc,
                              user_data: gpointer);
    pub fn g_async_queue_sort_unlocked(queue: *mut GAsyncQueue,
                                       func: GCompareDataFunc,
                                       user_data: gpointer);
    pub fn g_async_queue_remove(queue: *mut GAsyncQueue, item: gpointer)
     -> gboolean;
    pub fn g_async_queue_remove_unlocked(queue: *mut GAsyncQueue,
                                         item: gpointer) -> gboolean;
    pub fn g_async_queue_push_front(queue: *mut GAsyncQueue, item: gpointer);
    pub fn g_async_queue_push_front_unlocked(queue: *mut GAsyncQueue,
                                             item: gpointer);
    pub fn g_async_queue_timed_pop(queue: *mut GAsyncQueue,
                                   end_time: *mut GTimeVal) -> gpointer;
    pub fn g_async_queue_timed_pop_unlocked(queue: *mut GAsyncQueue,
                                            end_time: *mut GTimeVal)
     -> gpointer;
    pub fn __sigismember(arg1: *const __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __sigaddset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __sigdelset(arg1: *mut __sigset_t, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __sysv_signal(__sig: ::std::os::raw::c_int,
                         __handler: __sighandler_t) -> __sighandler_t;
    pub fn signal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn kill(__pid: __pid_t, __sig: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn killpg(__pgrp: __pid_t, __sig: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ssignal(__sig: ::std::os::raw::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn psignal(__sig: ::std::os::raw::c_int,
                   __s: *const ::std::os::raw::c_char);
    pub fn psiginfo(__pinfo: *const siginfo_t,
                    __s: *const ::std::os::raw::c_char);
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn siggetmask() -> ::std::os::raw::c_int;
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sigismember(__set: *const sigset_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sigprocmask(__how: ::std::os::raw::c_int, __set: *const sigset_t,
                       __oset: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
    pub fn sigaction(__sig: ::std::os::raw::c_int,
                     __act: *const Struct_sigaction,
                     __oact: *mut Struct_sigaction) -> ::std::os::raw::c_int;
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
    pub fn sigwait(__set: *const sigset_t, __sig: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t)
     -> ::std::os::raw::c_int;
    pub fn sigtimedwait(__set: *const sigset_t, __info: *mut siginfo_t,
                        __timeout: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn sigqueue(__pid: __pid_t, __sig: ::std::os::raw::c_int,
                    __val: Union_sigval) -> ::std::os::raw::c_int;
    pub fn sigreturn(__scp: *mut Struct_sigcontext) -> ::std::os::raw::c_int;
    pub fn siginterrupt(__sig: ::std::os::raw::c_int,
                        __interrupt: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sigstack(__ss: *mut Struct_sigstack, __oss: *mut Struct_sigstack)
     -> ::std::os::raw::c_int;
    pub fn sigaltstack(__ss: *const Struct_sigaltstack,
                       __oss: *mut Struct_sigaltstack)
     -> ::std::os::raw::c_int;
    pub fn pthread_sigmask(__how: ::std::os::raw::c_int,
                           __newmask: *const __sigset_t,
                           __oldmask: *mut __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_kill(__threadid: pthread_t, __signo: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
    pub fn g_on_error_query(prg_name: *const gchar);
    pub fn g_on_error_stack_trace(prg_name: *const gchar);
    pub fn g_base64_encode_step(_in: *const guchar, len: gsize,
                                break_lines: gboolean, out: *mut gchar,
                                state: *mut gint, save: *mut gint) -> gsize;
    pub fn g_base64_encode_close(break_lines: gboolean, out: *mut gchar,
                                 state: *mut gint, save: *mut gint) -> gsize;
    pub fn g_base64_encode(data: *const guchar, len: gsize) -> *mut gchar;
    pub fn g_base64_decode_step(_in: *const gchar, len: gsize,
                                out: *mut guchar, state: *mut gint,
                                save: *mut guint) -> gsize;
    pub fn g_base64_decode(text: *const gchar, out_len: *mut gsize)
     -> *mut guchar;
    pub fn g_base64_decode_inplace(text: *mut gchar, out_len: *mut gsize)
     -> *mut guchar;
    pub fn g_bit_lock(address: *mut gint, lock_bit: gint);
    pub fn g_bit_trylock(address: *mut gint, lock_bit: gint) -> gboolean;
    pub fn g_bit_unlock(address: *mut gint, lock_bit: gint);
    pub fn g_pointer_bit_lock(address: *mut ::std::os::raw::c_void,
                              lock_bit: gint);
    pub fn g_pointer_bit_trylock(address: *mut ::std::os::raw::c_void,
                                 lock_bit: gint) -> gboolean;
    pub fn g_pointer_bit_unlock(address: *mut ::std::os::raw::c_void,
                                lock_bit: gint);
    pub fn g_bookmark_file_error_quark() -> GQuark;
    pub fn g_bookmark_file_new() -> *mut GBookmarkFile;
    pub fn g_bookmark_file_free(bookmark: *mut GBookmarkFile);
    pub fn g_bookmark_file_load_from_file(bookmark: *mut GBookmarkFile,
                                          filename: *const gchar,
                                          error: *mut *mut GError)
     -> gboolean;
    pub fn g_bookmark_file_load_from_data(bookmark: *mut GBookmarkFile,
                                          data: *const gchar, length: gsize,
                                          error: *mut *mut GError)
     -> gboolean;
    pub fn g_bookmark_file_load_from_data_dirs(bookmark: *mut GBookmarkFile,
                                               file: *const gchar,
                                               full_path: *mut *mut gchar,
                                               error: *mut *mut GError)
     -> gboolean;
    pub fn g_bookmark_file_to_data(bookmark: *mut GBookmarkFile,
                                   length: *mut gsize,
                                   error: *mut *mut GError) -> *mut gchar;
    pub fn g_bookmark_file_to_file(bookmark: *mut GBookmarkFile,
                                   filename: *const gchar,
                                   error: *mut *mut GError) -> gboolean;
    pub fn g_bookmark_file_set_title(bookmark: *mut GBookmarkFile,
                                     uri: *const gchar, title: *const gchar);
    pub fn g_bookmark_file_get_title(bookmark: *mut GBookmarkFile,
                                     uri: *const gchar,
                                     error: *mut *mut GError) -> *mut gchar;
    pub fn g_bookmark_file_set_description(bookmark: *mut GBookmarkFile,
                                           uri: *const gchar,
                                           description: *const gchar);
    pub fn g_bookmark_file_get_description(bookmark: *mut GBookmarkFile,
                                           uri: *const gchar,
                                           error: *mut *mut GError)
     -> *mut gchar;
    pub fn g_bookmark_file_set_mime_type(bookmark: *mut GBookmarkFile,
                                         uri: *const gchar,
                                         mime_type: *const gchar);
    pub fn g_bookmark_file_get_mime_type(bookmark: *mut GBookmarkFile,
                                         uri: *const gchar,
                                         error: *mut *mut GError)
     -> *mut gchar;
    pub fn g_bookmark_file_set_groups(bookmark: *mut GBookmarkFile,
                                      uri: *const gchar,
                                      groups: *mut *const gchar,
                                      length: gsize);
    pub fn g_bookmark_file_add_group(bookmark: *mut GBookmarkFile,
                                     uri: *const gchar, group: *const gchar);
    pub fn g_bookmark_file_has_group(bookmark: *mut GBookmarkFile,
                                     uri: *const gchar, group: *const gchar,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_bookmark_file_get_groups(bookmark: *mut GBookmarkFile,
                                      uri: *const gchar, length: *mut gsize,
                                      error: *mut *mut GError)
     -> *mut *mut gchar;
    pub fn g_bookmark_file_add_application(bookmark: *mut GBookmarkFile,
                                           uri: *const gchar,
                                           name: *const gchar,
                                           exec: *const gchar);
    pub fn g_bookmark_file_has_application(bookmark: *mut GBookmarkFile,
                                           uri: *const gchar,
                                           name: *const gchar,
                                           error: *mut *mut GError)
     -> gboolean;
    pub fn g_bookmark_file_get_applications(bookmark: *mut GBookmarkFile,
                                            uri: *const gchar,
                                            length: *mut gsize,
                                            error: *mut *mut GError)
     -> *mut *mut gchar;
    pub fn g_bookmark_file_set_app_info(bookmark: *mut GBookmarkFile,
                                        uri: *const gchar, name: *const gchar,
                                        exec: *const gchar, count: gint,
                                        stamp: time_t,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_bookmark_file_get_app_info(bookmark: *mut GBookmarkFile,
                                        uri: *const gchar, name: *const gchar,
                                        exec: *mut *mut gchar,
                                        count: *mut guint, stamp: *mut time_t,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_bookmark_file_set_is_private(bookmark: *mut GBookmarkFile,
                                          uri: *const gchar,
                                          is_private: gboolean);
    pub fn g_bookmark_file_get_is_private(bookmark: *mut GBookmarkFile,
                                          uri: *const gchar,
                                          error: *mut *mut GError)
     -> gboolean;
    pub fn g_bookmark_file_set_icon(bookmark: *mut GBookmarkFile,
                                    uri: *const gchar, href: *const gchar,
                                    mime_type: *const gchar);
    pub fn g_bookmark_file_get_icon(bookmark: *mut GBookmarkFile,
                                    uri: *const gchar, href: *mut *mut gchar,
                                    mime_type: *mut *mut gchar,
                                    error: *mut *mut GError) -> gboolean;
    pub fn g_bookmark_file_set_added(bookmark: *mut GBookmarkFile,
                                     uri: *const gchar, added: time_t);
    pub fn g_bookmark_file_get_added(bookmark: *mut GBookmarkFile,
                                     uri: *const gchar,
                                     error: *mut *mut GError) -> time_t;
    pub fn g_bookmark_file_set_modified(bookmark: *mut GBookmarkFile,
                                        uri: *const gchar, modified: time_t);
    pub fn g_bookmark_file_get_modified(bookmark: *mut GBookmarkFile,
                                        uri: *const gchar,
                                        error: *mut *mut GError) -> time_t;
    pub fn g_bookmark_file_set_visited(bookmark: *mut GBookmarkFile,
                                       uri: *const gchar, visited: time_t);
    pub fn g_bookmark_file_get_visited(bookmark: *mut GBookmarkFile,
                                       uri: *const gchar,
                                       error: *mut *mut GError) -> time_t;
    pub fn g_bookmark_file_has_item(bookmark: *mut GBookmarkFile,
                                    uri: *const gchar) -> gboolean;
    pub fn g_bookmark_file_get_size(bookmark: *mut GBookmarkFile) -> gint;
    pub fn g_bookmark_file_get_uris(bookmark: *mut GBookmarkFile,
                                    length: *mut gsize) -> *mut *mut gchar;
    pub fn g_bookmark_file_remove_group(bookmark: *mut GBookmarkFile,
                                        uri: *const gchar,
                                        group: *const gchar,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_bookmark_file_remove_application(bookmark: *mut GBookmarkFile,
                                              uri: *const gchar,
                                              name: *const gchar,
                                              error: *mut *mut GError)
     -> gboolean;
    pub fn g_bookmark_file_remove_item(bookmark: *mut GBookmarkFile,
                                       uri: *const gchar,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_bookmark_file_move_item(bookmark: *mut GBookmarkFile,
                                     old_uri: *const gchar,
                                     new_uri: *const gchar,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_bytes_new(data: gconstpointer, size: gsize) -> *mut GBytes;
    pub fn g_bytes_new_take(data: gpointer, size: gsize) -> *mut GBytes;
    pub fn g_bytes_new_static(data: gconstpointer, size: gsize)
     -> *mut GBytes;
    pub fn g_bytes_new_with_free_func(data: gconstpointer, size: gsize,
                                      free_func: GDestroyNotify,
                                      user_data: gpointer) -> *mut GBytes;
    pub fn g_bytes_new_from_bytes(bytes: *mut GBytes, offset: gsize,
                                  length: gsize) -> *mut GBytes;
    pub fn g_bytes_get_data(bytes: *mut GBytes, size: *mut gsize)
     -> gconstpointer;
    pub fn g_bytes_get_size(bytes: *mut GBytes) -> gsize;
    pub fn g_bytes_ref(bytes: *mut GBytes) -> *mut GBytes;
    pub fn g_bytes_unref(bytes: *mut GBytes);
    pub fn g_bytes_unref_to_data(bytes: *mut GBytes, size: *mut gsize)
     -> gpointer;
    pub fn g_bytes_unref_to_array(bytes: *mut GBytes) -> *mut GByteArray;
    pub fn g_bytes_hash(bytes: gconstpointer) -> guint;
    pub fn g_bytes_equal(bytes1: gconstpointer, bytes2: gconstpointer)
     -> gboolean;
    pub fn g_bytes_compare(bytes1: gconstpointer, bytes2: gconstpointer)
     -> gint;
    pub fn g_get_charset(charset: *mut *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn g_get_codeset() -> *mut gchar;
    pub fn g_get_language_names() -> *const *const gchar;
    pub fn g_get_locale_variants(locale: *const gchar) -> *mut *mut gchar;
    pub fn g_checksum_type_get_length(checksum_type: GChecksumType) -> gssize;
    pub fn g_checksum_new(checksum_type: GChecksumType) -> *mut GChecksum;
    pub fn g_checksum_reset(checksum: *mut GChecksum);
    pub fn g_checksum_copy(checksum: *const GChecksum) -> *mut GChecksum;
    pub fn g_checksum_free(checksum: *mut GChecksum);
    pub fn g_checksum_update(checksum: *mut GChecksum, data: *const guchar,
                             length: gssize);
    pub fn g_checksum_get_string(checksum: *mut GChecksum) -> *const gchar;
    pub fn g_checksum_get_digest(checksum: *mut GChecksum,
                                 buffer: *mut guint8, digest_len: *mut gsize);
    pub fn g_compute_checksum_for_data(checksum_type: GChecksumType,
                                       data: *const guchar, length: gsize)
     -> *mut gchar;
    pub fn g_compute_checksum_for_string(checksum_type: GChecksumType,
                                         str: *const gchar, length: gssize)
     -> *mut gchar;
    pub fn g_compute_checksum_for_bytes(checksum_type: GChecksumType,
                                        data: *mut GBytes) -> *mut gchar;
    pub fn g_convert_error_quark() -> GQuark;
    pub fn g_iconv_open(to_codeset: *const gchar, from_codeset: *const gchar)
     -> GIConv;
    pub fn g_iconv(converter: GIConv, inbuf: *mut *mut gchar,
                   inbytes_left: *mut gsize, outbuf: *mut *mut gchar,
                   outbytes_left: *mut gsize) -> gsize;
    pub fn g_iconv_close(converter: GIConv) -> gint;
    pub fn g_convert(str: *const gchar, len: gssize, to_codeset: *const gchar,
                     from_codeset: *const gchar, bytes_read: *mut gsize,
                     bytes_written: *mut gsize, error: *mut *mut GError)
     -> *mut gchar;
    pub fn g_convert_with_iconv(str: *const gchar, len: gssize,
                                converter: GIConv, bytes_read: *mut gsize,
                                bytes_written: *mut gsize,
                                error: *mut *mut GError) -> *mut gchar;
    pub fn g_convert_with_fallback(str: *const gchar, len: gssize,
                                   to_codeset: *const gchar,
                                   from_codeset: *const gchar,
                                   fallback: *const gchar,
                                   bytes_read: *mut gsize,
                                   bytes_written: *mut gsize,
                                   error: *mut *mut GError) -> *mut gchar;
    pub fn g_locale_to_utf8(opsysstring: *const gchar, len: gssize,
                            bytes_read: *mut gsize, bytes_written: *mut gsize,
                            error: *mut *mut GError) -> *mut gchar;
    pub fn g_locale_from_utf8(utf8string: *const gchar, len: gssize,
                              bytes_read: *mut gsize,
                              bytes_written: *mut gsize,
                              error: *mut *mut GError) -> *mut gchar;
    pub fn g_filename_to_utf8(opsysstring: *const gchar, len: gssize,
                              bytes_read: *mut gsize,
                              bytes_written: *mut gsize,
                              error: *mut *mut GError) -> *mut gchar;
    pub fn g_filename_from_utf8(utf8string: *const gchar, len: gssize,
                                bytes_read: *mut gsize,
                                bytes_written: *mut gsize,
                                error: *mut *mut GError) -> *mut gchar;
    pub fn g_filename_from_uri(uri: *const gchar, hostname: *mut *mut gchar,
                               error: *mut *mut GError) -> *mut gchar;
    pub fn g_filename_to_uri(filename: *const gchar, hostname: *const gchar,
                             error: *mut *mut GError) -> *mut gchar;
    pub fn g_filename_display_name(filename: *const gchar) -> *mut gchar;
    pub fn g_get_filename_charsets(charsets: *mut *mut *const gchar)
     -> gboolean;
    pub fn g_filename_display_basename(filename: *const gchar) -> *mut gchar;
    pub fn g_uri_list_extract_uris(uri_list: *const gchar) -> *mut *mut gchar;
    pub fn g_datalist_init(datalist: *mut *mut GData);
    pub fn g_datalist_clear(datalist: *mut *mut GData);
    pub fn g_datalist_id_get_data(datalist: *mut *mut GData, key_id: GQuark)
     -> gpointer;
    pub fn g_datalist_id_set_data_full(datalist: *mut *mut GData,
                                       key_id: GQuark, data: gpointer,
                                       destroy_func: GDestroyNotify);
    pub fn g_datalist_id_dup_data(datalist: *mut *mut GData, key_id: GQuark,
                                  dup_func: GDuplicateFunc,
                                  user_data: gpointer) -> gpointer;
    pub fn g_datalist_id_replace_data(datalist: *mut *mut GData,
                                      key_id: GQuark, oldval: gpointer,
                                      newval: gpointer,
                                      destroy: GDestroyNotify,
                                      old_destroy: *mut GDestroyNotify)
     -> gboolean;
    pub fn g_datalist_id_remove_no_notify(datalist: *mut *mut GData,
                                          key_id: GQuark) -> gpointer;
    pub fn g_datalist_foreach(datalist: *mut *mut GData,
                              func: GDataForeachFunc, user_data: gpointer);
    pub fn g_datalist_set_flags(datalist: *mut *mut GData, flags: guint);
    pub fn g_datalist_unset_flags(datalist: *mut *mut GData, flags: guint);
    pub fn g_datalist_get_flags(datalist: *mut *mut GData) -> guint;
    pub fn g_dataset_destroy(dataset_location: gconstpointer);
    pub fn g_dataset_id_get_data(dataset_location: gconstpointer,
                                 key_id: GQuark) -> gpointer;
    pub fn g_datalist_get_data(datalist: *mut *mut GData, key: *const gchar)
     -> gpointer;
    pub fn g_dataset_id_set_data_full(dataset_location: gconstpointer,
                                      key_id: GQuark, data: gpointer,
                                      destroy_func: GDestroyNotify);
    pub fn g_dataset_id_remove_no_notify(dataset_location: gconstpointer,
                                         key_id: GQuark) -> gpointer;
    pub fn g_dataset_foreach(dataset_location: gconstpointer,
                             func: GDataForeachFunc, user_data: gpointer);
    pub fn g_date_new() -> *mut GDate;
    pub fn g_date_new_dmy(day: GDateDay, month: GDateMonth, year: GDateYear)
     -> *mut GDate;
    pub fn g_date_new_julian(julian_day: guint32) -> *mut GDate;
    pub fn g_date_free(date: *mut GDate);
    pub fn g_date_valid(date: *const GDate) -> gboolean;
    pub fn g_date_valid_day(day: GDateDay) -> gboolean;
    pub fn g_date_valid_month(month: GDateMonth) -> gboolean;
    pub fn g_date_valid_year(year: GDateYear) -> gboolean;
    pub fn g_date_valid_weekday(weekday: GDateWeekday) -> gboolean;
    pub fn g_date_valid_julian(julian_date: guint32) -> gboolean;
    pub fn g_date_valid_dmy(day: GDateDay, month: GDateMonth, year: GDateYear)
     -> gboolean;
    pub fn g_date_get_weekday(date: *const GDate) -> GDateWeekday;
    pub fn g_date_get_month(date: *const GDate) -> GDateMonth;
    pub fn g_date_get_year(date: *const GDate) -> GDateYear;
    pub fn g_date_get_day(date: *const GDate) -> GDateDay;
    pub fn g_date_get_julian(date: *const GDate) -> guint32;
    pub fn g_date_get_day_of_year(date: *const GDate) -> guint;
    pub fn g_date_get_monday_week_of_year(date: *const GDate) -> guint;
    pub fn g_date_get_sunday_week_of_year(date: *const GDate) -> guint;
    pub fn g_date_get_iso8601_week_of_year(date: *const GDate) -> guint;
    pub fn g_date_clear(date: *mut GDate, n_dates: guint);
    pub fn g_date_set_parse(date: *mut GDate, str: *const gchar);
    pub fn g_date_set_time_t(date: *mut GDate, timet: time_t);
    pub fn g_date_set_time_val(date: *mut GDate, timeval: *mut GTimeVal);
    pub fn g_date_set_time(date: *mut GDate, time_: GTime);
    pub fn g_date_set_month(date: *mut GDate, month: GDateMonth);
    pub fn g_date_set_day(date: *mut GDate, day: GDateDay);
    pub fn g_date_set_year(date: *mut GDate, year: GDateYear);
    pub fn g_date_set_dmy(date: *mut GDate, day: GDateDay, month: GDateMonth,
                          y: GDateYear);
    pub fn g_date_set_julian(date: *mut GDate, julian_date: guint32);
    pub fn g_date_is_first_of_month(date: *const GDate) -> gboolean;
    pub fn g_date_is_last_of_month(date: *const GDate) -> gboolean;
    pub fn g_date_add_days(date: *mut GDate, n_days: guint);
    pub fn g_date_subtract_days(date: *mut GDate, n_days: guint);
    pub fn g_date_add_months(date: *mut GDate, n_months: guint);
    pub fn g_date_subtract_months(date: *mut GDate, n_months: guint);
    pub fn g_date_add_years(date: *mut GDate, n_years: guint);
    pub fn g_date_subtract_years(date: *mut GDate, n_years: guint);
    pub fn g_date_is_leap_year(year: GDateYear) -> gboolean;
    pub fn g_date_get_days_in_month(month: GDateMonth, year: GDateYear)
     -> guint8;
    pub fn g_date_get_monday_weeks_in_year(year: GDateYear) -> guint8;
    pub fn g_date_get_sunday_weeks_in_year(year: GDateYear) -> guint8;
    pub fn g_date_days_between(date1: *const GDate, date2: *const GDate)
     -> gint;
    pub fn g_date_compare(lhs: *const GDate, rhs: *const GDate) -> gint;
    pub fn g_date_to_struct_tm(date: *const GDate, tm: *mut Struct_tm);
    pub fn g_date_clamp(date: *mut GDate, min_date: *const GDate,
                        max_date: *const GDate);
    pub fn g_date_order(date1: *mut GDate, date2: *mut GDate);
    pub fn g_date_strftime(s: *mut gchar, slen: gsize, format: *const gchar,
                           date: *const GDate) -> gsize;
    pub fn g_time_zone_new(identifier: *const gchar) -> *mut GTimeZone;
    pub fn g_time_zone_new_utc() -> *mut GTimeZone;
    pub fn g_time_zone_new_local() -> *mut GTimeZone;
    pub fn g_time_zone_ref(tz: *mut GTimeZone) -> *mut GTimeZone;
    pub fn g_time_zone_unref(tz: *mut GTimeZone);
    pub fn g_time_zone_find_interval(tz: *mut GTimeZone, _type: GTimeType,
                                     time_: gint64) -> gint;
    pub fn g_time_zone_adjust_time(tz: *mut GTimeZone, _type: GTimeType,
                                   time_: *mut gint64) -> gint;
    pub fn g_time_zone_get_abbreviation(tz: *mut GTimeZone, interval: gint)
     -> *const gchar;
    pub fn g_time_zone_get_offset(tz: *mut GTimeZone, interval: gint)
     -> gint32;
    pub fn g_time_zone_is_dst(tz: *mut GTimeZone, interval: gint) -> gboolean;
    pub fn g_date_time_unref(datetime: *mut GDateTime);
    pub fn g_date_time_ref(datetime: *mut GDateTime) -> *mut GDateTime;
    pub fn g_date_time_new_now(tz: *mut GTimeZone) -> *mut GDateTime;
    pub fn g_date_time_new_now_local() -> *mut GDateTime;
    pub fn g_date_time_new_now_utc() -> *mut GDateTime;
    pub fn g_date_time_new_from_unix_local(t: gint64) -> *mut GDateTime;
    pub fn g_date_time_new_from_unix_utc(t: gint64) -> *mut GDateTime;
    pub fn g_date_time_new_from_timeval_local(tv: *const GTimeVal)
     -> *mut GDateTime;
    pub fn g_date_time_new_from_timeval_utc(tv: *const GTimeVal)
     -> *mut GDateTime;
    pub fn g_date_time_new(tz: *mut GTimeZone, year: gint, month: gint,
                           day: gint, hour: gint, minute: gint,
                           seconds: gdouble) -> *mut GDateTime;
    pub fn g_date_time_new_local(year: gint, month: gint, day: gint,
                                 hour: gint, minute: gint, seconds: gdouble)
     -> *mut GDateTime;
    pub fn g_date_time_new_utc(year: gint, month: gint, day: gint, hour: gint,
                               minute: gint, seconds: gdouble)
     -> *mut GDateTime;
    pub fn g_date_time_add(datetime: *mut GDateTime, timespan: GTimeSpan)
     -> *mut GDateTime;
    pub fn g_date_time_add_years(datetime: *mut GDateTime, years: gint)
     -> *mut GDateTime;
    pub fn g_date_time_add_months(datetime: *mut GDateTime, months: gint)
     -> *mut GDateTime;
    pub fn g_date_time_add_weeks(datetime: *mut GDateTime, weeks: gint)
     -> *mut GDateTime;
    pub fn g_date_time_add_days(datetime: *mut GDateTime, days: gint)
     -> *mut GDateTime;
    pub fn g_date_time_add_hours(datetime: *mut GDateTime, hours: gint)
     -> *mut GDateTime;
    pub fn g_date_time_add_minutes(datetime: *mut GDateTime, minutes: gint)
     -> *mut GDateTime;
    pub fn g_date_time_add_seconds(datetime: *mut GDateTime, seconds: gdouble)
     -> *mut GDateTime;
    pub fn g_date_time_add_full(datetime: *mut GDateTime, years: gint,
                                months: gint, days: gint, hours: gint,
                                minutes: gint, seconds: gdouble)
     -> *mut GDateTime;
    pub fn g_date_time_compare(dt1: gconstpointer, dt2: gconstpointer)
     -> gint;
    pub fn g_date_time_difference(end: *mut GDateTime, begin: *mut GDateTime)
     -> GTimeSpan;
    pub fn g_date_time_hash(datetime: gconstpointer) -> guint;
    pub fn g_date_time_equal(dt1: gconstpointer, dt2: gconstpointer)
     -> gboolean;
    pub fn g_date_time_get_ymd(datetime: *mut GDateTime, year: *mut gint,
                               month: *mut gint, day: *mut gint);
    pub fn g_date_time_get_year(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_month(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_day_of_month(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_week_numbering_year(datetime: *mut GDateTime)
     -> gint;
    pub fn g_date_time_get_week_of_year(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_day_of_week(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_day_of_year(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_hour(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_minute(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_second(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_microsecond(datetime: *mut GDateTime) -> gint;
    pub fn g_date_time_get_seconds(datetime: *mut GDateTime) -> gdouble;
    pub fn g_date_time_to_unix(datetime: *mut GDateTime) -> gint64;
    pub fn g_date_time_to_timeval(datetime: *mut GDateTime, tv: *mut GTimeVal)
     -> gboolean;
    pub fn g_date_time_get_utc_offset(datetime: *mut GDateTime) -> GTimeSpan;
    pub fn g_date_time_get_timezone_abbreviation(datetime: *mut GDateTime)
     -> *const gchar;
    pub fn g_date_time_is_daylight_savings(datetime: *mut GDateTime)
     -> gboolean;
    pub fn g_date_time_to_timezone(datetime: *mut GDateTime,
                                   tz: *mut GTimeZone) -> *mut GDateTime;
    pub fn g_date_time_to_local(datetime: *mut GDateTime) -> *mut GDateTime;
    pub fn g_date_time_to_utc(datetime: *mut GDateTime) -> *mut GDateTime;
    pub fn g_date_time_format(datetime: *mut GDateTime, format: *const gchar)
     -> *mut gchar;
    pub fn opendir(__name: *const ::std::os::raw::c_char) -> *mut DIR;
    pub fn fdopendir(__fd: ::std::os::raw::c_int) -> *mut DIR;
    pub fn closedir(__dirp: *mut DIR) -> ::std::os::raw::c_int;
    pub fn readdir(__dirp: *mut DIR) -> *mut Struct_dirent;
    pub fn readdir_r(__dirp: *mut DIR, __entry: *mut Struct_dirent,
                     __result: *mut *mut Struct_dirent)
     -> ::std::os::raw::c_int;
    pub fn rewinddir(__dirp: *mut DIR);
    pub fn seekdir(__dirp: *mut DIR, __pos: ::std::os::raw::c_long);
    pub fn telldir(__dirp: *mut DIR) -> ::std::os::raw::c_long;
    pub fn dirfd(__dirp: *mut DIR) -> ::std::os::raw::c_int;
    pub fn scandir(__dir: *const ::std::os::raw::c_char,
                   __namelist: *mut *mut *mut Struct_dirent,
                   __selector:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const Struct_dirent)
                                                 -> ::std::os::raw::c_int>,
                   __cmp:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut *const Struct_dirent,
                                                                  arg2:
                                                                      *mut *const Struct_dirent)
                                                 -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
    pub fn alphasort(__e1: *mut *const Struct_dirent,
                     __e2: *mut *const Struct_dirent)
     -> ::std::os::raw::c_int;
    pub fn getdirentries(__fd: ::std::os::raw::c_int,
                         __buf: *mut ::std::os::raw::c_char, __nbytes: size_t,
                         __basep: *mut __off_t) -> __ssize_t;
    pub fn g_dir_open(path: *const gchar, flags: guint,
                      error: *mut *mut GError) -> *mut GDir;
    pub fn g_dir_read_name(dir: *mut GDir) -> *const gchar;
    pub fn g_dir_rewind(dir: *mut GDir);
    pub fn g_dir_close(dir: *mut GDir);
    pub fn g_getenv(variable: *const gchar) -> *const gchar;
    pub fn g_setenv(variable: *const gchar, value: *const gchar,
                    overwrite: gboolean) -> gboolean;
    pub fn g_unsetenv(variable: *const gchar);
    pub fn g_listenv() -> *mut *mut gchar;
    pub fn g_get_environ() -> *mut *mut gchar;
    pub fn g_environ_getenv(envp: *mut *mut gchar, variable: *const gchar)
     -> *const gchar;
    pub fn g_environ_setenv(envp: *mut *mut gchar, variable: *const gchar,
                            value: *const gchar, overwrite: gboolean)
     -> *mut *mut gchar;
    pub fn g_environ_unsetenv(envp: *mut *mut gchar, variable: *const gchar)
     -> *mut *mut gchar;
    pub fn g_file_error_quark() -> GQuark;
    pub fn g_file_error_from_errno(err_no: gint) -> GFileError;
    pub fn g_file_test(filename: *const gchar, test: GFileTest) -> gboolean;
    pub fn g_file_get_contents(filename: *const gchar,
                               contents: *mut *mut gchar, length: *mut gsize,
                               error: *mut *mut GError) -> gboolean;
    pub fn g_file_set_contents(filename: *const gchar, contents: *const gchar,
                               length: gssize, error: *mut *mut GError)
     -> gboolean;
    pub fn g_file_read_link(filename: *const gchar, error: *mut *mut GError)
     -> *mut gchar;
    pub fn g_mkdtemp(tmpl: *mut gchar) -> *mut gchar;
    pub fn g_mkdtemp_full(tmpl: *mut gchar, mode: gint) -> *mut gchar;
    pub fn g_mkstemp(tmpl: *mut gchar) -> gint;
    pub fn g_mkstemp_full(tmpl: *mut gchar, flags: gint, mode: gint) -> gint;
    pub fn g_file_open_tmp(tmpl: *const gchar, name_used: *mut *mut gchar,
                           error: *mut *mut GError) -> gint;
    pub fn g_dir_make_tmp(tmpl: *const gchar, error: *mut *mut GError)
     -> *mut gchar;
    pub fn g_build_path(separator: *const gchar,
                        first_element: *const gchar, ...) -> *mut gchar;
    pub fn g_build_pathv(separator: *const gchar, args: *mut *mut gchar)
     -> *mut gchar;
    pub fn g_build_filename(first_element: *const gchar, ...) -> *mut gchar;
    pub fn g_build_filenamev(args: *mut *mut gchar) -> *mut gchar;
    pub fn g_mkdir_with_parents(pathname: *const gchar, mode: gint) -> gint;
    pub fn g_path_is_absolute(file_name: *const gchar) -> gboolean;
    pub fn g_path_skip_root(file_name: *const gchar) -> *const gchar;
    pub fn g_basename(file_name: *const gchar) -> *const gchar;
    pub fn g_get_current_dir() -> *mut gchar;
    pub fn g_path_get_basename(file_name: *const gchar) -> *mut gchar;
    pub fn g_path_get_dirname(file_name: *const gchar) -> *mut gchar;
    pub fn g_strip_context(msgid: *const gchar, msgval: *const gchar)
     -> *const gchar;
    pub fn g_dgettext(domain: *const gchar, msgid: *const gchar)
     -> *const gchar;
    pub fn g_dcgettext(domain: *const gchar, msgid: *const gchar,
                       category: gint) -> *const gchar;
    pub fn g_dngettext(domain: *const gchar, msgid: *const gchar,
                       msgid_plural: *const gchar, n: gulong) -> *const gchar;
    pub fn g_dpgettext(domain: *const gchar, msgctxtid: *const gchar,
                       msgidoffset: gsize) -> *const gchar;
    pub fn g_dpgettext2(domain: *const gchar, context: *const gchar,
                        msgid: *const gchar) -> *const gchar;
    pub fn g_free(mem: gpointer);
    pub fn g_clear_pointer(pp: *mut gpointer, destroy: GDestroyNotify);
    pub fn g_malloc(n_bytes: gsize) -> gpointer;
    pub fn g_malloc0(n_bytes: gsize) -> gpointer;
    pub fn g_realloc(mem: gpointer, n_bytes: gsize) -> gpointer;
    pub fn g_try_malloc(n_bytes: gsize) -> gpointer;
    pub fn g_try_malloc0(n_bytes: gsize) -> gpointer;
    pub fn g_try_realloc(mem: gpointer, n_bytes: gsize) -> gpointer;
    pub fn g_malloc_n(n_blocks: gsize, n_block_bytes: gsize) -> gpointer;
    pub fn g_malloc0_n(n_blocks: gsize, n_block_bytes: gsize) -> gpointer;
    pub fn g_realloc_n(mem: gpointer, n_blocks: gsize, n_block_bytes: gsize)
     -> gpointer;
    pub fn g_try_malloc_n(n_blocks: gsize, n_block_bytes: gsize) -> gpointer;
    pub fn g_try_malloc0_n(n_blocks: gsize, n_block_bytes: gsize) -> gpointer;
    pub fn g_try_realloc_n(mem: gpointer, n_blocks: gsize,
                           n_block_bytes: gsize) -> gpointer;
    pub fn g_mem_set_vtable(vtable: *mut GMemVTable);
    pub fn g_mem_is_system_malloc() -> gboolean;
    pub fn g_mem_profile();
    pub fn g_node_new(data: gpointer) -> *mut GNode;
    pub fn g_node_destroy(root: *mut GNode);
    pub fn g_node_unlink(node: *mut GNode);
    pub fn g_node_copy_deep(node: *mut GNode, copy_func: GCopyFunc,
                            data: gpointer) -> *mut GNode;
    pub fn g_node_copy(node: *mut GNode) -> *mut GNode;
    pub fn g_node_insert(parent: *mut GNode, position: gint, node: *mut GNode)
     -> *mut GNode;
    pub fn g_node_insert_before(parent: *mut GNode, sibling: *mut GNode,
                                node: *mut GNode) -> *mut GNode;
    pub fn g_node_insert_after(parent: *mut GNode, sibling: *mut GNode,
                               node: *mut GNode) -> *mut GNode;
    pub fn g_node_prepend(parent: *mut GNode, node: *mut GNode) -> *mut GNode;
    pub fn g_node_n_nodes(root: *mut GNode, flags: GTraverseFlags) -> guint;
    pub fn g_node_get_root(node: *mut GNode) -> *mut GNode;
    pub fn g_node_is_ancestor(node: *mut GNode, descendant: *mut GNode)
     -> gboolean;
    pub fn g_node_depth(node: *mut GNode) -> guint;
    pub fn g_node_find(root: *mut GNode, order: GTraverseType,
                       flags: GTraverseFlags, data: gpointer) -> *mut GNode;
    pub fn g_node_traverse(root: *mut GNode, order: GTraverseType,
                           flags: GTraverseFlags, max_depth: gint,
                           func: GNodeTraverseFunc, data: gpointer);
    pub fn g_node_max_height(root: *mut GNode) -> guint;
    pub fn g_node_children_foreach(node: *mut GNode, flags: GTraverseFlags,
                                   func: GNodeForeachFunc, data: gpointer);
    pub fn g_node_reverse_children(node: *mut GNode);
    pub fn g_node_n_children(node: *mut GNode) -> guint;
    pub fn g_node_nth_child(node: *mut GNode, n: guint) -> *mut GNode;
    pub fn g_node_last_child(node: *mut GNode) -> *mut GNode;
    pub fn g_node_find_child(node: *mut GNode, flags: GTraverseFlags,
                             data: gpointer) -> *mut GNode;
    pub fn g_node_child_position(node: *mut GNode, child: *mut GNode) -> gint;
    pub fn g_node_child_index(node: *mut GNode, data: gpointer) -> gint;
    pub fn g_node_first_sibling(node: *mut GNode) -> *mut GNode;
    pub fn g_node_last_sibling(node: *mut GNode) -> *mut GNode;
    pub fn g_list_alloc() -> *mut GList;
    pub fn g_list_free(list: *mut GList);
    pub fn g_list_free_1(list: *mut GList);
    pub fn g_list_free_full(list: *mut GList, free_func: GDestroyNotify);
    pub fn g_list_append(list: *mut GList, data: gpointer) -> *mut GList;
    pub fn g_list_prepend(list: *mut GList, data: gpointer) -> *mut GList;
    pub fn g_list_insert(list: *mut GList, data: gpointer, position: gint)
     -> *mut GList;
    pub fn g_list_insert_sorted(list: *mut GList, data: gpointer,
                                func: GCompareFunc) -> *mut GList;
    pub fn g_list_insert_sorted_with_data(list: *mut GList, data: gpointer,
                                          func: GCompareDataFunc,
                                          user_data: gpointer) -> *mut GList;
    pub fn g_list_insert_before(list: *mut GList, sibling: *mut GList,
                                data: gpointer) -> *mut GList;
    pub fn g_list_concat(list1: *mut GList, list2: *mut GList) -> *mut GList;
    pub fn g_list_remove(list: *mut GList, data: gconstpointer) -> *mut GList;
    pub fn g_list_remove_all(list: *mut GList, data: gconstpointer)
     -> *mut GList;
    pub fn g_list_remove_link(list: *mut GList, llink: *mut GList)
     -> *mut GList;
    pub fn g_list_delete_link(list: *mut GList, link_: *mut GList)
     -> *mut GList;
    pub fn g_list_reverse(list: *mut GList) -> *mut GList;
    pub fn g_list_copy(list: *mut GList) -> *mut GList;
    pub fn g_list_copy_deep(list: *mut GList, func: GCopyFunc,
                            user_data: gpointer) -> *mut GList;
    pub fn g_list_nth(list: *mut GList, n: guint) -> *mut GList;
    pub fn g_list_nth_prev(list: *mut GList, n: guint) -> *mut GList;
    pub fn g_list_find(list: *mut GList, data: gconstpointer) -> *mut GList;
    pub fn g_list_find_custom(list: *mut GList, data: gconstpointer,
                              func: GCompareFunc) -> *mut GList;
    pub fn g_list_position(list: *mut GList, llink: *mut GList) -> gint;
    pub fn g_list_index(list: *mut GList, data: gconstpointer) -> gint;
    pub fn g_list_last(list: *mut GList) -> *mut GList;
    pub fn g_list_first(list: *mut GList) -> *mut GList;
    pub fn g_list_length(list: *mut GList) -> guint;
    pub fn g_list_foreach(list: *mut GList, func: GFunc, user_data: gpointer);
    pub fn g_list_sort(list: *mut GList, compare_func: GCompareFunc)
     -> *mut GList;
    pub fn g_list_sort_with_data(list: *mut GList,
                                 compare_func: GCompareDataFunc,
                                 user_data: gpointer) -> *mut GList;
    pub fn g_list_nth_data(list: *mut GList, n: guint) -> gpointer;
    pub fn g_hash_table_new(hash_func: GHashFunc, key_equal_func: GEqualFunc)
     -> *mut GHashTable;
    pub fn g_hash_table_new_full(hash_func: GHashFunc,
                                 key_equal_func: GEqualFunc,
                                 key_destroy_func: GDestroyNotify,
                                 value_destroy_func: GDestroyNotify)
     -> *mut GHashTable;
    pub fn g_hash_table_destroy(hash_table: *mut GHashTable);
    pub fn g_hash_table_insert(hash_table: *mut GHashTable, key: gpointer,
                               value: gpointer) -> gboolean;
    pub fn g_hash_table_replace(hash_table: *mut GHashTable, key: gpointer,
                                value: gpointer) -> gboolean;
    pub fn g_hash_table_add(hash_table: *mut GHashTable, key: gpointer)
     -> gboolean;
    pub fn g_hash_table_remove(hash_table: *mut GHashTable,
                               key: gconstpointer) -> gboolean;
    pub fn g_hash_table_remove_all(hash_table: *mut GHashTable);
    pub fn g_hash_table_steal(hash_table: *mut GHashTable, key: gconstpointer)
     -> gboolean;
    pub fn g_hash_table_steal_all(hash_table: *mut GHashTable);
    pub fn g_hash_table_lookup(hash_table: *mut GHashTable,
                               key: gconstpointer) -> gpointer;
    pub fn g_hash_table_contains(hash_table: *mut GHashTable,
                                 key: gconstpointer) -> gboolean;
    pub fn g_hash_table_lookup_extended(hash_table: *mut GHashTable,
                                        lookup_key: gconstpointer,
                                        orig_key: *mut gpointer,
                                        value: *mut gpointer) -> gboolean;
    pub fn g_hash_table_foreach(hash_table: *mut GHashTable, func: GHFunc,
                                user_data: gpointer);
    pub fn g_hash_table_find(hash_table: *mut GHashTable, predicate: GHRFunc,
                             user_data: gpointer) -> gpointer;
    pub fn g_hash_table_foreach_remove(hash_table: *mut GHashTable,
                                       func: GHRFunc, user_data: gpointer)
     -> guint;
    pub fn g_hash_table_foreach_steal(hash_table: *mut GHashTable,
                                      func: GHRFunc, user_data: gpointer)
     -> guint;
    pub fn g_hash_table_size(hash_table: *mut GHashTable) -> guint;
    pub fn g_hash_table_get_keys(hash_table: *mut GHashTable) -> *mut GList;
    pub fn g_hash_table_get_values(hash_table: *mut GHashTable) -> *mut GList;
    pub fn g_hash_table_get_keys_as_array(hash_table: *mut GHashTable,
                                          length: *mut guint)
     -> *mut gpointer;
    pub fn g_hash_table_iter_init(iter: *mut GHashTableIter,
                                  hash_table: *mut GHashTable);
    pub fn g_hash_table_iter_next(iter: *mut GHashTableIter,
                                  key: *mut gpointer, value: *mut gpointer)
     -> gboolean;
    pub fn g_hash_table_iter_get_hash_table(iter: *mut GHashTableIter)
     -> *mut GHashTable;
    pub fn g_hash_table_iter_remove(iter: *mut GHashTableIter);
    pub fn g_hash_table_iter_replace(iter: *mut GHashTableIter,
                                     value: gpointer);
    pub fn g_hash_table_iter_steal(iter: *mut GHashTableIter);
    pub fn g_hash_table_ref(hash_table: *mut GHashTable) -> *mut GHashTable;
    pub fn g_hash_table_unref(hash_table: *mut GHashTable);
    pub fn g_str_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
    pub fn g_str_hash(v: gconstpointer) -> guint;
    pub fn g_int_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
    pub fn g_int_hash(v: gconstpointer) -> guint;
    pub fn g_int64_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
    pub fn g_int64_hash(v: gconstpointer) -> guint;
    pub fn g_double_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
    pub fn g_double_hash(v: gconstpointer) -> guint;
    pub fn g_direct_hash(v: gconstpointer) -> guint;
    pub fn g_direct_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
    pub fn g_hmac_new(digest_type: GChecksumType, key: *const guchar,
                      key_len: gsize) -> *mut GHmac;
    pub fn g_hmac_copy(hmac: *const GHmac) -> *mut GHmac;
    pub fn g_hmac_ref(hmac: *mut GHmac) -> *mut GHmac;
    pub fn g_hmac_unref(hmac: *mut GHmac);
    pub fn g_hmac_update(hmac: *mut GHmac, data: *const guchar,
                         length: gssize);
    pub fn g_hmac_get_string(hmac: *mut GHmac) -> *const gchar;
    pub fn g_hmac_get_digest(hmac: *mut GHmac, buffer: *mut guint8,
                             digest_len: *mut gsize);
    pub fn g_compute_hmac_for_data(digest_type: GChecksumType,
                                   key: *const guchar, key_len: gsize,
                                   data: *const guchar, length: gsize)
     -> *mut gchar;
    pub fn g_compute_hmac_for_string(digest_type: GChecksumType,
                                     key: *const guchar, key_len: gsize,
                                     str: *const gchar, length: gssize)
     -> *mut gchar;
    pub fn g_hook_list_init(hook_list: *mut GHookList, hook_size: guint);
    pub fn g_hook_list_clear(hook_list: *mut GHookList);
    pub fn g_hook_alloc(hook_list: *mut GHookList) -> *mut GHook;
    pub fn g_hook_free(hook_list: *mut GHookList, hook: *mut GHook);
    pub fn g_hook_ref(hook_list: *mut GHookList, hook: *mut GHook)
     -> *mut GHook;
    pub fn g_hook_unref(hook_list: *mut GHookList, hook: *mut GHook);
    pub fn g_hook_destroy(hook_list: *mut GHookList, hook_id: gulong)
     -> gboolean;
    pub fn g_hook_destroy_link(hook_list: *mut GHookList, hook: *mut GHook);
    pub fn g_hook_prepend(hook_list: *mut GHookList, hook: *mut GHook);
    pub fn g_hook_insert_before(hook_list: *mut GHookList,
                                sibling: *mut GHook, hook: *mut GHook);
    pub fn g_hook_insert_sorted(hook_list: *mut GHookList, hook: *mut GHook,
                                func: GHookCompareFunc);
    pub fn g_hook_get(hook_list: *mut GHookList, hook_id: gulong)
     -> *mut GHook;
    pub fn g_hook_find(hook_list: *mut GHookList, need_valids: gboolean,
                       func: GHookFindFunc, data: gpointer) -> *mut GHook;
    pub fn g_hook_find_data(hook_list: *mut GHookList, need_valids: gboolean,
                            data: gpointer) -> *mut GHook;
    pub fn g_hook_find_func(hook_list: *mut GHookList, need_valids: gboolean,
                            func: gpointer) -> *mut GHook;
    pub fn g_hook_find_func_data(hook_list: *mut GHookList,
                                 need_valids: gboolean, func: gpointer,
                                 data: gpointer) -> *mut GHook;
    pub fn g_hook_first_valid(hook_list: *mut GHookList,
                              may_be_in_call: gboolean) -> *mut GHook;
    pub fn g_hook_next_valid(hook_list: *mut GHookList, hook: *mut GHook,
                             may_be_in_call: gboolean) -> *mut GHook;
    pub fn g_hook_compare_ids(new_hook: *mut GHook, sibling: *mut GHook)
     -> gint;
    pub fn g_hook_list_invoke(hook_list: *mut GHookList,
                              may_recurse: gboolean);
    pub fn g_hook_list_invoke_check(hook_list: *mut GHookList,
                                    may_recurse: gboolean);
    pub fn g_hook_list_marshal(hook_list: *mut GHookList,
                               may_recurse: gboolean,
                               marshaller: GHookMarshaller,
                               marshal_data: gpointer);
    pub fn g_hook_list_marshal_check(hook_list: *mut GHookList,
                                     may_recurse: gboolean,
                                     marshaller: GHookCheckMarshaller,
                                     marshal_data: gpointer);
    pub fn g_hostname_is_non_ascii(hostname: *const gchar) -> gboolean;
    pub fn g_hostname_is_ascii_encoded(hostname: *const gchar) -> gboolean;
    pub fn g_hostname_is_ip_address(hostname: *const gchar) -> gboolean;
    pub fn g_hostname_to_ascii(hostname: *const gchar) -> *mut gchar;
    pub fn g_hostname_to_unicode(hostname: *const gchar) -> *mut gchar;
    pub fn g_poll(fds: *mut GPollFD, nfds: guint, timeout: gint) -> gint;
    pub fn g_slist_alloc() -> *mut GSList;
    pub fn g_slist_free(list: *mut GSList);
    pub fn g_slist_free_1(list: *mut GSList);
    pub fn g_slist_free_full(list: *mut GSList, free_func: GDestroyNotify);
    pub fn g_slist_append(list: *mut GSList, data: gpointer) -> *mut GSList;
    pub fn g_slist_prepend(list: *mut GSList, data: gpointer) -> *mut GSList;
    pub fn g_slist_insert(list: *mut GSList, data: gpointer, position: gint)
     -> *mut GSList;
    pub fn g_slist_insert_sorted(list: *mut GSList, data: gpointer,
                                 func: GCompareFunc) -> *mut GSList;
    pub fn g_slist_insert_sorted_with_data(list: *mut GSList, data: gpointer,
                                           func: GCompareDataFunc,
                                           user_data: gpointer)
     -> *mut GSList;
    pub fn g_slist_insert_before(slist: *mut GSList, sibling: *mut GSList,
                                 data: gpointer) -> *mut GSList;
    pub fn g_slist_concat(list1: *mut GSList, list2: *mut GSList)
     -> *mut GSList;
    pub fn g_slist_remove(list: *mut GSList, data: gconstpointer)
     -> *mut GSList;
    pub fn g_slist_remove_all(list: *mut GSList, data: gconstpointer)
     -> *mut GSList;
    pub fn g_slist_remove_link(list: *mut GSList, link_: *mut GSList)
     -> *mut GSList;
    pub fn g_slist_delete_link(list: *mut GSList, link_: *mut GSList)
     -> *mut GSList;
    pub fn g_slist_reverse(list: *mut GSList) -> *mut GSList;
    pub fn g_slist_copy(list: *mut GSList) -> *mut GSList;
    pub fn g_slist_copy_deep(list: *mut GSList, func: GCopyFunc,
                             user_data: gpointer) -> *mut GSList;
    pub fn g_slist_nth(list: *mut GSList, n: guint) -> *mut GSList;
    pub fn g_slist_find(list: *mut GSList, data: gconstpointer)
     -> *mut GSList;
    pub fn g_slist_find_custom(list: *mut GSList, data: gconstpointer,
                               func: GCompareFunc) -> *mut GSList;
    pub fn g_slist_position(list: *mut GSList, llink: *mut GSList) -> gint;
    pub fn g_slist_index(list: *mut GSList, data: gconstpointer) -> gint;
    pub fn g_slist_last(list: *mut GSList) -> *mut GSList;
    pub fn g_slist_length(list: *mut GSList) -> guint;
    pub fn g_slist_foreach(list: *mut GSList, func: GFunc,
                           user_data: gpointer);
    pub fn g_slist_sort(list: *mut GSList, compare_func: GCompareFunc)
     -> *mut GSList;
    pub fn g_slist_sort_with_data(list: *mut GSList,
                                  compare_func: GCompareDataFunc,
                                  user_data: gpointer) -> *mut GSList;
    pub fn g_slist_nth_data(list: *mut GSList, n: guint) -> gpointer;
    pub fn g_main_context_new() -> *mut GMainContext;
    pub fn g_main_context_ref(context: *mut GMainContext)
     -> *mut GMainContext;
    pub fn g_main_context_unref(context: *mut GMainContext);
    pub fn g_main_context_default() -> *mut GMainContext;
    pub fn g_main_context_iteration(context: *mut GMainContext,
                                    may_block: gboolean) -> gboolean;
    pub fn g_main_context_pending(context: *mut GMainContext) -> gboolean;
    pub fn g_main_context_find_source_by_id(context: *mut GMainContext,
                                            source_id: guint) -> *mut GSource;
    pub fn g_main_context_find_source_by_user_data(context: *mut GMainContext,
                                                   user_data: gpointer)
     -> *mut GSource;
    pub fn g_main_context_find_source_by_funcs_user_data(context:
                                                             *mut GMainContext,
                                                         funcs:
                                                             *mut GSourceFuncs,
                                                         user_data: gpointer)
     -> *mut GSource;
    pub fn g_main_context_wakeup(context: *mut GMainContext);
    pub fn g_main_context_acquire(context: *mut GMainContext) -> gboolean;
    pub fn g_main_context_release(context: *mut GMainContext);
    pub fn g_main_context_is_owner(context: *mut GMainContext) -> gboolean;
    pub fn g_main_context_wait(context: *mut GMainContext, cond: *mut GCond,
                               mutex: *mut GMutex) -> gboolean;
    pub fn g_main_context_prepare(context: *mut GMainContext,
                                  priority: *mut gint) -> gboolean;
    pub fn g_main_context_query(context: *mut GMainContext,
                                max_priority: gint, timeout_: *mut gint,
                                fds: *mut GPollFD, n_fds: gint) -> gint;
    pub fn g_main_context_check(context: *mut GMainContext,
                                max_priority: gint, fds: *mut GPollFD,
                                n_fds: gint) -> gint;
    pub fn g_main_context_dispatch(context: *mut GMainContext);
    pub fn g_main_context_set_poll_func(context: *mut GMainContext,
                                        func: GPollFunc);
    pub fn g_main_context_get_poll_func(context: *mut GMainContext)
     -> GPollFunc;
    pub fn g_main_context_add_poll(context: *mut GMainContext,
                                   fd: *mut GPollFD, priority: gint);
    pub fn g_main_context_remove_poll(context: *mut GMainContext,
                                      fd: *mut GPollFD);
    pub fn g_main_depth() -> gint;
    pub fn g_main_current_source() -> *mut GSource;
    pub fn g_main_context_push_thread_default(context: *mut GMainContext);
    pub fn g_main_context_pop_thread_default(context: *mut GMainContext);
    pub fn g_main_context_get_thread_default() -> *mut GMainContext;
    pub fn g_main_context_ref_thread_default() -> *mut GMainContext;
    pub fn g_main_loop_new(context: *mut GMainContext, is_running: gboolean)
     -> *mut GMainLoop;
    pub fn g_main_loop_run(_loop: *mut GMainLoop);
    pub fn g_main_loop_quit(_loop: *mut GMainLoop);
    pub fn g_main_loop_ref(_loop: *mut GMainLoop) -> *mut GMainLoop;
    pub fn g_main_loop_unref(_loop: *mut GMainLoop);
    pub fn g_main_loop_is_running(_loop: *mut GMainLoop) -> gboolean;
    pub fn g_main_loop_get_context(_loop: *mut GMainLoop)
     -> *mut GMainContext;
    pub fn g_source_new(source_funcs: *mut GSourceFuncs, struct_size: guint)
     -> *mut GSource;
    pub fn g_source_ref(source: *mut GSource) -> *mut GSource;
    pub fn g_source_unref(source: *mut GSource);
    pub fn g_source_attach(source: *mut GSource, context: *mut GMainContext)
     -> guint;
    pub fn g_source_destroy(source: *mut GSource);
    pub fn g_source_set_priority(source: *mut GSource, priority: gint);
    pub fn g_source_get_priority(source: *mut GSource) -> gint;
    pub fn g_source_set_can_recurse(source: *mut GSource,
                                    can_recurse: gboolean);
    pub fn g_source_get_can_recurse(source: *mut GSource) -> gboolean;
    pub fn g_source_get_id(source: *mut GSource) -> guint;
    pub fn g_source_get_context(source: *mut GSource) -> *mut GMainContext;
    pub fn g_source_set_callback(source: *mut GSource, func: GSourceFunc,
                                 data: gpointer, notify: GDestroyNotify);
    pub fn g_source_set_funcs(source: *mut GSource, funcs: *mut GSourceFuncs);
    pub fn g_source_is_destroyed(source: *mut GSource) -> gboolean;
    pub fn g_source_set_name(source: *mut GSource,
                             name: *const ::std::os::raw::c_char);
    pub fn g_source_get_name(source: *mut GSource)
     -> *const ::std::os::raw::c_char;
    pub fn g_source_set_name_by_id(tag: guint,
                                   name: *const ::std::os::raw::c_char);
    pub fn g_source_set_ready_time(source: *mut GSource, ready_time: gint64);
    pub fn g_source_get_ready_time(source: *mut GSource) -> gint64;
    pub fn g_source_add_unix_fd(source: *mut GSource, fd: gint,
                                events: GIOCondition) -> gpointer;
    pub fn g_source_modify_unix_fd(source: *mut GSource, tag: gpointer,
                                   new_events: GIOCondition);
    pub fn g_source_remove_unix_fd(source: *mut GSource, tag: gpointer);
    pub fn g_source_query_unix_fd(source: *mut GSource, tag: gpointer)
     -> GIOCondition;
    pub fn g_source_set_callback_indirect(source: *mut GSource,
                                          callback_data: gpointer,
                                          callback_funcs:
                                              *mut GSourceCallbackFuncs);
    pub fn g_source_add_poll(source: *mut GSource, fd: *mut GPollFD);
    pub fn g_source_remove_poll(source: *mut GSource, fd: *mut GPollFD);
    pub fn g_source_add_child_source(source: *mut GSource,
                                     child_source: *mut GSource);
    pub fn g_source_remove_child_source(source: *mut GSource,
                                        child_source: *mut GSource);
    pub fn g_source_get_current_time(source: *mut GSource,
                                     timeval: *mut GTimeVal);
    pub fn g_source_get_time(source: *mut GSource) -> gint64;
    pub fn g_idle_source_new() -> *mut GSource;
    pub fn g_child_watch_source_new(pid: GPid) -> *mut GSource;
    pub fn g_timeout_source_new(interval: guint) -> *mut GSource;
    pub fn g_timeout_source_new_seconds(interval: guint) -> *mut GSource;
    pub fn g_get_current_time(result: *mut GTimeVal);
    pub fn g_get_monotonic_time() -> gint64;
    pub fn g_get_real_time() -> gint64;
    pub fn g_source_remove(tag: guint) -> gboolean;
    pub fn g_source_remove_by_user_data(user_data: gpointer) -> gboolean;
    pub fn g_source_remove_by_funcs_user_data(funcs: *mut GSourceFuncs,
                                              user_data: gpointer)
     -> gboolean;
    pub fn g_timeout_add_full(priority: gint, interval: guint,
                              function: GSourceFunc, data: gpointer,
                              notify: GDestroyNotify) -> guint;
    pub fn g_timeout_add(interval: guint, function: GSourceFunc,
                         data: gpointer) -> guint;
    pub fn g_timeout_add_seconds_full(priority: gint, interval: guint,
                                      function: GSourceFunc, data: gpointer,
                                      notify: GDestroyNotify) -> guint;
    pub fn g_timeout_add_seconds(interval: guint, function: GSourceFunc,
                                 data: gpointer) -> guint;
    pub fn g_child_watch_add_full(priority: gint, pid: GPid,
                                  function: GChildWatchFunc, data: gpointer,
                                  notify: GDestroyNotify) -> guint;
    pub fn g_child_watch_add(pid: GPid, function: GChildWatchFunc,
                             data: gpointer) -> guint;
    pub fn g_idle_add(function: GSourceFunc, data: gpointer) -> guint;
    pub fn g_idle_add_full(priority: gint, function: GSourceFunc,
                           data: gpointer, notify: GDestroyNotify) -> guint;
    pub fn g_idle_remove_by_data(data: gpointer) -> gboolean;
    pub fn g_main_context_invoke_full(context: *mut GMainContext,
                                      priority: gint, function: GSourceFunc,
                                      data: gpointer, notify: GDestroyNotify);
    pub fn g_main_context_invoke(context: *mut GMainContext,
                                 function: GSourceFunc, data: gpointer);
    pub fn g_unicode_script_to_iso15924(script: GUnicodeScript) -> guint32;
    pub fn g_unicode_script_from_iso15924(iso15924: guint32)
     -> GUnicodeScript;
    pub fn g_unichar_isalnum(c: gunichar) -> gboolean;
    pub fn g_unichar_isalpha(c: gunichar) -> gboolean;
    pub fn g_unichar_iscntrl(c: gunichar) -> gboolean;
    pub fn g_unichar_isdigit(c: gunichar) -> gboolean;
    pub fn g_unichar_isgraph(c: gunichar) -> gboolean;
    pub fn g_unichar_islower(c: gunichar) -> gboolean;
    pub fn g_unichar_isprint(c: gunichar) -> gboolean;
    pub fn g_unichar_ispunct(c: gunichar) -> gboolean;
    pub fn g_unichar_isspace(c: gunichar) -> gboolean;
    pub fn g_unichar_isupper(c: gunichar) -> gboolean;
    pub fn g_unichar_isxdigit(c: gunichar) -> gboolean;
    pub fn g_unichar_istitle(c: gunichar) -> gboolean;
    pub fn g_unichar_isdefined(c: gunichar) -> gboolean;
    pub fn g_unichar_iswide(c: gunichar) -> gboolean;
    pub fn g_unichar_iswide_cjk(c: gunichar) -> gboolean;
    pub fn g_unichar_iszerowidth(c: gunichar) -> gboolean;
    pub fn g_unichar_ismark(c: gunichar) -> gboolean;
    pub fn g_unichar_toupper(c: gunichar) -> gunichar;
    pub fn g_unichar_tolower(c: gunichar) -> gunichar;
    pub fn g_unichar_totitle(c: gunichar) -> gunichar;
    pub fn g_unichar_digit_value(c: gunichar) -> gint;
    pub fn g_unichar_xdigit_value(c: gunichar) -> gint;
    pub fn g_unichar_type(c: gunichar) -> GUnicodeType;
    pub fn g_unichar_break_type(c: gunichar) -> GUnicodeBreakType;
    pub fn g_unichar_combining_class(uc: gunichar) -> gint;
    pub fn g_unichar_get_mirror_char(ch: gunichar, mirrored_ch: *mut gunichar)
     -> gboolean;
    pub fn g_unichar_get_script(ch: gunichar) -> GUnicodeScript;
    pub fn g_unichar_validate(ch: gunichar) -> gboolean;
    pub fn g_unichar_compose(a: gunichar, b: gunichar, ch: *mut gunichar)
     -> gboolean;
    pub fn g_unichar_decompose(ch: gunichar, a: *mut gunichar,
                               b: *mut gunichar) -> gboolean;
    pub fn g_unichar_fully_decompose(ch: gunichar, compat: gboolean,
                                     result: *mut gunichar, result_len: gsize)
     -> gsize;
    pub fn g_unicode_canonical_ordering(string: *mut gunichar, len: gsize);
    pub fn g_unicode_canonical_decomposition(ch: gunichar,
                                             result_len: *mut gsize)
     -> *mut gunichar;
    pub fn g_utf8_get_char(p: *const gchar) -> gunichar;
    pub fn g_utf8_get_char_validated(p: *const gchar, max_len: gssize)
     -> gunichar;
    pub fn g_utf8_offset_to_pointer(str: *const gchar, offset: glong)
     -> *mut gchar;
    pub fn g_utf8_pointer_to_offset(str: *const gchar, pos: *const gchar)
     -> glong;
    pub fn g_utf8_prev_char(p: *const gchar) -> *mut gchar;
    pub fn g_utf8_find_next_char(p: *const gchar, end: *const gchar)
     -> *mut gchar;
    pub fn g_utf8_find_prev_char(str: *const gchar, p: *const gchar)
     -> *mut gchar;
    pub fn g_utf8_strlen(p: *const gchar, max: gssize) -> glong;
    pub fn g_utf8_substring(str: *const gchar, start_pos: glong,
                            end_pos: glong) -> *mut gchar;
    pub fn g_utf8_strncpy(dest: *mut gchar, src: *const gchar, n: gsize)
     -> *mut gchar;
    pub fn g_utf8_strchr(p: *const gchar, len: gssize, c: gunichar)
     -> *mut gchar;
    pub fn g_utf8_strrchr(p: *const gchar, len: gssize, c: gunichar)
     -> *mut gchar;
    pub fn g_utf8_strreverse(str: *const gchar, len: gssize) -> *mut gchar;
    pub fn g_utf8_to_utf16(str: *const gchar, len: glong,
                           items_read: *mut glong, items_written: *mut glong,
                           error: *mut *mut GError) -> *mut gunichar2;
    pub fn g_utf8_to_ucs4(str: *const gchar, len: glong,
                          items_read: *mut glong, items_written: *mut glong,
                          error: *mut *mut GError) -> *mut gunichar;
    pub fn g_utf8_to_ucs4_fast(str: *const gchar, len: glong,
                               items_written: *mut glong) -> *mut gunichar;
    pub fn g_utf16_to_ucs4(str: *const gunichar2, len: glong,
                           items_read: *mut glong, items_written: *mut glong,
                           error: *mut *mut GError) -> *mut gunichar;
    pub fn g_utf16_to_utf8(str: *const gunichar2, len: glong,
                           items_read: *mut glong, items_written: *mut glong,
                           error: *mut *mut GError) -> *mut gchar;
    pub fn g_ucs4_to_utf16(str: *const gunichar, len: glong,
                           items_read: *mut glong, items_written: *mut glong,
                           error: *mut *mut GError) -> *mut gunichar2;
    pub fn g_ucs4_to_utf8(str: *const gunichar, len: glong,
                          items_read: *mut glong, items_written: *mut glong,
                          error: *mut *mut GError) -> *mut gchar;
    pub fn g_unichar_to_utf8(c: gunichar, outbuf: *mut gchar) -> gint;
    pub fn g_utf8_validate(str: *const gchar, max_len: gssize,
                           end: *mut *const gchar) -> gboolean;
    pub fn g_utf8_strup(str: *const gchar, len: gssize) -> *mut gchar;
    pub fn g_utf8_strdown(str: *const gchar, len: gssize) -> *mut gchar;
    pub fn g_utf8_casefold(str: *const gchar, len: gssize) -> *mut gchar;
    pub fn g_utf8_normalize(str: *const gchar, len: gssize,
                            mode: GNormalizeMode) -> *mut gchar;
    pub fn g_utf8_collate(str1: *const gchar, str2: *const gchar) -> gint;
    pub fn g_utf8_collate_key(str: *const gchar, len: gssize) -> *mut gchar;
    pub fn g_utf8_collate_key_for_filename(str: *const gchar, len: gssize)
     -> *mut gchar;
    pub fn _g_utf8_make_valid(name: *const gchar) -> *mut gchar;
    pub fn g_string_new(init: *const gchar) -> *mut GString;
    pub fn g_string_new_len(init: *const gchar, len: gssize) -> *mut GString;
    pub fn g_string_sized_new(dfl_size: gsize) -> *mut GString;
    pub fn g_string_free(string: *mut GString, free_segment: gboolean)
     -> *mut gchar;
    pub fn g_string_free_to_bytes(string: *mut GString) -> *mut GBytes;
    pub fn g_string_equal(v: *const GString, v2: *const GString) -> gboolean;
    pub fn g_string_hash(str: *const GString) -> guint;
    pub fn g_string_assign(string: *mut GString, rval: *const gchar)
     -> *mut GString;
    pub fn g_string_truncate(string: *mut GString, len: gsize)
     -> *mut GString;
    pub fn g_string_set_size(string: *mut GString, len: gsize)
     -> *mut GString;
    pub fn g_string_insert_len(string: *mut GString, pos: gssize,
                               val: *const gchar, len: gssize)
     -> *mut GString;
    pub fn g_string_append(string: *mut GString, val: *const gchar)
     -> *mut GString;
    pub fn g_string_append_len(string: *mut GString, val: *const gchar,
                               len: gssize) -> *mut GString;
    pub fn g_string_append_c(string: *mut GString, c: gchar) -> *mut GString;
    pub fn g_string_append_unichar(string: *mut GString, wc: gunichar)
     -> *mut GString;
    pub fn g_string_prepend(string: *mut GString, val: *const gchar)
     -> *mut GString;
    pub fn g_string_prepend_c(string: *mut GString, c: gchar) -> *mut GString;
    pub fn g_string_prepend_unichar(string: *mut GString, wc: gunichar)
     -> *mut GString;
    pub fn g_string_prepend_len(string: *mut GString, val: *const gchar,
                                len: gssize) -> *mut GString;
    pub fn g_string_insert(string: *mut GString, pos: gssize,
                           val: *const gchar) -> *mut GString;
    pub fn g_string_insert_c(string: *mut GString, pos: gssize, c: gchar)
     -> *mut GString;
    pub fn g_string_insert_unichar(string: *mut GString, pos: gssize,
                                   wc: gunichar) -> *mut GString;
    pub fn g_string_overwrite(string: *mut GString, pos: gsize,
                              val: *const gchar) -> *mut GString;
    pub fn g_string_overwrite_len(string: *mut GString, pos: gsize,
                                  val: *const gchar, len: gssize)
     -> *mut GString;
    pub fn g_string_erase(string: *mut GString, pos: gssize, len: gssize)
     -> *mut GString;
    pub fn g_string_ascii_down(string: *mut GString) -> *mut GString;
    pub fn g_string_ascii_up(string: *mut GString) -> *mut GString;
    pub fn g_string_vprintf(string: *mut GString, format: *const gchar,
                            args: va_list);
    pub fn g_string_printf(string: *mut GString, format: *const gchar, ...);
    pub fn g_string_append_vprintf(string: *mut GString, format: *const gchar,
                                   args: va_list);
    pub fn g_string_append_printf(string: *mut GString,
                                  format: *const gchar, ...);
    pub fn g_string_append_uri_escaped(string: *mut GString,
                                       unescaped: *const gchar,
                                       reserved_chars_allowed: *const gchar,
                                       allow_utf8: gboolean) -> *mut GString;
    pub fn g_string_down(string: *mut GString) -> *mut GString;
    pub fn g_string_up(string: *mut GString) -> *mut GString;
    pub fn g_io_channel_init(channel: *mut GIOChannel);
    pub fn g_io_channel_ref(channel: *mut GIOChannel) -> *mut GIOChannel;
    pub fn g_io_channel_unref(channel: *mut GIOChannel);
    pub fn g_io_channel_read(channel: *mut GIOChannel, buf: *mut gchar,
                             count: gsize, bytes_read: *mut gsize)
     -> GIOError;
    pub fn g_io_channel_write(channel: *mut GIOChannel, buf: *const gchar,
                              count: gsize, bytes_written: *mut gsize)
     -> GIOError;
    pub fn g_io_channel_seek(channel: *mut GIOChannel, offset: gint64,
                             _type: GSeekType) -> GIOError;
    pub fn g_io_channel_close(channel: *mut GIOChannel);
    pub fn g_io_channel_shutdown(channel: *mut GIOChannel, flush: gboolean,
                                 err: *mut *mut GError) -> GIOStatus;
    pub fn g_io_add_watch_full(channel: *mut GIOChannel, priority: gint,
                               condition: GIOCondition, func: GIOFunc,
                               user_data: gpointer, notify: GDestroyNotify)
     -> guint;
    pub fn g_io_create_watch(channel: *mut GIOChannel,
                             condition: GIOCondition) -> *mut GSource;
    pub fn g_io_add_watch(channel: *mut GIOChannel, condition: GIOCondition,
                          func: GIOFunc, user_data: gpointer) -> guint;
    pub fn g_io_channel_set_buffer_size(channel: *mut GIOChannel,
                                        size: gsize);
    pub fn g_io_channel_get_buffer_size(channel: *mut GIOChannel) -> gsize;
    pub fn g_io_channel_get_buffer_condition(channel: *mut GIOChannel)
     -> GIOCondition;
    pub fn g_io_channel_set_flags(channel: *mut GIOChannel, flags: GIOFlags,
                                  error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_get_flags(channel: *mut GIOChannel) -> GIOFlags;
    pub fn g_io_channel_set_line_term(channel: *mut GIOChannel,
                                      line_term: *const gchar, length: gint);
    pub fn g_io_channel_get_line_term(channel: *mut GIOChannel,
                                      length: *mut gint) -> *const gchar;
    pub fn g_io_channel_set_buffered(channel: *mut GIOChannel,
                                     buffered: gboolean);
    pub fn g_io_channel_get_buffered(channel: *mut GIOChannel) -> gboolean;
    pub fn g_io_channel_set_encoding(channel: *mut GIOChannel,
                                     encoding: *const gchar,
                                     error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_get_encoding(channel: *mut GIOChannel)
     -> *const gchar;
    pub fn g_io_channel_set_close_on_unref(channel: *mut GIOChannel,
                                           do_close: gboolean);
    pub fn g_io_channel_get_close_on_unref(channel: *mut GIOChannel)
     -> gboolean;
    pub fn g_io_channel_flush(channel: *mut GIOChannel,
                              error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_read_line(channel: *mut GIOChannel,
                                  str_return: *mut *mut gchar,
                                  length: *mut gsize,
                                  terminator_pos: *mut gsize,
                                  error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_read_line_string(channel: *mut GIOChannel,
                                         buffer: *mut GString,
                                         terminator_pos: *mut gsize,
                                         error: *mut *mut GError)
     -> GIOStatus;
    pub fn g_io_channel_read_to_end(channel: *mut GIOChannel,
                                    str_return: *mut *mut gchar,
                                    length: *mut gsize,
                                    error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_read_chars(channel: *mut GIOChannel, buf: *mut gchar,
                                   count: gsize, bytes_read: *mut gsize,
                                   error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_read_unichar(channel: *mut GIOChannel,
                                     thechar: *mut gunichar,
                                     error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_write_chars(channel: *mut GIOChannel,
                                    buf: *const gchar, count: gssize,
                                    bytes_written: *mut gsize,
                                    error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_write_unichar(channel: *mut GIOChannel,
                                      thechar: gunichar,
                                      error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_seek_position(channel: *mut GIOChannel,
                                      offset: gint64, _type: GSeekType,
                                      error: *mut *mut GError) -> GIOStatus;
    pub fn g_io_channel_new_file(filename: *const gchar, mode: *const gchar,
                                 error: *mut *mut GError) -> *mut GIOChannel;
    pub fn g_io_channel_error_quark() -> GQuark;
    pub fn g_io_channel_error_from_errno(en: gint) -> GIOChannelError;
    pub fn g_io_channel_unix_new(fd: ::std::os::raw::c_int)
     -> *mut GIOChannel;
    pub fn g_io_channel_unix_get_fd(channel: *mut GIOChannel) -> gint;
    pub fn g_key_file_error_quark() -> GQuark;
    pub fn g_key_file_new() -> *mut GKeyFile;
    pub fn g_key_file_ref(key_file: *mut GKeyFile) -> *mut GKeyFile;
    pub fn g_key_file_unref(key_file: *mut GKeyFile);
    pub fn g_key_file_free(key_file: *mut GKeyFile);
    pub fn g_key_file_set_list_separator(key_file: *mut GKeyFile,
                                         separator: gchar);
    pub fn g_key_file_load_from_file(key_file: *mut GKeyFile,
                                     file: *const gchar, flags: GKeyFileFlags,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_load_from_data(key_file: *mut GKeyFile,
                                     data: *const gchar, length: gsize,
                                     flags: GKeyFileFlags,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_load_from_dirs(key_file: *mut GKeyFile,
                                     file: *const gchar,
                                     search_dirs: *mut *const gchar,
                                     full_path: *mut *mut gchar,
                                     flags: GKeyFileFlags,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_load_from_data_dirs(key_file: *mut GKeyFile,
                                          file: *const gchar,
                                          full_path: *mut *mut gchar,
                                          flags: GKeyFileFlags,
                                          error: *mut *mut GError)
     -> gboolean;
    pub fn g_key_file_to_data(key_file: *mut GKeyFile, length: *mut gsize,
                              error: *mut *mut GError) -> *mut gchar;
    pub fn g_key_file_save_to_file(key_file: *mut GKeyFile,
                                   filename: *const gchar,
                                   error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_get_start_group(key_file: *mut GKeyFile) -> *mut gchar;
    pub fn g_key_file_get_groups(key_file: *mut GKeyFile, length: *mut gsize)
     -> *mut *mut gchar;
    pub fn g_key_file_get_keys(key_file: *mut GKeyFile,
                               group_name: *const gchar, length: *mut gsize,
                               error: *mut *mut GError) -> *mut *mut gchar;
    pub fn g_key_file_has_group(key_file: *mut GKeyFile,
                                group_name: *const gchar) -> gboolean;
    pub fn g_key_file_has_key(key_file: *mut GKeyFile,
                              group_name: *const gchar, key: *const gchar,
                              error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_get_value(key_file: *mut GKeyFile,
                                group_name: *const gchar, key: *const gchar,
                                error: *mut *mut GError) -> *mut gchar;
    pub fn g_key_file_set_value(key_file: *mut GKeyFile,
                                group_name: *const gchar, key: *const gchar,
                                value: *const gchar);
    pub fn g_key_file_get_string(key_file: *mut GKeyFile,
                                 group_name: *const gchar, key: *const gchar,
                                 error: *mut *mut GError) -> *mut gchar;
    pub fn g_key_file_set_string(key_file: *mut GKeyFile,
                                 group_name: *const gchar, key: *const gchar,
                                 string: *const gchar);
    pub fn g_key_file_get_locale_string(key_file: *mut GKeyFile,
                                        group_name: *const gchar,
                                        key: *const gchar,
                                        locale: *const gchar,
                                        error: *mut *mut GError)
     -> *mut gchar;
    pub fn g_key_file_set_locale_string(key_file: *mut GKeyFile,
                                        group_name: *const gchar,
                                        key: *const gchar,
                                        locale: *const gchar,
                                        string: *const gchar);
    pub fn g_key_file_get_boolean(key_file: *mut GKeyFile,
                                  group_name: *const gchar, key: *const gchar,
                                  error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_set_boolean(key_file: *mut GKeyFile,
                                  group_name: *const gchar, key: *const gchar,
                                  value: gboolean);
    pub fn g_key_file_get_integer(key_file: *mut GKeyFile,
                                  group_name: *const gchar, key: *const gchar,
                                  error: *mut *mut GError) -> gint;
    pub fn g_key_file_set_integer(key_file: *mut GKeyFile,
                                  group_name: *const gchar, key: *const gchar,
                                  value: gint);
    pub fn g_key_file_get_int64(key_file: *mut GKeyFile,
                                group_name: *const gchar, key: *const gchar,
                                error: *mut *mut GError) -> gint64;
    pub fn g_key_file_set_int64(key_file: *mut GKeyFile,
                                group_name: *const gchar, key: *const gchar,
                                value: gint64);
    pub fn g_key_file_get_uint64(key_file: *mut GKeyFile,
                                 group_name: *const gchar, key: *const gchar,
                                 error: *mut *mut GError) -> guint64;
    pub fn g_key_file_set_uint64(key_file: *mut GKeyFile,
                                 group_name: *const gchar, key: *const gchar,
                                 value: guint64);
    pub fn g_key_file_get_double(key_file: *mut GKeyFile,
                                 group_name: *const gchar, key: *const gchar,
                                 error: *mut *mut GError) -> gdouble;
    pub fn g_key_file_set_double(key_file: *mut GKeyFile,
                                 group_name: *const gchar, key: *const gchar,
                                 value: gdouble);
    pub fn g_key_file_get_string_list(key_file: *mut GKeyFile,
                                      group_name: *const gchar,
                                      key: *const gchar, length: *mut gsize,
                                      error: *mut *mut GError)
     -> *mut *mut gchar;
    pub fn g_key_file_set_string_list(key_file: *mut GKeyFile,
                                      group_name: *const gchar,
                                      key: *const gchar,
                                      list: *const *const gchar,
                                      length: gsize);
    pub fn g_key_file_get_locale_string_list(key_file: *mut GKeyFile,
                                             group_name: *const gchar,
                                             key: *const gchar,
                                             locale: *const gchar,
                                             length: *mut gsize,
                                             error: *mut *mut GError)
     -> *mut *mut gchar;
    pub fn g_key_file_set_locale_string_list(key_file: *mut GKeyFile,
                                             group_name: *const gchar,
                                             key: *const gchar,
                                             locale: *const gchar,
                                             list: *const *const gchar,
                                             length: gsize);
    pub fn g_key_file_get_boolean_list(key_file: *mut GKeyFile,
                                       group_name: *const gchar,
                                       key: *const gchar, length: *mut gsize,
                                       error: *mut *mut GError)
     -> *mut gboolean;
    pub fn g_key_file_set_boolean_list(key_file: *mut GKeyFile,
                                       group_name: *const gchar,
                                       key: *const gchar, list: *mut gboolean,
                                       length: gsize);
    pub fn g_key_file_get_integer_list(key_file: *mut GKeyFile,
                                       group_name: *const gchar,
                                       key: *const gchar, length: *mut gsize,
                                       error: *mut *mut GError) -> *mut gint;
    pub fn g_key_file_set_double_list(key_file: *mut GKeyFile,
                                      group_name: *const gchar,
                                      key: *const gchar, list: *mut gdouble,
                                      length: gsize);
    pub fn g_key_file_get_double_list(key_file: *mut GKeyFile,
                                      group_name: *const gchar,
                                      key: *const gchar, length: *mut gsize,
                                      error: *mut *mut GError)
     -> *mut gdouble;
    pub fn g_key_file_set_integer_list(key_file: *mut GKeyFile,
                                       group_name: *const gchar,
                                       key: *const gchar, list: *mut gint,
                                       length: gsize);
    pub fn g_key_file_set_comment(key_file: *mut GKeyFile,
                                  group_name: *const gchar, key: *const gchar,
                                  comment: *const gchar,
                                  error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_get_comment(key_file: *mut GKeyFile,
                                  group_name: *const gchar, key: *const gchar,
                                  error: *mut *mut GError) -> *mut gchar;
    pub fn g_key_file_remove_comment(key_file: *mut GKeyFile,
                                     group_name: *const gchar,
                                     key: *const gchar,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_remove_key(key_file: *mut GKeyFile,
                                 group_name: *const gchar, key: *const gchar,
                                 error: *mut *mut GError) -> gboolean;
    pub fn g_key_file_remove_group(key_file: *mut GKeyFile,
                                   group_name: *const gchar,
                                   error: *mut *mut GError) -> gboolean;
    pub fn g_mapped_file_new(filename: *const gchar, writable: gboolean,
                             error: *mut *mut GError) -> *mut GMappedFile;
    pub fn g_mapped_file_new_from_fd(fd: gint, writable: gboolean,
                                     error: *mut *mut GError)
     -> *mut GMappedFile;
    pub fn g_mapped_file_get_length(file: *mut GMappedFile) -> gsize;
    pub fn g_mapped_file_get_contents(file: *mut GMappedFile) -> *mut gchar;
    pub fn g_mapped_file_get_bytes(file: *mut GMappedFile) -> *mut GBytes;
    pub fn g_mapped_file_ref(file: *mut GMappedFile) -> *mut GMappedFile;
    pub fn g_mapped_file_unref(file: *mut GMappedFile);
    pub fn g_mapped_file_free(file: *mut GMappedFile);
    pub fn g_markup_error_quark() -> GQuark;
    pub fn g_markup_parse_context_new(parser: *const GMarkupParser,
                                      flags: GMarkupParseFlags,
                                      user_data: gpointer,
                                      user_data_dnotify: GDestroyNotify)
     -> *mut GMarkupParseContext;
    pub fn g_markup_parse_context_ref(context: *mut GMarkupParseContext)
     -> *mut GMarkupParseContext;
    pub fn g_markup_parse_context_unref(context: *mut GMarkupParseContext);
    pub fn g_markup_parse_context_free(context: *mut GMarkupParseContext);
    pub fn g_markup_parse_context_parse(context: *mut GMarkupParseContext,
                                        text: *const gchar, text_len: gssize,
                                        error: *mut *mut GError) -> gboolean;
    pub fn g_markup_parse_context_push(context: *mut GMarkupParseContext,
                                       parser: *const GMarkupParser,
                                       user_data: gpointer);
    pub fn g_markup_parse_context_pop(context: *mut GMarkupParseContext)
     -> gpointer;
    pub fn g_markup_parse_context_end_parse(context: *mut GMarkupParseContext,
                                            error: *mut *mut GError)
     -> gboolean;
    pub fn g_markup_parse_context_get_element(context:
                                                  *mut GMarkupParseContext)
     -> *const gchar;
    pub fn g_markup_parse_context_get_element_stack(context:
                                                        *mut GMarkupParseContext)
     -> *const GSList;
    pub fn g_markup_parse_context_get_position(context:
                                                   *mut GMarkupParseContext,
                                               line_number: *mut gint,
                                               char_number: *mut gint);
    pub fn g_markup_parse_context_get_user_data(context:
                                                    *mut GMarkupParseContext)
     -> gpointer;
    pub fn g_markup_escape_text(text: *const gchar, length: gssize)
     -> *mut gchar;
    pub fn g_markup_printf_escaped(format: *const ::std::os::raw::c_char, ...)
     -> *mut gchar;
    pub fn g_markup_vprintf_escaped(format: *const ::std::os::raw::c_char,
                                    args: va_list) -> *mut gchar;
    pub fn g_markup_collect_attributes(element_name: *const gchar,
                                       attribute_names: *mut *const gchar,
                                       attribute_values: *mut *const gchar,
                                       error: *mut *mut GError,
                                       first_type: GMarkupCollectType,
                                       first_attr: *const gchar, ...)
     -> gboolean;
    pub fn g_printf_string_upper_bound(format: *const gchar, args: va_list)
     -> gsize;
    pub fn g_log_set_handler(log_domain: *const gchar,
                             log_levels: GLogLevelFlags, log_func: GLogFunc,
                             user_data: gpointer) -> guint;
    pub fn g_log_set_handler_full(log_domain: *const gchar,
                                  log_levels: GLogLevelFlags,
                                  log_func: GLogFunc, user_data: gpointer,
                                  destroy: GDestroyNotify) -> guint;
    pub fn g_log_remove_handler(log_domain: *const gchar, handler_id: guint);
    pub fn g_log_default_handler(log_domain: *const gchar,
                                 log_level: GLogLevelFlags,
                                 message: *const gchar,
                                 unused_data: gpointer);
    pub fn g_log_set_default_handler(log_func: GLogFunc, user_data: gpointer)
     -> GLogFunc;
    pub fn g_log(log_domain: *const gchar, log_level: GLogLevelFlags,
                 format: *const gchar, ...);
    pub fn g_logv(log_domain: *const gchar, log_level: GLogLevelFlags,
                  format: *const gchar, args: va_list);
    pub fn g_log_set_fatal_mask(log_domain: *const gchar,
                                fatal_mask: GLogLevelFlags) -> GLogLevelFlags;
    pub fn g_log_set_always_fatal(fatal_mask: GLogLevelFlags)
     -> GLogLevelFlags;
    pub fn _g_log_fallback_handler(log_domain: *const gchar,
                                   log_level: GLogLevelFlags,
                                   message: *const gchar,
                                   unused_data: gpointer);
    pub fn g_return_if_fail_warning(log_domain: *const ::std::os::raw::c_char,
                                    pretty_function:
                                        *const ::std::os::raw::c_char,
                                    expression:
                                        *const ::std::os::raw::c_char);
    pub fn g_warn_message(domain: *const ::std::os::raw::c_char,
                          file: *const ::std::os::raw::c_char,
                          line: ::std::os::raw::c_int,
                          func: *const ::std::os::raw::c_char,
                          warnexpr: *const ::std::os::raw::c_char);
    pub fn g_assert_warning(log_domain: *const ::std::os::raw::c_char,
                            file: *const ::std::os::raw::c_char,
                            line: ::std::os::raw::c_int,
                            pretty_function: *const ::std::os::raw::c_char,
                            expression: *const ::std::os::raw::c_char);
    pub fn g_print(format: *const gchar, ...);
    pub fn g_set_print_handler(func: GPrintFunc) -> GPrintFunc;
    pub fn g_printerr(format: *const gchar, ...);
    pub fn g_set_printerr_handler(func: GPrintFunc) -> GPrintFunc;
    pub fn g_option_error_quark() -> GQuark;
    pub fn g_option_context_new(parameter_string: *const gchar)
     -> *mut GOptionContext;
    pub fn g_option_context_set_summary(context: *mut GOptionContext,
                                        summary: *const gchar);
    pub fn g_option_context_get_summary(context: *mut GOptionContext)
     -> *const gchar;
    pub fn g_option_context_set_description(context: *mut GOptionContext,
                                            description: *const gchar);
    pub fn g_option_context_get_description(context: *mut GOptionContext)
     -> *const gchar;
    pub fn g_option_context_free(context: *mut GOptionContext);
    pub fn g_option_context_set_help_enabled(context: *mut GOptionContext,
                                             help_enabled: gboolean);
    pub fn g_option_context_get_help_enabled(context: *mut GOptionContext)
     -> gboolean;
    pub fn g_option_context_set_ignore_unknown_options(context:
                                                           *mut GOptionContext,
                                                       ignore_unknown:
                                                           gboolean);
    pub fn g_option_context_get_ignore_unknown_options(context:
                                                           *mut GOptionContext)
     -> gboolean;
    pub fn g_option_context_set_strict_posix(context: *mut GOptionContext,
                                             strict_posix: gboolean);
    pub fn g_option_context_get_strict_posix(context: *mut GOptionContext)
     -> gboolean;
    pub fn g_option_context_add_main_entries(context: *mut GOptionContext,
                                             entries: *const GOptionEntry,
                                             translation_domain:
                                                 *const gchar);
    pub fn g_option_context_parse(context: *mut GOptionContext,
                                  argc: *mut gint, argv: *mut *mut *mut gchar,
                                  error: *mut *mut GError) -> gboolean;
    pub fn g_option_context_parse_strv(context: *mut GOptionContext,
                                       arguments: *mut *mut *mut gchar,
                                       error: *mut *mut GError) -> gboolean;
    pub fn g_option_context_set_translate_func(context: *mut GOptionContext,
                                               func: GTranslateFunc,
                                               data: gpointer,
                                               destroy_notify:
                                                   GDestroyNotify);
    pub fn g_option_context_set_translation_domain(context:
                                                       *mut GOptionContext,
                                                   domain: *const gchar);
    pub fn g_option_context_add_group(context: *mut GOptionContext,
                                      group: *mut GOptionGroup);
    pub fn g_option_context_set_main_group(context: *mut GOptionContext,
                                           group: *mut GOptionGroup);
    pub fn g_option_context_get_main_group(context: *mut GOptionContext)
     -> *mut GOptionGroup;
    pub fn g_option_context_get_help(context: *mut GOptionContext,
                                     main_help: gboolean,
                                     group: *mut GOptionGroup) -> *mut gchar;
    pub fn g_option_group_new(name: *const gchar, description: *const gchar,
                              help_description: *const gchar,
                              user_data: gpointer, destroy: GDestroyNotify)
     -> *mut GOptionGroup;
    pub fn g_option_group_set_parse_hooks(group: *mut GOptionGroup,
                                          pre_parse_func: GOptionParseFunc,
                                          post_parse_func: GOptionParseFunc);
    pub fn g_option_group_set_error_hook(group: *mut GOptionGroup,
                                         error_func: GOptionErrorFunc);
    pub fn g_option_group_free(group: *mut GOptionGroup);
    pub fn g_option_group_ref(group: *mut GOptionGroup) -> *mut GOptionGroup;
    pub fn g_option_group_unref(group: *mut GOptionGroup);
    pub fn g_option_group_add_entries(group: *mut GOptionGroup,
                                      entries: *const GOptionEntry);
    pub fn g_option_group_set_translate_func(group: *mut GOptionGroup,
                                             func: GTranslateFunc,
                                             data: gpointer,
                                             destroy_notify: GDestroyNotify);
    pub fn g_option_group_set_translation_domain(group: *mut GOptionGroup,
                                                 domain: *const gchar);
    pub fn g_pattern_spec_new(pattern: *const gchar) -> *mut GPatternSpec;
    pub fn g_pattern_spec_free(pspec: *mut GPatternSpec);
    pub fn g_pattern_spec_equal(pspec1: *mut GPatternSpec,
                                pspec2: *mut GPatternSpec) -> gboolean;
    pub fn g_pattern_match(pspec: *mut GPatternSpec, string_length: guint,
                           string: *const gchar,
                           string_reversed: *const gchar) -> gboolean;
    pub fn g_pattern_match_string(pspec: *mut GPatternSpec,
                                  string: *const gchar) -> gboolean;
    pub fn g_pattern_match_simple(pattern: *const gchar, string: *const gchar)
     -> gboolean;
    pub fn g_spaced_primes_closest(num: guint) -> guint;
    pub fn g_qsort_with_data(pbase: gconstpointer, total_elems: gint,
                             size: gsize, compare_func: GCompareDataFunc,
                             user_data: gpointer);
    pub fn g_queue_new() -> *mut GQueue;
    pub fn g_queue_free(queue: *mut GQueue);
    pub fn g_queue_free_full(queue: *mut GQueue, free_func: GDestroyNotify);
    pub fn g_queue_init(queue: *mut GQueue);
    pub fn g_queue_clear(queue: *mut GQueue);
    pub fn g_queue_is_empty(queue: *mut GQueue) -> gboolean;
    pub fn g_queue_get_length(queue: *mut GQueue) -> guint;
    pub fn g_queue_reverse(queue: *mut GQueue);
    pub fn g_queue_copy(queue: *mut GQueue) -> *mut GQueue;
    pub fn g_queue_foreach(queue: *mut GQueue, func: GFunc,
                           user_data: gpointer);
    pub fn g_queue_find(queue: *mut GQueue, data: gconstpointer)
     -> *mut GList;
    pub fn g_queue_find_custom(queue: *mut GQueue, data: gconstpointer,
                               func: GCompareFunc) -> *mut GList;
    pub fn g_queue_sort(queue: *mut GQueue, compare_func: GCompareDataFunc,
                        user_data: gpointer);
    pub fn g_queue_push_head(queue: *mut GQueue, data: gpointer);
    pub fn g_queue_push_tail(queue: *mut GQueue, data: gpointer);
    pub fn g_queue_push_nth(queue: *mut GQueue, data: gpointer, n: gint);
    pub fn g_queue_pop_head(queue: *mut GQueue) -> gpointer;
    pub fn g_queue_pop_tail(queue: *mut GQueue) -> gpointer;
    pub fn g_queue_pop_nth(queue: *mut GQueue, n: guint) -> gpointer;
    pub fn g_queue_peek_head(queue: *mut GQueue) -> gpointer;
    pub fn g_queue_peek_tail(queue: *mut GQueue) -> gpointer;
    pub fn g_queue_peek_nth(queue: *mut GQueue, n: guint) -> gpointer;
    pub fn g_queue_index(queue: *mut GQueue, data: gconstpointer) -> gint;
    pub fn g_queue_remove(queue: *mut GQueue, data: gconstpointer)
     -> gboolean;
    pub fn g_queue_remove_all(queue: *mut GQueue, data: gconstpointer)
     -> guint;
    pub fn g_queue_insert_before(queue: *mut GQueue, sibling: *mut GList,
                                 data: gpointer);
    pub fn g_queue_insert_after(queue: *mut GQueue, sibling: *mut GList,
                                data: gpointer);
    pub fn g_queue_insert_sorted(queue: *mut GQueue, data: gpointer,
                                 func: GCompareDataFunc, user_data: gpointer);
    pub fn g_queue_push_head_link(queue: *mut GQueue, link_: *mut GList);
    pub fn g_queue_push_tail_link(queue: *mut GQueue, link_: *mut GList);
    pub fn g_queue_push_nth_link(queue: *mut GQueue, n: gint,
                                 link_: *mut GList);
    pub fn g_queue_pop_head_link(queue: *mut GQueue) -> *mut GList;
    pub fn g_queue_pop_tail_link(queue: *mut GQueue) -> *mut GList;
    pub fn g_queue_pop_nth_link(queue: *mut GQueue, n: guint) -> *mut GList;
    pub fn g_queue_peek_head_link(queue: *mut GQueue) -> *mut GList;
    pub fn g_queue_peek_tail_link(queue: *mut GQueue) -> *mut GList;
    pub fn g_queue_peek_nth_link(queue: *mut GQueue, n: guint) -> *mut GList;
    pub fn g_queue_link_index(queue: *mut GQueue, link_: *mut GList) -> gint;
    pub fn g_queue_unlink(queue: *mut GQueue, link_: *mut GList);
    pub fn g_queue_delete_link(queue: *mut GQueue, link_: *mut GList);
    pub fn g_rand_new_with_seed(seed: guint32) -> *mut GRand;
    pub fn g_rand_new_with_seed_array(seed: *const guint32,
                                      seed_length: guint) -> *mut GRand;
    pub fn g_rand_new() -> *mut GRand;
    pub fn g_rand_free(rand_: *mut GRand);
    pub fn g_rand_copy(rand_: *mut GRand) -> *mut GRand;
    pub fn g_rand_set_seed(rand_: *mut GRand, seed: guint32);
    pub fn g_rand_set_seed_array(rand_: *mut GRand, seed: *const guint32,
                                 seed_length: guint);
    pub fn g_rand_int(rand_: *mut GRand) -> guint32;
    pub fn g_rand_int_range(rand_: *mut GRand, begin: gint32, end: gint32)
     -> gint32;
    pub fn g_rand_double(rand_: *mut GRand) -> gdouble;
    pub fn g_rand_double_range(rand_: *mut GRand, begin: gdouble,
                               end: gdouble) -> gdouble;
    pub fn g_random_set_seed(seed: guint32);
    pub fn g_random_int() -> guint32;
    pub fn g_random_int_range(begin: gint32, end: gint32) -> gint32;
    pub fn g_random_double() -> gdouble;
    pub fn g_random_double_range(begin: gdouble, end: gdouble) -> gdouble;
    pub fn g_regex_error_quark() -> GQuark;
    pub fn g_regex_new(pattern: *const gchar,
                       compile_options: GRegexCompileFlags,
                       match_options: GRegexMatchFlags,
                       error: *mut *mut GError) -> *mut GRegex;
    pub fn g_regex_ref(regex: *mut GRegex) -> *mut GRegex;
    pub fn g_regex_unref(regex: *mut GRegex);
    pub fn g_regex_get_pattern(regex: *const GRegex) -> *const gchar;
    pub fn g_regex_get_max_backref(regex: *const GRegex) -> gint;
    pub fn g_regex_get_capture_count(regex: *const GRegex) -> gint;
    pub fn g_regex_get_has_cr_or_lf(regex: *const GRegex) -> gboolean;
    pub fn g_regex_get_max_lookbehind(regex: *const GRegex) -> gint;
    pub fn g_regex_get_string_number(regex: *const GRegex, name: *const gchar)
     -> gint;
    pub fn g_regex_escape_string(string: *const gchar, length: gint)
     -> *mut gchar;
    pub fn g_regex_escape_nul(string: *const gchar, length: gint)
     -> *mut gchar;
    pub fn g_regex_get_compile_flags(regex: *const GRegex)
     -> GRegexCompileFlags;
    pub fn g_regex_get_match_flags(regex: *const GRegex) -> GRegexMatchFlags;
    pub fn g_regex_match_simple(pattern: *const gchar, string: *const gchar,
                                compile_options: GRegexCompileFlags,
                                match_options: GRegexMatchFlags) -> gboolean;
    pub fn g_regex_match(regex: *const GRegex, string: *const gchar,
                         match_options: GRegexMatchFlags,
                         match_info: *mut *mut GMatchInfo) -> gboolean;
    pub fn g_regex_match_full(regex: *const GRegex, string: *const gchar,
                              string_len: gssize, start_position: gint,
                              match_options: GRegexMatchFlags,
                              match_info: *mut *mut GMatchInfo,
                              error: *mut *mut GError) -> gboolean;
    pub fn g_regex_match_all(regex: *const GRegex, string: *const gchar,
                             match_options: GRegexMatchFlags,
                             match_info: *mut *mut GMatchInfo) -> gboolean;
    pub fn g_regex_match_all_full(regex: *const GRegex, string: *const gchar,
                                  string_len: gssize, start_position: gint,
                                  match_options: GRegexMatchFlags,
                                  match_info: *mut *mut GMatchInfo,
                                  error: *mut *mut GError) -> gboolean;
    pub fn g_regex_split_simple(pattern: *const gchar, string: *const gchar,
                                compile_options: GRegexCompileFlags,
                                match_options: GRegexMatchFlags)
     -> *mut *mut gchar;
    pub fn g_regex_split(regex: *const GRegex, string: *const gchar,
                         match_options: GRegexMatchFlags) -> *mut *mut gchar;
    pub fn g_regex_split_full(regex: *const GRegex, string: *const gchar,
                              string_len: gssize, start_position: gint,
                              match_options: GRegexMatchFlags,
                              max_tokens: gint, error: *mut *mut GError)
     -> *mut *mut gchar;
    pub fn g_regex_replace(regex: *const GRegex, string: *const gchar,
                           string_len: gssize, start_position: gint,
                           replacement: *const gchar,
                           match_options: GRegexMatchFlags,
                           error: *mut *mut GError) -> *mut gchar;
    pub fn g_regex_replace_literal(regex: *const GRegex, string: *const gchar,
                                   string_len: gssize, start_position: gint,
                                   replacement: *const gchar,
                                   match_options: GRegexMatchFlags,
                                   error: *mut *mut GError) -> *mut gchar;
    pub fn g_regex_replace_eval(regex: *const GRegex, string: *const gchar,
                                string_len: gssize, start_position: gint,
                                match_options: GRegexMatchFlags,
                                eval: GRegexEvalCallback, user_data: gpointer,
                                error: *mut *mut GError) -> *mut gchar;
    pub fn g_regex_check_replacement(replacement: *const gchar,
                                     has_references: *mut gboolean,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_match_info_get_regex(match_info: *const GMatchInfo)
     -> *mut GRegex;
    pub fn g_match_info_get_string(match_info: *const GMatchInfo)
     -> *const gchar;
    pub fn g_match_info_ref(match_info: *mut GMatchInfo) -> *mut GMatchInfo;
    pub fn g_match_info_unref(match_info: *mut GMatchInfo);
    pub fn g_match_info_free(match_info: *mut GMatchInfo);
    pub fn g_match_info_next(match_info: *mut GMatchInfo,
                             error: *mut *mut GError) -> gboolean;
    pub fn g_match_info_matches(match_info: *const GMatchInfo) -> gboolean;
    pub fn g_match_info_get_match_count(match_info: *const GMatchInfo)
     -> gint;
    pub fn g_match_info_is_partial_match(match_info: *const GMatchInfo)
     -> gboolean;
    pub fn g_match_info_expand_references(match_info: *const GMatchInfo,
                                          string_to_expand: *const gchar,
                                          error: *mut *mut GError)
     -> *mut gchar;
    pub fn g_match_info_fetch(match_info: *const GMatchInfo, match_num: gint)
     -> *mut gchar;
    pub fn g_match_info_fetch_pos(match_info: *const GMatchInfo,
                                  match_num: gint, start_pos: *mut gint,
                                  end_pos: *mut gint) -> gboolean;
    pub fn g_match_info_fetch_named(match_info: *const GMatchInfo,
                                    name: *const gchar) -> *mut gchar;
    pub fn g_match_info_fetch_named_pos(match_info: *const GMatchInfo,
                                        name: *const gchar,
                                        start_pos: *mut gint,
                                        end_pos: *mut gint) -> gboolean;
    pub fn g_match_info_fetch_all(match_info: *const GMatchInfo)
     -> *mut *mut gchar;
    pub fn g_scanner_new(config_templ: *const GScannerConfig)
     -> *mut GScanner;
    pub fn g_scanner_destroy(scanner: *mut GScanner);
    pub fn g_scanner_input_file(scanner: *mut GScanner, input_fd: gint);
    pub fn g_scanner_sync_file_offset(scanner: *mut GScanner);
    pub fn g_scanner_input_text(scanner: *mut GScanner, text: *const gchar,
                                text_len: guint);
    pub fn g_scanner_get_next_token(scanner: *mut GScanner) -> GTokenType;
    pub fn g_scanner_peek_next_token(scanner: *mut GScanner) -> GTokenType;
    pub fn g_scanner_cur_token(scanner: *mut GScanner) -> GTokenType;
    pub fn g_scanner_cur_value(scanner: *mut GScanner) -> GTokenValue;
    pub fn g_scanner_cur_line(scanner: *mut GScanner) -> guint;
    pub fn g_scanner_cur_position(scanner: *mut GScanner) -> guint;
    pub fn g_scanner_eof(scanner: *mut GScanner) -> gboolean;
    pub fn g_scanner_set_scope(scanner: *mut GScanner, scope_id: guint)
     -> guint;
    pub fn g_scanner_scope_add_symbol(scanner: *mut GScanner, scope_id: guint,
                                      symbol: *const gchar, value: gpointer);
    pub fn g_scanner_scope_remove_symbol(scanner: *mut GScanner,
                                         scope_id: guint,
                                         symbol: *const gchar);
    pub fn g_scanner_scope_lookup_symbol(scanner: *mut GScanner,
                                         scope_id: guint,
                                         symbol: *const gchar) -> gpointer;
    pub fn g_scanner_scope_foreach_symbol(scanner: *mut GScanner,
                                          scope_id: guint, func: GHFunc,
                                          user_data: gpointer);
    pub fn g_scanner_lookup_symbol(scanner: *mut GScanner,
                                   symbol: *const gchar) -> gpointer;
    pub fn g_scanner_unexp_token(scanner: *mut GScanner,
                                 expected_token: GTokenType,
                                 identifier_spec: *const gchar,
                                 symbol_spec: *const gchar,
                                 symbol_name: *const gchar,
                                 message: *const gchar, is_error: gint);
    pub fn g_scanner_error(scanner: *mut GScanner, format: *const gchar, ...);
    pub fn g_scanner_warn(scanner: *mut GScanner, format: *const gchar, ...);
    pub fn g_sequence_new(data_destroy: GDestroyNotify) -> *mut GSequence;
    pub fn g_sequence_free(seq: *mut GSequence);
    pub fn g_sequence_get_length(seq: *mut GSequence) -> gint;
    pub fn g_sequence_foreach(seq: *mut GSequence, func: GFunc,
                              user_data: gpointer);
    pub fn g_sequence_foreach_range(begin: *mut GSequenceIter,
                                    end: *mut GSequenceIter, func: GFunc,
                                    user_data: gpointer);
    pub fn g_sequence_sort(seq: *mut GSequence, cmp_func: GCompareDataFunc,
                           cmp_data: gpointer);
    pub fn g_sequence_sort_iter(seq: *mut GSequence,
                                cmp_func: GSequenceIterCompareFunc,
                                cmp_data: gpointer);
    pub fn g_sequence_is_empty(seq: *mut GSequence) -> gboolean;
    pub fn g_sequence_get_begin_iter(seq: *mut GSequence)
     -> *mut GSequenceIter;
    pub fn g_sequence_get_end_iter(seq: *mut GSequence) -> *mut GSequenceIter;
    pub fn g_sequence_get_iter_at_pos(seq: *mut GSequence, pos: gint)
     -> *mut GSequenceIter;
    pub fn g_sequence_append(seq: *mut GSequence, data: gpointer)
     -> *mut GSequenceIter;
    pub fn g_sequence_prepend(seq: *mut GSequence, data: gpointer)
     -> *mut GSequenceIter;
    pub fn g_sequence_insert_before(iter: *mut GSequenceIter, data: gpointer)
     -> *mut GSequenceIter;
    pub fn g_sequence_move(src: *mut GSequenceIter, dest: *mut GSequenceIter);
    pub fn g_sequence_swap(a: *mut GSequenceIter, b: *mut GSequenceIter);
    pub fn g_sequence_insert_sorted(seq: *mut GSequence, data: gpointer,
                                    cmp_func: GCompareDataFunc,
                                    cmp_data: gpointer) -> *mut GSequenceIter;
    pub fn g_sequence_insert_sorted_iter(seq: *mut GSequence, data: gpointer,
                                         iter_cmp: GSequenceIterCompareFunc,
                                         cmp_data: gpointer)
     -> *mut GSequenceIter;
    pub fn g_sequence_sort_changed(iter: *mut GSequenceIter,
                                   cmp_func: GCompareDataFunc,
                                   cmp_data: gpointer);
    pub fn g_sequence_sort_changed_iter(iter: *mut GSequenceIter,
                                        iter_cmp: GSequenceIterCompareFunc,
                                        cmp_data: gpointer);
    pub fn g_sequence_remove(iter: *mut GSequenceIter);
    pub fn g_sequence_remove_range(begin: *mut GSequenceIter,
                                   end: *mut GSequenceIter);
    pub fn g_sequence_move_range(dest: *mut GSequenceIter,
                                 begin: *mut GSequenceIter,
                                 end: *mut GSequenceIter);
    pub fn g_sequence_search(seq: *mut GSequence, data: gpointer,
                             cmp_func: GCompareDataFunc, cmp_data: gpointer)
     -> *mut GSequenceIter;
    pub fn g_sequence_search_iter(seq: *mut GSequence, data: gpointer,
                                  iter_cmp: GSequenceIterCompareFunc,
                                  cmp_data: gpointer) -> *mut GSequenceIter;
    pub fn g_sequence_lookup(seq: *mut GSequence, data: gpointer,
                             cmp_func: GCompareDataFunc, cmp_data: gpointer)
     -> *mut GSequenceIter;
    pub fn g_sequence_lookup_iter(seq: *mut GSequence, data: gpointer,
                                  iter_cmp: GSequenceIterCompareFunc,
                                  cmp_data: gpointer) -> *mut GSequenceIter;
    pub fn g_sequence_get(iter: *mut GSequenceIter) -> gpointer;
    pub fn g_sequence_set(iter: *mut GSequenceIter, data: gpointer);
    pub fn g_sequence_iter_is_begin(iter: *mut GSequenceIter) -> gboolean;
    pub fn g_sequence_iter_is_end(iter: *mut GSequenceIter) -> gboolean;
    pub fn g_sequence_iter_next(iter: *mut GSequenceIter)
     -> *mut GSequenceIter;
    pub fn g_sequence_iter_prev(iter: *mut GSequenceIter)
     -> *mut GSequenceIter;
    pub fn g_sequence_iter_get_position(iter: *mut GSequenceIter) -> gint;
    pub fn g_sequence_iter_move(iter: *mut GSequenceIter, delta: gint)
     -> *mut GSequenceIter;
    pub fn g_sequence_iter_get_sequence(iter: *mut GSequenceIter)
     -> *mut GSequence;
    pub fn g_sequence_iter_compare(a: *mut GSequenceIter,
                                   b: *mut GSequenceIter) -> gint;
    pub fn g_sequence_range_get_midpoint(begin: *mut GSequenceIter,
                                         end: *mut GSequenceIter)
     -> *mut GSequenceIter;
    pub fn g_shell_error_quark() -> GQuark;
    pub fn g_shell_quote(unquoted_string: *const gchar) -> *mut gchar;
    pub fn g_shell_unquote(quoted_string: *const gchar,
                           error: *mut *mut GError) -> *mut gchar;
    pub fn g_shell_parse_argv(command_line: *const gchar, argcp: *mut gint,
                              argvp: *mut *mut *mut gchar,
                              error: *mut *mut GError) -> gboolean;
    pub fn g_slice_alloc(block_size: gsize) -> gpointer;
    pub fn g_slice_alloc0(block_size: gsize) -> gpointer;
    pub fn g_slice_copy(block_size: gsize, mem_block: gconstpointer)
     -> gpointer;
    pub fn g_slice_free1(block_size: gsize, mem_block: gpointer);
    pub fn g_slice_free_chain_with_offset(block_size: gsize,
                                          mem_chain: gpointer,
                                          next_offset: gsize);
    pub fn g_slice_set_config(ckey: GSliceConfig, value: gint64);
    pub fn g_slice_get_config(ckey: GSliceConfig) -> gint64;
    pub fn g_slice_get_config_state(ckey: GSliceConfig, address: gint64,
                                    n_values: *mut guint) -> *mut gint64;
    pub fn g_spawn_error_quark() -> GQuark;
    pub fn g_spawn_exit_error_quark() -> GQuark;
    pub fn g_spawn_async(working_directory: *const gchar,
                         argv: *mut *mut gchar, envp: *mut *mut gchar,
                         flags: GSpawnFlags,
                         child_setup: GSpawnChildSetupFunc,
                         user_data: gpointer, child_pid: *mut GPid,
                         error: *mut *mut GError) -> gboolean;
    pub fn g_spawn_async_with_pipes(working_directory: *const gchar,
                                    argv: *mut *mut gchar,
                                    envp: *mut *mut gchar, flags: GSpawnFlags,
                                    child_setup: GSpawnChildSetupFunc,
                                    user_data: gpointer, child_pid: *mut GPid,
                                    standard_input: *mut gint,
                                    standard_output: *mut gint,
                                    standard_error: *mut gint,
                                    error: *mut *mut GError) -> gboolean;
    pub fn g_spawn_sync(working_directory: *const gchar,
                        argv: *mut *mut gchar, envp: *mut *mut gchar,
                        flags: GSpawnFlags, child_setup: GSpawnChildSetupFunc,
                        user_data: gpointer, standard_output: *mut *mut gchar,
                        standard_error: *mut *mut gchar,
                        exit_status: *mut gint, error: *mut *mut GError)
     -> gboolean;
    pub fn g_spawn_command_line_sync(command_line: *const gchar,
                                     standard_output: *mut *mut gchar,
                                     standard_error: *mut *mut gchar,
                                     exit_status: *mut gint,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_spawn_command_line_async(command_line: *const gchar,
                                      error: *mut *mut GError) -> gboolean;
    pub fn g_spawn_check_exit_status(exit_status: gint,
                                     error: *mut *mut GError) -> gboolean;
    pub fn g_spawn_close_pid(pid: GPid);
    pub fn g_ascii_tolower(c: gchar) -> gchar;
    pub fn g_ascii_toupper(c: gchar) -> gchar;
    pub fn g_ascii_digit_value(c: gchar) -> gint;
    pub fn g_ascii_xdigit_value(c: gchar) -> gint;
    pub fn g_strdelimit(string: *mut gchar, delimiters: *const gchar,
                        new_delimiter: gchar) -> *mut gchar;
    pub fn g_strcanon(string: *mut gchar, valid_chars: *const gchar,
                      substitutor: gchar) -> *mut gchar;
    pub fn g_strerror(errnum: gint) -> *const gchar;
    pub fn g_strsignal(signum: gint) -> *const gchar;
    pub fn g_strreverse(string: *mut gchar) -> *mut gchar;
    pub fn g_strlcpy(dest: *mut gchar, src: *const gchar, dest_size: gsize)
     -> gsize;
    pub fn g_strlcat(dest: *mut gchar, src: *const gchar, dest_size: gsize)
     -> gsize;
    pub fn g_strstr_len(haystack: *const gchar, haystack_len: gssize,
                        needle: *const gchar) -> *mut gchar;
    pub fn g_strrstr(haystack: *const gchar, needle: *const gchar)
     -> *mut gchar;
    pub fn g_strrstr_len(haystack: *const gchar, haystack_len: gssize,
                         needle: *const gchar) -> *mut gchar;
    pub fn g_str_has_suffix(str: *const gchar, suffix: *const gchar)
     -> gboolean;
    pub fn g_str_has_prefix(str: *const gchar, prefix: *const gchar)
     -> gboolean;
    pub fn g_strtod(nptr: *const gchar, endptr: *mut *mut gchar) -> gdouble;
    pub fn g_ascii_strtod(nptr: *const gchar, endptr: *mut *mut gchar)
     -> gdouble;
    pub fn g_ascii_strtoull(nptr: *const gchar, endptr: *mut *mut gchar,
                            base: guint) -> guint64;
    pub fn g_ascii_strtoll(nptr: *const gchar, endptr: *mut *mut gchar,
                           base: guint) -> gint64;
    pub fn g_ascii_dtostr(buffer: *mut gchar, buf_len: gint, d: gdouble)
     -> *mut gchar;
    pub fn g_ascii_formatd(buffer: *mut gchar, buf_len: gint,
                           format: *const gchar, d: gdouble) -> *mut gchar;
    pub fn g_strchug(string: *mut gchar) -> *mut gchar;
    pub fn g_strchomp(string: *mut gchar) -> *mut gchar;
    pub fn g_ascii_strcasecmp(s1: *const gchar, s2: *const gchar) -> gint;
    pub fn g_ascii_strncasecmp(s1: *const gchar, s2: *const gchar, n: gsize)
     -> gint;
    pub fn g_ascii_strdown(str: *const gchar, len: gssize) -> *mut gchar;
    pub fn g_ascii_strup(str: *const gchar, len: gssize) -> *mut gchar;
    pub fn g_str_is_ascii(str: *const gchar) -> gboolean;
    pub fn g_strcasecmp(s1: *const gchar, s2: *const gchar) -> gint;
    pub fn g_strncasecmp(s1: *const gchar, s2: *const gchar, n: guint)
     -> gint;
    pub fn g_strdown(string: *mut gchar) -> *mut gchar;
    pub fn g_strup(string: *mut gchar) -> *mut gchar;
    pub fn g_strdup(str: *const gchar) -> *mut gchar;
    pub fn g_strdup_printf(format: *const gchar, ...) -> *mut gchar;
    pub fn g_strdup_vprintf(format: *const gchar, args: va_list)
     -> *mut gchar;
    pub fn g_strndup(str: *const gchar, n: gsize) -> *mut gchar;
    pub fn g_strnfill(length: gsize, fill_char: gchar) -> *mut gchar;
    pub fn g_strconcat(string1: *const gchar, ...) -> *mut gchar;
    pub fn g_strjoin(separator: *const gchar, ...) -> *mut gchar;
    pub fn g_strcompress(source: *const gchar) -> *mut gchar;
    pub fn g_strescape(source: *const gchar, exceptions: *const gchar)
     -> *mut gchar;
    pub fn g_memdup(mem: gconstpointer, byte_size: guint) -> gpointer;
    pub fn g_strsplit(string: *const gchar, delimiter: *const gchar,
                      max_tokens: gint) -> *mut *mut gchar;
    pub fn g_strsplit_set(string: *const gchar, delimiters: *const gchar,
                          max_tokens: gint) -> *mut *mut gchar;
    pub fn g_strjoinv(separator: *const gchar, str_array: *mut *mut gchar)
     -> *mut gchar;
    pub fn g_strfreev(str_array: *mut *mut gchar);
    pub fn g_strdupv(str_array: *mut *mut gchar) -> *mut *mut gchar;
    pub fn g_strv_length(str_array: *mut *mut gchar) -> guint;
    pub fn g_stpcpy(dest: *mut gchar, src: *const ::std::os::raw::c_char)
     -> *mut gchar;
    pub fn g_str_to_ascii(str: *const gchar, from_locale: *const gchar)
     -> *mut gchar;
    pub fn g_str_tokenize_and_fold(string: *const gchar,
                                   translit_locale: *const gchar,
                                   ascii_alternates: *mut *mut *mut gchar)
     -> *mut *mut gchar;
    pub fn g_str_match_string(search_term: *const gchar,
                              potential_hit: *const gchar,
                              accept_alternates: gboolean) -> gboolean;
    pub fn g_strv_contains(strv: *const *const gchar, str: *const gchar)
     -> gboolean;
    pub fn g_string_chunk_new(size: gsize) -> *mut GStringChunk;
    pub fn g_string_chunk_free(chunk: *mut GStringChunk);
    pub fn g_string_chunk_clear(chunk: *mut GStringChunk);
    pub fn g_string_chunk_insert(chunk: *mut GStringChunk,
                                 string: *const gchar) -> *mut gchar;
    pub fn g_string_chunk_insert_len(chunk: *mut GStringChunk,
                                     string: *const gchar, len: gssize)
     -> *mut gchar;
    pub fn g_string_chunk_insert_const(chunk: *mut GStringChunk,
                                       string: *const gchar) -> *mut gchar;
    pub fn g_strcmp0(str1: *const ::std::os::raw::c_char,
                     str2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn g_test_minimized_result(minimized_quantity:
                                       ::std::os::raw::c_double,
                                   format:
                                       *const ::std::os::raw::c_char, ...);
    pub fn g_test_maximized_result(maximized_quantity:
                                       ::std::os::raw::c_double,
                                   format:
                                       *const ::std::os::raw::c_char, ...);
    pub fn g_test_init(argc: *mut ::std::os::raw::c_int,
                       argv: *mut *mut *mut ::std::os::raw::c_char, ...);
    pub fn g_test_subprocess() -> gboolean;
    pub fn g_test_run() -> ::std::os::raw::c_int;
    pub fn g_test_add_func(testpath: *const ::std::os::raw::c_char,
                           test_func: GTestFunc);
    pub fn g_test_add_data_func(testpath: *const ::std::os::raw::c_char,
                                test_data: gconstpointer,
                                test_func: GTestDataFunc);
    pub fn g_test_add_data_func_full(testpath: *const ::std::os::raw::c_char,
                                     test_data: gpointer,
                                     test_func: GTestDataFunc,
                                     data_free_func: GDestroyNotify);
    pub fn g_test_fail();
    pub fn g_test_incomplete(msg: *const gchar);
    pub fn g_test_skip(msg: *const gchar);
    pub fn g_test_failed() -> gboolean;
    pub fn g_test_set_nonfatal_assertions();
    pub fn g_test_message(format: *const ::std::os::raw::c_char, ...);
    pub fn g_test_bug_base(uri_pattern: *const ::std::os::raw::c_char);
    pub fn g_test_bug(bug_uri_snippet: *const ::std::os::raw::c_char);
    pub fn g_test_timer_start();
    pub fn g_test_timer_elapsed() -> ::std::os::raw::c_double;
    pub fn g_test_timer_last() -> ::std::os::raw::c_double;
    pub fn g_test_queue_free(gfree_pointer: gpointer);
    pub fn g_test_queue_destroy(destroy_func: GDestroyNotify,
                                destroy_data: gpointer);
    pub fn g_test_trap_fork(usec_timeout: guint64,
                            test_trap_flags: GTestTrapFlags) -> gboolean;
    pub fn g_test_trap_subprocess(test_path: *const ::std::os::raw::c_char,
                                  usec_timeout: guint64,
                                  test_flags: GTestSubprocessFlags);
    pub fn g_test_trap_has_passed() -> gboolean;
    pub fn g_test_trap_reached_timeout() -> gboolean;
    pub fn g_test_rand_int() -> gint32;
    pub fn g_test_rand_int_range(begin: gint32, end: gint32) -> gint32;
    pub fn g_test_rand_double() -> ::std::os::raw::c_double;
    pub fn g_test_rand_double_range(range_start: ::std::os::raw::c_double,
                                    range_end: ::std::os::raw::c_double)
     -> ::std::os::raw::c_double;
    pub fn g_test_create_case(test_name: *const ::std::os::raw::c_char,
                              data_size: gsize, test_data: gconstpointer,
                              data_setup: GTestFixtureFunc,
                              data_test: GTestFixtureFunc,
                              data_teardown: GTestFixtureFunc)
     -> *mut GTestCase;
    pub fn g_test_create_suite(suite_name: *const ::std::os::raw::c_char)
     -> *mut GTestSuite;
    pub fn g_test_get_root() -> *mut GTestSuite;
    pub fn g_test_suite_add(suite: *mut GTestSuite,
                            test_case: *mut GTestCase);
    pub fn g_test_suite_add_suite(suite: *mut GTestSuite,
                                  nestedsuite: *mut GTestSuite);
    pub fn g_test_run_suite(suite: *mut GTestSuite) -> ::std::os::raw::c_int;
    pub fn g_test_trap_assertions(domain: *const ::std::os::raw::c_char,
                                  file: *const ::std::os::raw::c_char,
                                  line: ::std::os::raw::c_int,
                                  func: *const ::std::os::raw::c_char,
                                  assertion_flags: guint64,
                                  pattern: *const ::std::os::raw::c_char);
    pub fn g_assertion_message(domain: *const ::std::os::raw::c_char,
                               file: *const ::std::os::raw::c_char,
                               line: ::std::os::raw::c_int,
                               func: *const ::std::os::raw::c_char,
                               message: *const ::std::os::raw::c_char);
    pub fn g_assertion_message_expr(domain: *const ::std::os::raw::c_char,
                                    file: *const ::std::os::raw::c_char,
                                    line: ::std::os::raw::c_int,
                                    func: *const ::std::os::raw::c_char,
                                    expr: *const ::std::os::raw::c_char);
    pub fn g_assertion_message_cmpstr(domain: *const ::std::os::raw::c_char,
                                      file: *const ::std::os::raw::c_char,
                                      line: ::std::os::raw::c_int,
                                      func: *const ::std::os::raw::c_char,
                                      expr: *const ::std::os::raw::c_char,
                                      arg1: *const ::std::os::raw::c_char,
                                      cmp: *const ::std::os::raw::c_char,
                                      arg2: *const ::std::os::raw::c_char);
    pub fn g_assertion_message_cmpnum(domain: *const ::std::os::raw::c_char,
                                      file: *const ::std::os::raw::c_char,
                                      line: ::std::os::raw::c_int,
                                      func: *const ::std::os::raw::c_char,
                                      expr: *const ::std::os::raw::c_char,
                                      arg1: ::std::os::raw::c_double,
                                      cmp: *const ::std::os::raw::c_char,
                                      arg2: ::std::os::raw::c_double,
                                      numtype: ::std::os::raw::c_char);
    pub fn g_assertion_message_error(domain: *const ::std::os::raw::c_char,
                                     file: *const ::std::os::raw::c_char,
                                     line: ::std::os::raw::c_int,
                                     func: *const ::std::os::raw::c_char,
                                     expr: *const ::std::os::raw::c_char,
                                     error: *const GError,
                                     error_domain: GQuark,
                                     error_code: ::std::os::raw::c_int);
    pub fn g_test_add_vtable(testpath: *const ::std::os::raw::c_char,
                             data_size: gsize, test_data: gconstpointer,
                             data_setup: GTestFixtureFunc,
                             data_test: GTestFixtureFunc,
                             data_teardown: GTestFixtureFunc);
    pub fn g_test_log_type_name(log_type: GTestLogType)
     -> *const ::std::os::raw::c_char;
    pub fn g_test_log_buffer_new() -> *mut GTestLogBuffer;
    pub fn g_test_log_buffer_free(tbuffer: *mut GTestLogBuffer);
    pub fn g_test_log_buffer_push(tbuffer: *mut GTestLogBuffer,
                                  n_bytes: guint, bytes: *const guint8);
    pub fn g_test_log_buffer_pop(tbuffer: *mut GTestLogBuffer)
     -> *mut GTestLogMsg;
    pub fn g_test_log_msg_free(tmsg: *mut GTestLogMsg);
    pub fn g_test_log_set_fatal_handler(log_func: GTestLogFatalFunc,
                                        user_data: gpointer);
    pub fn g_test_expect_message(log_domain: *const gchar,
                                 log_level: GLogLevelFlags,
                                 pattern: *const gchar);
    pub fn g_test_assert_expected_messages_internal(domain:
                                                        *const ::std::os::raw::c_char,
                                                    file:
                                                        *const ::std::os::raw::c_char,
                                                    line:
                                                        ::std::os::raw::c_int,
                                                    func:
                                                        *const ::std::os::raw::c_char);
    pub fn g_test_build_filename(file_type: GTestFileType,
                                 first_path: *const gchar, ...) -> *mut gchar;
    pub fn g_test_get_dir(file_type: GTestFileType) -> *const gchar;
    pub fn g_test_get_filename(file_type: GTestFileType,
                               first_path: *const gchar, ...) -> *const gchar;
    pub fn g_thread_pool_new(func: GFunc, user_data: gpointer,
                             max_threads: gint, exclusive: gboolean,
                             error: *mut *mut GError) -> *mut GThreadPool;
    pub fn g_thread_pool_free(pool: *mut GThreadPool, immediate: gboolean,
                              wait_: gboolean);
    pub fn g_thread_pool_push(pool: *mut GThreadPool, data: gpointer,
                              error: *mut *mut GError) -> gboolean;
    pub fn g_thread_pool_unprocessed(pool: *mut GThreadPool) -> guint;
    pub fn g_thread_pool_set_sort_function(pool: *mut GThreadPool,
                                           func: GCompareDataFunc,
                                           user_data: gpointer);
    pub fn g_thread_pool_move_to_front(pool: *mut GThreadPool, data: gpointer)
     -> gboolean;
    pub fn g_thread_pool_set_max_threads(pool: *mut GThreadPool,
                                         max_threads: gint,
                                         error: *mut *mut GError) -> gboolean;
    pub fn g_thread_pool_get_max_threads(pool: *mut GThreadPool) -> gint;
    pub fn g_thread_pool_get_num_threads(pool: *mut GThreadPool) -> guint;
    pub fn g_thread_pool_set_max_unused_threads(max_threads: gint);
    pub fn g_thread_pool_get_max_unused_threads() -> gint;
    pub fn g_thread_pool_get_num_unused_threads() -> guint;
    pub fn g_thread_pool_stop_unused_threads();
    pub fn g_thread_pool_set_max_idle_time(interval: guint);
    pub fn g_thread_pool_get_max_idle_time() -> guint;
    pub fn g_timer_new() -> *mut GTimer;
    pub fn g_timer_destroy(timer: *mut GTimer);
    pub fn g_timer_start(timer: *mut GTimer);
    pub fn g_timer_stop(timer: *mut GTimer);
    pub fn g_timer_reset(timer: *mut GTimer);
    pub fn g_timer_continue(timer: *mut GTimer);
    pub fn g_timer_elapsed(timer: *mut GTimer, microseconds: *mut gulong)
     -> gdouble;
    pub fn g_usleep(microseconds: gulong);
    pub fn g_time_val_add(time_: *mut GTimeVal, microseconds: glong);
    pub fn g_time_val_from_iso8601(iso_date: *const gchar,
                                   time_: *mut GTimeVal) -> gboolean;
    pub fn g_time_val_to_iso8601(time_: *mut GTimeVal) -> *mut gchar;
    pub fn g_trash_stack_push(stack_p: *mut *mut GTrashStack,
                              data_p: gpointer);
    pub fn g_trash_stack_pop(stack_p: *mut *mut GTrashStack) -> gpointer;
    pub fn g_trash_stack_peek(stack_p: *mut *mut GTrashStack) -> gpointer;
    pub fn g_trash_stack_height(stack_p: *mut *mut GTrashStack) -> guint;
    pub fn g_tree_new(key_compare_func: GCompareFunc) -> *mut GTree;
    pub fn g_tree_new_with_data(key_compare_func: GCompareDataFunc,
                                key_compare_data: gpointer) -> *mut GTree;
    pub fn g_tree_new_full(key_compare_func: GCompareDataFunc,
                           key_compare_data: gpointer,
                           key_destroy_func: GDestroyNotify,
                           value_destroy_func: GDestroyNotify) -> *mut GTree;
    pub fn g_tree_ref(tree: *mut GTree) -> *mut GTree;
    pub fn g_tree_unref(tree: *mut GTree);
    pub fn g_tree_destroy(tree: *mut GTree);
    pub fn g_tree_insert(tree: *mut GTree, key: gpointer, value: gpointer);
    pub fn g_tree_replace(tree: *mut GTree, key: gpointer, value: gpointer);
    pub fn g_tree_remove(tree: *mut GTree, key: gconstpointer) -> gboolean;
    pub fn g_tree_steal(tree: *mut GTree, key: gconstpointer) -> gboolean;
    pub fn g_tree_lookup(tree: *mut GTree, key: gconstpointer) -> gpointer;
    pub fn g_tree_lookup_extended(tree: *mut GTree, lookup_key: gconstpointer,
                                  orig_key: *mut gpointer,
                                  value: *mut gpointer) -> gboolean;
    pub fn g_tree_foreach(tree: *mut GTree, func: GTraverseFunc,
                          user_data: gpointer);
    pub fn g_tree_traverse(tree: *mut GTree, traverse_func: GTraverseFunc,
                           traverse_type: GTraverseType, user_data: gpointer);
    pub fn g_tree_search(tree: *mut GTree, search_func: GCompareFunc,
                         user_data: gconstpointer) -> gpointer;
    pub fn g_tree_height(tree: *mut GTree) -> gint;
    pub fn g_tree_nnodes(tree: *mut GTree) -> gint;
    pub fn g_uri_unescape_string(escaped_string:
                                     *const ::std::os::raw::c_char,
                                 illegal_characters:
                                     *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn g_uri_unescape_segment(escaped_string:
                                      *const ::std::os::raw::c_char,
                                  escaped_string_end:
                                      *const ::std::os::raw::c_char,
                                  illegal_characters:
                                      *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn g_uri_parse_scheme(uri: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn g_uri_escape_string(unescaped: *const ::std::os::raw::c_char,
                               reserved_chars_allowed:
                                   *const ::std::os::raw::c_char,
                               allow_utf8: gboolean)
     -> *mut ::std::os::raw::c_char;
    pub fn g_variant_type_string_is_valid(type_string: *const gchar)
     -> gboolean;
    pub fn g_variant_type_string_scan(string: *const gchar,
                                      limit: *const gchar,
                                      endptr: *mut *const gchar) -> gboolean;
    pub fn g_variant_type_free(_type: *mut GVariantType);
    pub fn g_variant_type_copy(_type: *const GVariantType)
     -> *mut GVariantType;
    pub fn g_variant_type_new(type_string: *const gchar) -> *mut GVariantType;
    pub fn g_variant_type_get_string_length(_type: *const GVariantType)
     -> gsize;
    pub fn g_variant_type_peek_string(_type: *const GVariantType)
     -> *const gchar;
    pub fn g_variant_type_dup_string(_type: *const GVariantType)
     -> *mut gchar;
    pub fn g_variant_type_is_definite(_type: *const GVariantType) -> gboolean;
    pub fn g_variant_type_is_container(_type: *const GVariantType)
     -> gboolean;
    pub fn g_variant_type_is_basic(_type: *const GVariantType) -> gboolean;
    pub fn g_variant_type_is_maybe(_type: *const GVariantType) -> gboolean;
    pub fn g_variant_type_is_array(_type: *const GVariantType) -> gboolean;
    pub fn g_variant_type_is_tuple(_type: *const GVariantType) -> gboolean;
    pub fn g_variant_type_is_dict_entry(_type: *const GVariantType)
     -> gboolean;
    pub fn g_variant_type_is_variant(_type: *const GVariantType) -> gboolean;
    pub fn g_variant_type_hash(_type: gconstpointer) -> guint;
    pub fn g_variant_type_equal(type1: gconstpointer, type2: gconstpointer)
     -> gboolean;
    pub fn g_variant_type_is_subtype_of(_type: *const GVariantType,
                                        supertype: *const GVariantType)
     -> gboolean;
    pub fn g_variant_type_element(_type: *const GVariantType)
     -> *const GVariantType;
    pub fn g_variant_type_first(_type: *const GVariantType)
     -> *const GVariantType;
    pub fn g_variant_type_next(_type: *const GVariantType)
     -> *const GVariantType;
    pub fn g_variant_type_n_items(_type: *const GVariantType) -> gsize;
    pub fn g_variant_type_key(_type: *const GVariantType)
     -> *const GVariantType;
    pub fn g_variant_type_value(_type: *const GVariantType)
     -> *const GVariantType;
    pub fn g_variant_type_new_array(element: *const GVariantType)
     -> *mut GVariantType;
    pub fn g_variant_type_new_maybe(element: *const GVariantType)
     -> *mut GVariantType;
    pub fn g_variant_type_new_tuple(items: *const *const GVariantType,
                                    length: gint) -> *mut GVariantType;
    pub fn g_variant_type_new_dict_entry(key: *const GVariantType,
                                         value: *const GVariantType)
     -> *mut GVariantType;
    pub fn g_variant_type_checked_(arg1: *const gchar) -> *const GVariantType;
    pub fn g_variant_unref(value: *mut GVariant);
    pub fn g_variant_ref(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_ref_sink(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_is_floating(value: *mut GVariant) -> gboolean;
    pub fn g_variant_take_ref(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_get_type(value: *mut GVariant) -> *const GVariantType;
    pub fn g_variant_get_type_string(value: *mut GVariant) -> *const gchar;
    pub fn g_variant_is_of_type(value: *mut GVariant,
                                _type: *const GVariantType) -> gboolean;
    pub fn g_variant_is_container(value: *mut GVariant) -> gboolean;
    pub fn g_variant_classify(value: *mut GVariant) -> GVariantClass;
    pub fn g_variant_new_boolean(value: gboolean) -> *mut GVariant;
    pub fn g_variant_new_byte(value: guchar) -> *mut GVariant;
    pub fn g_variant_new_int16(value: gint16) -> *mut GVariant;
    pub fn g_variant_new_uint16(value: guint16) -> *mut GVariant;
    pub fn g_variant_new_int32(value: gint32) -> *mut GVariant;
    pub fn g_variant_new_uint32(value: guint32) -> *mut GVariant;
    pub fn g_variant_new_int64(value: gint64) -> *mut GVariant;
    pub fn g_variant_new_uint64(value: guint64) -> *mut GVariant;
    pub fn g_variant_new_handle(value: gint32) -> *mut GVariant;
    pub fn g_variant_new_double(value: gdouble) -> *mut GVariant;
    pub fn g_variant_new_string(string: *const gchar) -> *mut GVariant;
    pub fn g_variant_new_take_string(string: *mut gchar) -> *mut GVariant;
    pub fn g_variant_new_printf(format_string: *const gchar, ...)
     -> *mut GVariant;
    pub fn g_variant_new_object_path(object_path: *const gchar)
     -> *mut GVariant;
    pub fn g_variant_is_object_path(string: *const gchar) -> gboolean;
    pub fn g_variant_new_signature(signature: *const gchar) -> *mut GVariant;
    pub fn g_variant_is_signature(string: *const gchar) -> gboolean;
    pub fn g_variant_new_variant(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_new_strv(strv: *const *const gchar, length: gssize)
     -> *mut GVariant;
    pub fn g_variant_new_objv(strv: *const *const gchar, length: gssize)
     -> *mut GVariant;
    pub fn g_variant_new_bytestring(string: *const gchar) -> *mut GVariant;
    pub fn g_variant_new_bytestring_array(strv: *const *const gchar,
                                          length: gssize) -> *mut GVariant;
    pub fn g_variant_new_fixed_array(element_type: *const GVariantType,
                                     elements: gconstpointer,
                                     n_elements: gsize, element_size: gsize)
     -> *mut GVariant;
    pub fn g_variant_get_boolean(value: *mut GVariant) -> gboolean;
    pub fn g_variant_get_byte(value: *mut GVariant) -> guchar;
    pub fn g_variant_get_int16(value: *mut GVariant) -> gint16;
    pub fn g_variant_get_uint16(value: *mut GVariant) -> guint16;
    pub fn g_variant_get_int32(value: *mut GVariant) -> gint32;
    pub fn g_variant_get_uint32(value: *mut GVariant) -> guint32;
    pub fn g_variant_get_int64(value: *mut GVariant) -> gint64;
    pub fn g_variant_get_uint64(value: *mut GVariant) -> guint64;
    pub fn g_variant_get_handle(value: *mut GVariant) -> gint32;
    pub fn g_variant_get_double(value: *mut GVariant) -> gdouble;
    pub fn g_variant_get_variant(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_get_string(value: *mut GVariant, length: *mut gsize)
     -> *const gchar;
    pub fn g_variant_dup_string(value: *mut GVariant, length: *mut gsize)
     -> *mut gchar;
    pub fn g_variant_get_strv(value: *mut GVariant, length: *mut gsize)
     -> *mut *const gchar;
    pub fn g_variant_dup_strv(value: *mut GVariant, length: *mut gsize)
     -> *mut *mut gchar;
    pub fn g_variant_get_objv(value: *mut GVariant, length: *mut gsize)
     -> *mut *const gchar;
    pub fn g_variant_dup_objv(value: *mut GVariant, length: *mut gsize)
     -> *mut *mut gchar;
    pub fn g_variant_get_bytestring(value: *mut GVariant) -> *const gchar;
    pub fn g_variant_dup_bytestring(value: *mut GVariant, length: *mut gsize)
     -> *mut gchar;
    pub fn g_variant_get_bytestring_array(value: *mut GVariant,
                                          length: *mut gsize)
     -> *mut *const gchar;
    pub fn g_variant_dup_bytestring_array(value: *mut GVariant,
                                          length: *mut gsize)
     -> *mut *mut gchar;
    pub fn g_variant_new_maybe(child_type: *const GVariantType,
                               child: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_new_array(child_type: *const GVariantType,
                               children: *const *mut GVariant,
                               n_children: gsize) -> *mut GVariant;
    pub fn g_variant_new_tuple(children: *const *mut GVariant,
                               n_children: gsize) -> *mut GVariant;
    pub fn g_variant_new_dict_entry(key: *mut GVariant, value: *mut GVariant)
     -> *mut GVariant;
    pub fn g_variant_get_maybe(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_n_children(value: *mut GVariant) -> gsize;
    pub fn g_variant_get_child(value: *mut GVariant, index_: gsize,
                               format_string: *const gchar, ...);
    pub fn g_variant_get_child_value(value: *mut GVariant, index_: gsize)
     -> *mut GVariant;
    pub fn g_variant_lookup(dictionary: *mut GVariant, key: *const gchar,
                            format_string: *const gchar, ...) -> gboolean;
    pub fn g_variant_lookup_value(dictionary: *mut GVariant,
                                  key: *const gchar,
                                  expected_type: *const GVariantType)
     -> *mut GVariant;
    pub fn g_variant_get_fixed_array(value: *mut GVariant,
                                     n_elements: *mut gsize,
                                     element_size: gsize) -> gconstpointer;
    pub fn g_variant_get_size(value: *mut GVariant) -> gsize;
    pub fn g_variant_get_data(value: *mut GVariant) -> gconstpointer;
    pub fn g_variant_get_data_as_bytes(value: *mut GVariant) -> *mut GBytes;
    pub fn g_variant_store(value: *mut GVariant, data: gpointer);
    pub fn g_variant_print(value: *mut GVariant, type_annotate: gboolean)
     -> *mut gchar;
    pub fn g_variant_print_string(value: *mut GVariant, string: *mut GString,
                                  type_annotate: gboolean) -> *mut GString;
    pub fn g_variant_hash(value: gconstpointer) -> guint;
    pub fn g_variant_equal(one: gconstpointer, two: gconstpointer)
     -> gboolean;
    pub fn g_variant_get_normal_form(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_is_normal_form(value: *mut GVariant) -> gboolean;
    pub fn g_variant_byteswap(value: *mut GVariant) -> *mut GVariant;
    pub fn g_variant_new_from_bytes(_type: *const GVariantType,
                                    bytes: *mut GBytes, trusted: gboolean)
     -> *mut GVariant;
    pub fn g_variant_new_from_data(_type: *const GVariantType,
                                   data: gconstpointer, size: gsize,
                                   trusted: gboolean, notify: GDestroyNotify,
                                   user_data: gpointer) -> *mut GVariant;
    pub fn g_variant_iter_new(value: *mut GVariant) -> *mut GVariantIter;
    pub fn g_variant_iter_init(iter: *mut GVariantIter, value: *mut GVariant)
     -> gsize;
    pub fn g_variant_iter_copy(iter: *mut GVariantIter) -> *mut GVariantIter;
    pub fn g_variant_iter_n_children(iter: *mut GVariantIter) -> gsize;
    pub fn g_variant_iter_free(iter: *mut GVariantIter);
    pub fn g_variant_iter_next_value(iter: *mut GVariantIter)
     -> *mut GVariant;
    pub fn g_variant_iter_next(iter: *mut GVariantIter,
                               format_string: *const gchar, ...) -> gboolean;
    pub fn g_variant_iter_loop(iter: *mut GVariantIter,
                               format_string: *const gchar, ...) -> gboolean;
    pub fn g_variant_parser_get_error_quark() -> GQuark;
    pub fn g_variant_parse_error_quark() -> GQuark;
    pub fn g_variant_builder_new(_type: *const GVariantType)
     -> *mut GVariantBuilder;
    pub fn g_variant_builder_unref(builder: *mut GVariantBuilder);
    pub fn g_variant_builder_ref(builder: *mut GVariantBuilder)
     -> *mut GVariantBuilder;
    pub fn g_variant_builder_init(builder: *mut GVariantBuilder,
                                  _type: *const GVariantType);
    pub fn g_variant_builder_end(builder: *mut GVariantBuilder)
     -> *mut GVariant;
    pub fn g_variant_builder_clear(builder: *mut GVariantBuilder);
    pub fn g_variant_builder_open(builder: *mut GVariantBuilder,
                                  _type: *const GVariantType);
    pub fn g_variant_builder_close(builder: *mut GVariantBuilder);
    pub fn g_variant_builder_add_value(builder: *mut GVariantBuilder,
                                       value: *mut GVariant);
    pub fn g_variant_builder_add(builder: *mut GVariantBuilder,
                                 format_string: *const gchar, ...);
    pub fn g_variant_builder_add_parsed(builder: *mut GVariantBuilder,
                                        format: *const gchar, ...);
    pub fn g_variant_new(format_string: *const gchar, ...) -> *mut GVariant;
    pub fn g_variant_get(value: *mut GVariant,
                         format_string: *const gchar, ...);
    pub fn g_variant_new_va(format_string: *const gchar,
                            endptr: *mut *const gchar, app: *mut va_list)
     -> *mut GVariant;
    pub fn g_variant_get_va(value: *mut GVariant, format_string: *const gchar,
                            endptr: *mut *const gchar, app: *mut va_list);
    pub fn g_variant_check_format_string(value: *mut GVariant,
                                         format_string: *const gchar,
                                         copy_only: gboolean) -> gboolean;
    pub fn g_variant_parse(_type: *const GVariantType, text: *const gchar,
                           limit: *const gchar, endptr: *mut *const gchar,
                           error: *mut *mut GError) -> *mut GVariant;
    pub fn g_variant_new_parsed(format: *const gchar, ...) -> *mut GVariant;
    pub fn g_variant_new_parsed_va(format: *const gchar, app: *mut va_list)
     -> *mut GVariant;
    pub fn g_variant_parse_error_print_context(error: *mut GError,
                                               source_str: *const gchar)
     -> *mut gchar;
    pub fn g_variant_compare(one: gconstpointer, two: gconstpointer) -> gint;
    pub fn g_variant_dict_new(from_asv: *mut GVariant) -> *mut GVariantDict;
    pub fn g_variant_dict_init(dict: *mut GVariantDict,
                               from_asv: *mut GVariant);
    pub fn g_variant_dict_lookup(dict: *mut GVariantDict, key: *const gchar,
                                 format_string: *const gchar, ...)
     -> gboolean;
    pub fn g_variant_dict_lookup_value(dict: *mut GVariantDict,
                                       key: *const gchar,
                                       expected_type: *const GVariantType)
     -> *mut GVariant;
    pub fn g_variant_dict_contains(dict: *mut GVariantDict, key: *const gchar)
     -> gboolean;
    pub fn g_variant_dict_insert(dict: *mut GVariantDict, key: *const gchar,
                                 format_string: *const gchar, ...);
    pub fn g_variant_dict_insert_value(dict: *mut GVariantDict,
                                       key: *const gchar,
                                       value: *mut GVariant);
    pub fn g_variant_dict_remove(dict: *mut GVariantDict, key: *const gchar)
     -> gboolean;
    pub fn g_variant_dict_clear(dict: *mut GVariantDict);
    pub fn g_variant_dict_end(dict: *mut GVariantDict) -> *mut GVariant;
    pub fn g_variant_dict_ref(dict: *mut GVariantDict) -> *mut GVariantDict;
    pub fn g_variant_dict_unref(dict: *mut GVariantDict);
    pub fn glib_check_version(required_major: guint, required_minor: guint,
                              required_micro: guint) -> *const gchar;
    pub fn g_mem_chunk_new(name: *const gchar, atom_size: gint,
                           area_size: gsize, _type: gint) -> *mut GMemChunk;
    pub fn g_mem_chunk_destroy(mem_chunk: *mut GMemChunk);
    pub fn g_mem_chunk_alloc(mem_chunk: *mut GMemChunk) -> gpointer;
    pub fn g_mem_chunk_alloc0(mem_chunk: *mut GMemChunk) -> gpointer;
    pub fn g_mem_chunk_free(mem_chunk: *mut GMemChunk, mem: gpointer);
    pub fn g_mem_chunk_clean(mem_chunk: *mut GMemChunk);
    pub fn g_mem_chunk_reset(mem_chunk: *mut GMemChunk);
    pub fn g_mem_chunk_print(mem_chunk: *mut GMemChunk);
    pub fn g_mem_chunk_info();
    pub fn g_blow_chunks();
    pub fn g_allocator_new(name: *const gchar, n_preallocs: guint)
     -> *mut GAllocator;
    pub fn g_allocator_free(allocator: *mut GAllocator);
    pub fn g_list_push_allocator(allocator: *mut GAllocator);
    pub fn g_list_pop_allocator();
    pub fn g_slist_push_allocator(allocator: *mut GAllocator);
    pub fn g_slist_pop_allocator();
    pub fn g_node_push_allocator(allocator: *mut GAllocator);
    pub fn g_node_pop_allocator();
    pub fn g_cache_new(value_new_func: GCacheNewFunc,
                       value_destroy_func: GCacheDestroyFunc,
                       key_dup_func: GCacheDupFunc,
                       key_destroy_func: GCacheDestroyFunc,
                       hash_key_func: GHashFunc, hash_value_func: GHashFunc,
                       key_equal_func: GEqualFunc) -> *mut GCache;
    pub fn g_cache_destroy(cache: *mut GCache);
    pub fn g_cache_insert(cache: *mut GCache, key: gpointer) -> gpointer;
    pub fn g_cache_remove(cache: *mut GCache, value: gconstpointer);
    pub fn g_cache_key_foreach(cache: *mut GCache, func: GHFunc,
                               user_data: gpointer);
    pub fn g_cache_value_foreach(cache: *mut GCache, func: GHFunc,
                                 user_data: gpointer);
    pub fn g_completion_new(func: GCompletionFunc) -> *mut GCompletion;
    pub fn g_completion_add_items(cmp: *mut GCompletion, items: *mut GList);
    pub fn g_completion_remove_items(cmp: *mut GCompletion,
                                     items: *mut GList);
    pub fn g_completion_clear_items(cmp: *mut GCompletion);
    pub fn g_completion_complete(cmp: *mut GCompletion, prefix: *const gchar,
                                 new_prefix: *mut *mut gchar) -> *mut GList;
    pub fn g_completion_complete_utf8(cmp: *mut GCompletion,
                                      prefix: *const gchar,
                                      new_prefix: *mut *mut gchar)
     -> *mut GList;
    pub fn g_completion_set_compare(cmp: *mut GCompletion,
                                    strncmp_func: GCompletionStrncmpFunc);
    pub fn g_completion_free(cmp: *mut GCompletion);
    pub fn g_relation_new(fields: gint) -> *mut GRelation;
    pub fn g_relation_destroy(relation: *mut GRelation);
    pub fn g_relation_index(relation: *mut GRelation, field: gint,
                            hash_func: GHashFunc, key_equal_func: GEqualFunc);
    pub fn g_relation_insert(relation: *mut GRelation, ...);
    pub fn g_relation_delete(relation: *mut GRelation, key: gconstpointer,
                             field: gint) -> gint;
    pub fn g_relation_select(relation: *mut GRelation, key: gconstpointer,
                             field: gint) -> *mut GTuples;
    pub fn g_relation_count(relation: *mut GRelation, key: gconstpointer,
                            field: gint) -> gint;
    pub fn g_relation_exists(relation: *mut GRelation, ...) -> gboolean;
    pub fn g_relation_print(relation: *mut GRelation);
    pub fn g_tuples_destroy(tuples: *mut GTuples);
    pub fn g_tuples_index(tuples: *mut GTuples, index_: gint, field: gint)
     -> gpointer;
    pub fn g_thread_create(func: GThreadFunc, data: gpointer,
                           joinable: gboolean, error: *mut *mut GError)
     -> *mut GThread;
    pub fn g_thread_create_full(func: GThreadFunc, data: gpointer,
                                stack_size: gulong, joinable: gboolean,
                                bound: gboolean, priority: GThreadPriority,
                                error: *mut *mut GError) -> *mut GThread;
    pub fn g_thread_set_priority(thread: *mut GThread,
                                 priority: GThreadPriority);
    pub fn g_thread_foreach(thread_func: GFunc, user_data: gpointer);
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn __sched_cpucount(__setsize: size_t, __setp: *const cpu_set_t)
     -> ::std::os::raw::c_int;
    pub fn __sched_cpualloc(__count: size_t) -> *mut cpu_set_t;
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
    pub fn sched_setparam(__pid: __pid_t, __param: *const Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn sched_getparam(__pid: __pid_t, __param: *mut Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn sched_setscheduler(__pid: __pid_t, __policy: ::std::os::raw::c_int,
                              __param: *const Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
    pub fn sched_yield() -> ::std::os::raw::c_int;
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn pthread_create(__newthread: *mut pthread_t,
                          __attr: *const pthread_attr_t,
                          __start_routine:
                              ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                             *mut ::std::os::raw::c_void)
                                                        ->
                                                            *mut ::std::os::raw::c_void>,
                          __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void);
    pub fn pthread_join(__th: pthread_t,
                        __thread_return: *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
    pub fn pthread_self() -> pthread_t;
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getdetachstate(__attr: *const pthread_attr_t,
                                       __detachstate:
                                           *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setdetachstate(__attr: *mut pthread_attr_t,
                                       __detachstate: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getguardsize(__attr: *const pthread_attr_t,
                                     __guardsize: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setguardsize(__attr: *mut pthread_attr_t,
                                     __guardsize: size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getschedparam(__attr: *const pthread_attr_t,
                                      __param: *mut Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setschedparam(__attr: *mut pthread_attr_t,
                                      __param: *const Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getschedpolicy(__attr: *const pthread_attr_t,
                                       __policy: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setschedpolicy(__attr: *mut pthread_attr_t,
                                       __policy: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getinheritsched(__attr: *const pthread_attr_t,
                                        __inherit: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setinheritsched(__attr: *mut pthread_attr_t,
                                        __inherit: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getscope(__attr: *const pthread_attr_t,
                                 __scope: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setscope(__attr: *mut pthread_attr_t,
                                 __scope: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getstackaddr(__attr: *const pthread_attr_t,
                                     __stackaddr:
                                         *mut *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setstackaddr(__attr: *mut pthread_attr_t,
                                     __stackaddr: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getstacksize(__attr: *const pthread_attr_t,
                                     __stacksize: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setstacksize(__attr: *mut pthread_attr_t,
                                     __stacksize: size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_getstack(__attr: *const pthread_attr_t,
                                 __stackaddr:
                                     *mut *mut ::std::os::raw::c_void,
                                 __stacksize: *mut size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_attr_setstack(__attr: *mut pthread_attr_t,
                                 __stackaddr: *mut ::std::os::raw::c_void,
                                 __stacksize: size_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_setschedparam(__target_thread: pthread_t,
                                 __policy: ::std::os::raw::c_int,
                                 __param: *const Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn pthread_getschedparam(__target_thread: pthread_t,
                                 __policy: *mut ::std::os::raw::c_int,
                                 __param: *mut Struct_sched_param)
     -> ::std::os::raw::c_int;
    pub fn pthread_setschedprio(__target_thread: pthread_t,
                                __prio: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_once(__once_control: *mut pthread_once_t,
                        __init_routine:
                            ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn pthread_setcancelstate(__state: ::std::os::raw::c_int,
                                  __oldstate: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_setcanceltype(__type: ::std::os::raw::c_int,
                                 __oldtype: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
    pub fn pthread_testcancel();
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t);
    pub fn __sigsetjmp(__env: *mut Struct___jmp_buf_tag,
                       __savemask: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_init(__mutex: *mut pthread_mutex_t,
                              __mutexattr: *const pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_timedlock(__mutex: *mut pthread_mutex_t,
                                   __abstime: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_getprioceiling(__mutex: *const pthread_mutex_t,
                                        __prioceiling:
                                            *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_setprioceiling(__mutex: *mut pthread_mutex_t,
                                        __prioceiling: ::std::os::raw::c_int,
                                        __old_ceiling:
                                            *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_getpshared(__attr: *const pthread_mutexattr_t,
                                        __pshared: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_setpshared(__attr: *mut pthread_mutexattr_t,
                                        __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_gettype(__attr: *const pthread_mutexattr_t,
                                     __kind: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_settype(__attr: *mut pthread_mutexattr_t,
                                     __kind: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_getprotocol(__attr: *const pthread_mutexattr_t,
                                         __protocol:
                                             *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_setprotocol(__attr: *mut pthread_mutexattr_t,
                                         __protocol: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_getprioceiling(__attr:
                                                *const pthread_mutexattr_t,
                                            __prioceiling:
                                                *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_setprioceiling(__attr: *mut pthread_mutexattr_t,
                                            __prioceiling:
                                                ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_getrobust(__attr: *const pthread_mutexattr_t,
                                       __robustness:
                                           *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_mutexattr_setrobust(__attr: *mut pthread_mutexattr_t,
                                       __robustness: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_init(__rwlock: *mut pthread_rwlock_t,
                               __attr: *const pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_timedrdlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_timedwrlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_getpshared(__attr: *const pthread_rwlockattr_t,
                                         __pshared:
                                             *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_setpshared(__attr: *mut pthread_rwlockattr_t,
                                         __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_getkind_np(__attr: *const pthread_rwlockattr_t,
                                         __pref: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_rwlockattr_setkind_np(__attr: *mut pthread_rwlockattr_t,
                                         __pref: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_init(__cond: *mut pthread_cond_t,
                             __cond_attr: *const pthread_condattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_wait(__cond: *mut pthread_cond_t,
                             __mutex: *mut pthread_mutex_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_cond_timedwait(__cond: *mut pthread_cond_t,
                                  __mutex: *mut pthread_mutex_t,
                                  __abstime: *const Struct_timespec)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_getpshared(__attr: *const pthread_condattr_t,
                                       __pshared: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_setpshared(__attr: *mut pthread_condattr_t,
                                       __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_getclock(__attr: *const pthread_condattr_t,
                                     __clock_id: *mut __clockid_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_condattr_setclock(__attr: *mut pthread_condattr_t,
                                     __clock_id: __clockid_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_spin_init(__lock: *mut pthread_spinlock_t,
                             __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrier_init(__barrier: *mut pthread_barrier_t,
                                __attr: *const pthread_barrierattr_t,
                                __count: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrierattr_getpshared(__attr:
                                              *const pthread_barrierattr_t,
                                          __pshared:
                                              *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_barrierattr_setpshared(__attr: *mut pthread_barrierattr_t,
                                          __pshared: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn pthread_key_create(__key: *mut pthread_key_t,
                              __destr_function:
                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                 *mut ::std::os::raw::c_void)>)
     -> ::std::os::raw::c_int;
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
    pub fn pthread_getspecific(__key: pthread_key_t)
     -> *mut ::std::os::raw::c_void;
    pub fn pthread_setspecific(__key: pthread_key_t,
                               __pointer: *const ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn pthread_getcpuclockid(__thread_id: pthread_t,
                                 __clock_id: *mut __clockid_t)
     -> ::std::os::raw::c_int;
    pub fn pthread_atfork(__prepare: ::std::option::Option<extern "C" fn()>,
                          __parent: ::std::option::Option<extern "C" fn()>,
                          __child: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn g_static_mutex_init(mutex: *mut GStaticMutex);
    pub fn g_static_mutex_free(mutex: *mut GStaticMutex);
    pub fn g_static_mutex_get_mutex_impl(mutex: *mut GStaticMutex)
     -> *mut GMutex;
    pub fn g_static_rec_mutex_init(mutex: *mut GStaticRecMutex);
    pub fn g_static_rec_mutex_lock(mutex: *mut GStaticRecMutex);
    pub fn g_static_rec_mutex_trylock(mutex: *mut GStaticRecMutex)
     -> gboolean;
    pub fn g_static_rec_mutex_unlock(mutex: *mut GStaticRecMutex);
    pub fn g_static_rec_mutex_lock_full(mutex: *mut GStaticRecMutex,
                                        depth: guint);
    pub fn g_static_rec_mutex_unlock_full(mutex: *mut GStaticRecMutex)
     -> guint;
    pub fn g_static_rec_mutex_free(mutex: *mut GStaticRecMutex);
    pub fn g_static_rw_lock_init(lock: *mut GStaticRWLock);
    pub fn g_static_rw_lock_reader_lock(lock: *mut GStaticRWLock);
    pub fn g_static_rw_lock_reader_trylock(lock: *mut GStaticRWLock)
     -> gboolean;
    pub fn g_static_rw_lock_reader_unlock(lock: *mut GStaticRWLock);
    pub fn g_static_rw_lock_writer_lock(lock: *mut GStaticRWLock);
    pub fn g_static_rw_lock_writer_trylock(lock: *mut GStaticRWLock)
     -> gboolean;
    pub fn g_static_rw_lock_writer_unlock(lock: *mut GStaticRWLock);
    pub fn g_static_rw_lock_free(lock: *mut GStaticRWLock);
    pub fn g_private_new(notify: GDestroyNotify) -> *mut GPrivate;
    pub fn g_static_private_init(private_key: *mut GStaticPrivate);
    pub fn g_static_private_get(private_key: *mut GStaticPrivate) -> gpointer;
    pub fn g_static_private_set(private_key: *mut GStaticPrivate,
                                data: gpointer, notify: GDestroyNotify);
    pub fn g_static_private_free(private_key: *mut GStaticPrivate);
    pub fn g_once_init_enter_impl(location: *mut gsize) -> gboolean;
    pub fn g_thread_init(vtable: gpointer);
    pub fn g_thread_init_with_errorcheck_mutexes(vtable: gpointer);
    pub fn g_thread_get_initialized() -> gboolean;
    pub fn g_mutex_new() -> *mut GMutex;
    pub fn g_mutex_free(mutex: *mut GMutex);
    pub fn g_cond_new() -> *mut GCond;
    pub fn g_cond_free(cond: *mut GCond);
    pub fn g_cond_timed_wait(cond: *mut GCond, mutex: *mut GMutex,
                             timeval: *mut GTimeVal) -> gboolean;
    pub fn g_type_init();
    pub fn g_type_init_with_debug_flags(debug_flags: GTypeDebugFlags);
    pub fn g_type_name(_type: GType) -> *const gchar;
    pub fn g_type_qname(_type: GType) -> GQuark;
    pub fn g_type_from_name(name: *const gchar) -> GType;
    pub fn g_type_parent(_type: GType) -> GType;
    pub fn g_type_depth(_type: GType) -> guint;
    pub fn g_type_next_base(leaf_type: GType, root_type: GType) -> GType;
    pub fn g_type_is_a(_type: GType, is_a_type: GType) -> gboolean;
    pub fn g_type_class_ref(_type: GType) -> gpointer;
    pub fn g_type_class_peek(_type: GType) -> gpointer;
    pub fn g_type_class_peek_static(_type: GType) -> gpointer;
    pub fn g_type_class_unref(g_class: gpointer);
    pub fn g_type_class_peek_parent(g_class: gpointer) -> gpointer;
    pub fn g_type_interface_peek(instance_class: gpointer, iface_type: GType)
     -> gpointer;
    pub fn g_type_interface_peek_parent(g_iface: gpointer) -> gpointer;
    pub fn g_type_default_interface_ref(g_type: GType) -> gpointer;
    pub fn g_type_default_interface_peek(g_type: GType) -> gpointer;
    pub fn g_type_default_interface_unref(g_iface: gpointer);
    pub fn g_type_children(_type: GType, n_children: *mut guint)
     -> *mut GType;
    pub fn g_type_interfaces(_type: GType, n_interfaces: *mut guint)
     -> *mut GType;
    pub fn g_type_set_qdata(_type: GType, quark: GQuark, data: gpointer);
    pub fn g_type_get_qdata(_type: GType, quark: GQuark) -> gpointer;
    pub fn g_type_query(_type: GType, query: *mut GTypeQuery);
    pub fn g_type_get_instance_count(_type: GType) -> ::std::os::raw::c_int;
    pub fn g_type_register_static(parent_type: GType, type_name: *const gchar,
                                  info: *const GTypeInfo, flags: GTypeFlags)
     -> GType;
    pub fn g_type_register_static_simple(parent_type: GType,
                                         type_name: *const gchar,
                                         class_size: guint,
                                         class_init: GClassInitFunc,
                                         instance_size: guint,
                                         instance_init: GInstanceInitFunc,
                                         flags: GTypeFlags) -> GType;
    pub fn g_type_register_dynamic(parent_type: GType,
                                   type_name: *const gchar,
                                   plugin: *mut GTypePlugin,
                                   flags: GTypeFlags) -> GType;
    pub fn g_type_register_fundamental(type_id: GType,
                                       type_name: *const gchar,
                                       info: *const GTypeInfo,
                                       finfo: *const GTypeFundamentalInfo,
                                       flags: GTypeFlags) -> GType;
    pub fn g_type_add_interface_static(instance_type: GType,
                                       interface_type: GType,
                                       info: *const GInterfaceInfo);
    pub fn g_type_add_interface_dynamic(instance_type: GType,
                                        interface_type: GType,
                                        plugin: *mut GTypePlugin);
    pub fn g_type_interface_add_prerequisite(interface_type: GType,
                                             prerequisite_type: GType);
    pub fn g_type_interface_prerequisites(interface_type: GType,
                                          n_prerequisites: *mut guint)
     -> *mut GType;
    pub fn g_type_class_add_private(g_class: gpointer, private_size: gsize);
    pub fn g_type_add_instance_private(class_type: GType, private_size: gsize)
     -> gint;
    pub fn g_type_instance_get_private(instance: *mut GTypeInstance,
                                       private_type: GType) -> gpointer;
    pub fn g_type_class_adjust_private_offset(g_class: gpointer,
                                              private_size_or_offset:
                                                  *mut gint);
    pub fn g_type_add_class_private(class_type: GType, private_size: gsize);
    pub fn g_type_class_get_private(klass: *mut GTypeClass,
                                    private_type: GType) -> gpointer;
    pub fn g_type_class_get_instance_private_offset(g_class: gpointer)
     -> gint;
    pub fn g_type_ensure(_type: GType);
    pub fn g_type_get_type_registration_serial() -> guint;
    pub fn g_type_get_plugin(_type: GType) -> *mut GTypePlugin;
    pub fn g_type_interface_get_plugin(instance_type: GType,
                                       interface_type: GType)
     -> *mut GTypePlugin;
    pub fn g_type_fundamental_next() -> GType;
    pub fn g_type_fundamental(type_id: GType) -> GType;
    pub fn g_type_create_instance(_type: GType) -> *mut GTypeInstance;
    pub fn g_type_free_instance(instance: *mut GTypeInstance);
    pub fn g_type_add_class_cache_func(cache_data: gpointer,
                                       cache_func: GTypeClassCacheFunc);
    pub fn g_type_remove_class_cache_func(cache_data: gpointer,
                                          cache_func: GTypeClassCacheFunc);
    pub fn g_type_class_unref_uncached(g_class: gpointer);
    pub fn g_type_add_interface_check(check_data: gpointer,
                                      check_func: GTypeInterfaceCheckFunc);
    pub fn g_type_remove_interface_check(check_data: gpointer,
                                         check_func: GTypeInterfaceCheckFunc);
    pub fn g_type_value_table_peek(_type: GType) -> *mut GTypeValueTable;
    pub fn g_type_check_instance(instance: *mut GTypeInstance) -> gboolean;
    pub fn g_type_check_instance_cast(instance: *mut GTypeInstance,
                                      iface_type: GType)
     -> *mut GTypeInstance;
    pub fn g_type_check_instance_is_a(instance: *mut GTypeInstance,
                                      iface_type: GType) -> gboolean;
    pub fn g_type_check_instance_is_fundamentally_a(instance:
                                                        *mut GTypeInstance,
                                                    fundamental_type: GType)
     -> gboolean;
    pub fn g_type_check_class_cast(g_class: *mut GTypeClass, is_a_type: GType)
     -> *mut GTypeClass;
    pub fn g_type_check_class_is_a(g_class: *mut GTypeClass, is_a_type: GType)
     -> gboolean;
    pub fn g_type_check_is_value_type(_type: GType) -> gboolean;
    pub fn g_type_check_value(value: *mut GValue) -> gboolean;
    pub fn g_type_check_value_holds(value: *mut GValue, _type: GType)
     -> gboolean;
    pub fn g_type_test_flags(_type: GType, flags: guint) -> gboolean;
    pub fn g_type_name_from_instance(instance: *mut GTypeInstance)
     -> *const gchar;
    pub fn g_type_name_from_class(g_class: *mut GTypeClass) -> *const gchar;
    pub fn g_value_init(value: *mut GValue, g_type: GType) -> *mut GValue;
    pub fn g_value_copy(src_value: *const GValue, dest_value: *mut GValue);
    pub fn g_value_reset(value: *mut GValue) -> *mut GValue;
    pub fn g_value_unset(value: *mut GValue);
    pub fn g_value_set_instance(value: *mut GValue, instance: gpointer);
    pub fn g_value_init_from_instance(value: *mut GValue, instance: gpointer);
    pub fn g_value_fits_pointer(value: *const GValue) -> gboolean;
    pub fn g_value_peek_pointer(value: *const GValue) -> gpointer;
    pub fn g_value_type_compatible(src_type: GType, dest_type: GType)
     -> gboolean;
    pub fn g_value_type_transformable(src_type: GType, dest_type: GType)
     -> gboolean;
    pub fn g_value_transform(src_value: *const GValue,
                             dest_value: *mut GValue) -> gboolean;
    pub fn g_value_register_transform_func(src_type: GType, dest_type: GType,
                                           transform_func: GValueTransform);
    pub fn g_param_spec_ref(pspec: *mut GParamSpec) -> *mut GParamSpec;
    pub fn g_param_spec_unref(pspec: *mut GParamSpec);
    pub fn g_param_spec_sink(pspec: *mut GParamSpec);
    pub fn g_param_spec_ref_sink(pspec: *mut GParamSpec) -> *mut GParamSpec;
    pub fn g_param_spec_get_qdata(pspec: *mut GParamSpec, quark: GQuark)
     -> gpointer;
    pub fn g_param_spec_set_qdata(pspec: *mut GParamSpec, quark: GQuark,
                                  data: gpointer);
    pub fn g_param_spec_set_qdata_full(pspec: *mut GParamSpec, quark: GQuark,
                                       data: gpointer,
                                       destroy: GDestroyNotify);
    pub fn g_param_spec_steal_qdata(pspec: *mut GParamSpec, quark: GQuark)
     -> gpointer;
    pub fn g_param_spec_get_redirect_target(pspec: *mut GParamSpec)
     -> *mut GParamSpec;
    pub fn g_param_value_set_default(pspec: *mut GParamSpec,
                                     value: *mut GValue);
    pub fn g_param_value_defaults(pspec: *mut GParamSpec, value: *mut GValue)
     -> gboolean;
    pub fn g_param_value_validate(pspec: *mut GParamSpec, value: *mut GValue)
     -> gboolean;
    pub fn g_param_value_convert(pspec: *mut GParamSpec,
                                 src_value: *const GValue,
                                 dest_value: *mut GValue,
                                 strict_validation: gboolean) -> gboolean;
    pub fn g_param_values_cmp(pspec: *mut GParamSpec, value1: *const GValue,
                              value2: *const GValue) -> gint;
    pub fn g_param_spec_get_name(pspec: *mut GParamSpec) -> *const gchar;
    pub fn g_param_spec_get_nick(pspec: *mut GParamSpec) -> *const gchar;
    pub fn g_param_spec_get_blurb(pspec: *mut GParamSpec) -> *const gchar;
    pub fn g_value_set_param(value: *mut GValue, param: *mut GParamSpec);
    pub fn g_value_get_param(value: *const GValue) -> *mut GParamSpec;
    pub fn g_value_dup_param(value: *const GValue) -> *mut GParamSpec;
    pub fn g_value_take_param(value: *mut GValue, param: *mut GParamSpec);
    pub fn g_value_set_param_take_ownership(value: *mut GValue,
                                            param: *mut GParamSpec);
    pub fn g_param_spec_get_default_value(pspec: *mut GParamSpec)
     -> *const GValue;
    pub fn g_param_spec_get_name_quark(pspec: *mut GParamSpec) -> GQuark;
    pub fn g_param_type_register_static(name: *const gchar,
                                        pspec_info: *const GParamSpecTypeInfo)
     -> GType;
    pub fn _g_param_type_register_static_constant(name: *const gchar,
                                                  pspec_info:
                                                      *const GParamSpecTypeInfo,
                                                  opt_type: GType) -> GType;
    pub fn g_param_spec_internal(param_type: GType, name: *const gchar,
                                 nick: *const gchar, blurb: *const gchar,
                                 flags: GParamFlags) -> gpointer;
    pub fn g_param_spec_pool_new(type_prefixing: gboolean)
     -> *mut GParamSpecPool;
    pub fn g_param_spec_pool_insert(pool: *mut GParamSpecPool,
                                    pspec: *mut GParamSpec,
                                    owner_type: GType);
    pub fn g_param_spec_pool_remove(pool: *mut GParamSpecPool,
                                    pspec: *mut GParamSpec);
    pub fn g_param_spec_pool_lookup(pool: *mut GParamSpecPool,
                                    param_name: *const gchar,
                                    owner_type: GType,
                                    walk_ancestors: gboolean)
     -> *mut GParamSpec;
    pub fn g_param_spec_pool_list_owned(pool: *mut GParamSpecPool,
                                        owner_type: GType) -> *mut GList;
    pub fn g_param_spec_pool_list(pool: *mut GParamSpecPool,
                                  owner_type: GType, n_pspecs_p: *mut guint)
     -> *mut *mut GParamSpec;
    pub fn g_cclosure_new(callback_func: GCallback, user_data: gpointer,
                          destroy_data: GClosureNotify) -> *mut GClosure;
    pub fn g_cclosure_new_swap(callback_func: GCallback, user_data: gpointer,
                               destroy_data: GClosureNotify) -> *mut GClosure;
    pub fn g_signal_type_cclosure_new(itype: GType, struct_offset: guint)
     -> *mut GClosure;
    pub fn g_closure_ref(closure: *mut GClosure) -> *mut GClosure;
    pub fn g_closure_sink(closure: *mut GClosure);
    pub fn g_closure_unref(closure: *mut GClosure);
    pub fn g_closure_new_simple(sizeof_closure: guint, data: gpointer)
     -> *mut GClosure;
    pub fn g_closure_add_finalize_notifier(closure: *mut GClosure,
                                           notify_data: gpointer,
                                           notify_func: GClosureNotify);
    pub fn g_closure_remove_finalize_notifier(closure: *mut GClosure,
                                              notify_data: gpointer,
                                              notify_func: GClosureNotify);
    pub fn g_closure_add_invalidate_notifier(closure: *mut GClosure,
                                             notify_data: gpointer,
                                             notify_func: GClosureNotify);
    pub fn g_closure_remove_invalidate_notifier(closure: *mut GClosure,
                                                notify_data: gpointer,
                                                notify_func: GClosureNotify);
    pub fn g_closure_add_marshal_guards(closure: *mut GClosure,
                                        pre_marshal_data: gpointer,
                                        pre_marshal_notify: GClosureNotify,
                                        post_marshal_data: gpointer,
                                        post_marshal_notify: GClosureNotify);
    pub fn g_closure_set_marshal(closure: *mut GClosure,
                                 marshal: GClosureMarshal);
    pub fn g_closure_set_meta_marshal(closure: *mut GClosure,
                                      marshal_data: gpointer,
                                      meta_marshal: GClosureMarshal);
    pub fn g_closure_invalidate(closure: *mut GClosure);
    pub fn g_closure_invoke(closure: *mut GClosure, return_value: *mut GValue,
                            n_param_values: guint,
                            param_values: *const GValue,
                            invocation_hint: gpointer);
    pub fn g_cclosure_marshal_generic(closure: *mut GClosure,
                                      return_gvalue: *mut GValue,
                                      n_param_values: guint,
                                      param_values: *const GValue,
                                      invocation_hint: gpointer,
                                      marshal_data: gpointer);
    pub fn g_cclosure_marshal_generic_va(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         instance: gpointer,
                                         args_list: va_list,
                                         marshal_data: gpointer,
                                         n_params: ::std::os::raw::c_int,
                                         param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__VOID(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         n_param_values: guint,
                                         param_values: *const GValue,
                                         invocation_hint: gpointer,
                                         marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__VOIDv(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          instance: gpointer, args: va_list,
                                          marshal_data: gpointer,
                                          n_params: ::std::os::raw::c_int,
                                          param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__BOOLEAN(closure: *mut GClosure,
                                            return_value: *mut GValue,
                                            n_param_values: guint,
                                            param_values: *const GValue,
                                            invocation_hint: gpointer,
                                            marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__BOOLEANv(closure: *mut GClosure,
                                             return_value: *mut GValue,
                                             instance: gpointer,
                                             args: va_list,
                                             marshal_data: gpointer,
                                             n_params: ::std::os::raw::c_int,
                                             param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__CHAR(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         n_param_values: guint,
                                         param_values: *const GValue,
                                         invocation_hint: gpointer,
                                         marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__CHARv(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          instance: gpointer, args: va_list,
                                          marshal_data: gpointer,
                                          n_params: ::std::os::raw::c_int,
                                          param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__UCHAR(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          n_param_values: guint,
                                          param_values: *const GValue,
                                          invocation_hint: gpointer,
                                          marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__UCHARv(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           instance: gpointer, args: va_list,
                                           marshal_data: gpointer,
                                           n_params: ::std::os::raw::c_int,
                                           param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__INT(closure: *mut GClosure,
                                        return_value: *mut GValue,
                                        n_param_values: guint,
                                        param_values: *const GValue,
                                        invocation_hint: gpointer,
                                        marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__INTv(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         instance: gpointer, args: va_list,
                                         marshal_data: gpointer,
                                         n_params: ::std::os::raw::c_int,
                                         param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__UINT(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         n_param_values: guint,
                                         param_values: *const GValue,
                                         invocation_hint: gpointer,
                                         marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__UINTv(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          instance: gpointer, args: va_list,
                                          marshal_data: gpointer,
                                          n_params: ::std::os::raw::c_int,
                                          param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__LONG(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         n_param_values: guint,
                                         param_values: *const GValue,
                                         invocation_hint: gpointer,
                                         marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__LONGv(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          instance: gpointer, args: va_list,
                                          marshal_data: gpointer,
                                          n_params: ::std::os::raw::c_int,
                                          param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__ULONG(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          n_param_values: guint,
                                          param_values: *const GValue,
                                          invocation_hint: gpointer,
                                          marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__ULONGv(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           instance: gpointer, args: va_list,
                                           marshal_data: gpointer,
                                           n_params: ::std::os::raw::c_int,
                                           param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__ENUM(closure: *mut GClosure,
                                         return_value: *mut GValue,
                                         n_param_values: guint,
                                         param_values: *const GValue,
                                         invocation_hint: gpointer,
                                         marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__ENUMv(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          instance: gpointer, args: va_list,
                                          marshal_data: gpointer,
                                          n_params: ::std::os::raw::c_int,
                                          param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__FLAGS(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          n_param_values: guint,
                                          param_values: *const GValue,
                                          invocation_hint: gpointer,
                                          marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__FLAGSv(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           instance: gpointer, args: va_list,
                                           marshal_data: gpointer,
                                           n_params: ::std::os::raw::c_int,
                                           param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__FLOAT(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          n_param_values: guint,
                                          param_values: *const GValue,
                                          invocation_hint: gpointer,
                                          marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__FLOATv(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           instance: gpointer, args: va_list,
                                           marshal_data: gpointer,
                                           n_params: ::std::os::raw::c_int,
                                           param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__DOUBLE(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           n_param_values: guint,
                                           param_values: *const GValue,
                                           invocation_hint: gpointer,
                                           marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__DOUBLEv(closure: *mut GClosure,
                                            return_value: *mut GValue,
                                            instance: gpointer, args: va_list,
                                            marshal_data: gpointer,
                                            n_params: ::std::os::raw::c_int,
                                            param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__STRING(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           n_param_values: guint,
                                           param_values: *const GValue,
                                           invocation_hint: gpointer,
                                           marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__STRINGv(closure: *mut GClosure,
                                            return_value: *mut GValue,
                                            instance: gpointer, args: va_list,
                                            marshal_data: gpointer,
                                            n_params: ::std::os::raw::c_int,
                                            param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__PARAM(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          n_param_values: guint,
                                          param_values: *const GValue,
                                          invocation_hint: gpointer,
                                          marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__PARAMv(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           instance: gpointer, args: va_list,
                                           marshal_data: gpointer,
                                           n_params: ::std::os::raw::c_int,
                                           param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__BOXED(closure: *mut GClosure,
                                          return_value: *mut GValue,
                                          n_param_values: guint,
                                          param_values: *const GValue,
                                          invocation_hint: gpointer,
                                          marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__BOXEDv(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           instance: gpointer, args: va_list,
                                           marshal_data: gpointer,
                                           n_params: ::std::os::raw::c_int,
                                           param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__POINTER(closure: *mut GClosure,
                                            return_value: *mut GValue,
                                            n_param_values: guint,
                                            param_values: *const GValue,
                                            invocation_hint: gpointer,
                                            marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__POINTERv(closure: *mut GClosure,
                                             return_value: *mut GValue,
                                             instance: gpointer,
                                             args: va_list,
                                             marshal_data: gpointer,
                                             n_params: ::std::os::raw::c_int,
                                             param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__OBJECT(closure: *mut GClosure,
                                           return_value: *mut GValue,
                                           n_param_values: guint,
                                           param_values: *const GValue,
                                           invocation_hint: gpointer,
                                           marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__OBJECTv(closure: *mut GClosure,
                                            return_value: *mut GValue,
                                            instance: gpointer, args: va_list,
                                            marshal_data: gpointer,
                                            n_params: ::std::os::raw::c_int,
                                            param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__VARIANT(closure: *mut GClosure,
                                            return_value: *mut GValue,
                                            n_param_values: guint,
                                            param_values: *const GValue,
                                            invocation_hint: gpointer,
                                            marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__VARIANTv(closure: *mut GClosure,
                                             return_value: *mut GValue,
                                             instance: gpointer,
                                             args: va_list,
                                             marshal_data: gpointer,
                                             n_params: ::std::os::raw::c_int,
                                             param_types: *mut GType);
    pub fn g_cclosure_marshal_VOID__UINT_POINTER(closure: *mut GClosure,
                                                 return_value: *mut GValue,
                                                 n_param_values: guint,
                                                 param_values: *const GValue,
                                                 invocation_hint: gpointer,
                                                 marshal_data: gpointer);
    pub fn g_cclosure_marshal_VOID__UINT_POINTERv(closure: *mut GClosure,
                                                  return_value: *mut GValue,
                                                  instance: gpointer,
                                                  args: va_list,
                                                  marshal_data: gpointer,
                                                  n_params:
                                                      ::std::os::raw::c_int,
                                                  param_types: *mut GType);
    pub fn g_cclosure_marshal_BOOLEAN__FLAGS(closure: *mut GClosure,
                                             return_value: *mut GValue,
                                             n_param_values: guint,
                                             param_values: *const GValue,
                                             invocation_hint: gpointer,
                                             marshal_data: gpointer);
    pub fn g_cclosure_marshal_BOOLEAN__FLAGSv(closure: *mut GClosure,
                                              return_value: *mut GValue,
                                              instance: gpointer,
                                              args: va_list,
                                              marshal_data: gpointer,
                                              n_params: ::std::os::raw::c_int,
                                              param_types: *mut GType);
    pub fn g_cclosure_marshal_STRING__OBJECT_POINTER(closure: *mut GClosure,
                                                     return_value:
                                                         *mut GValue,
                                                     n_param_values: guint,
                                                     param_values:
                                                         *const GValue,
                                                     invocation_hint:
                                                         gpointer,
                                                     marshal_data: gpointer);
    pub fn g_cclosure_marshal_STRING__OBJECT_POINTERv(closure: *mut GClosure,
                                                      return_value:
                                                          *mut GValue,
                                                      instance: gpointer,
                                                      args: va_list,
                                                      marshal_data: gpointer,
                                                      n_params:
                                                          ::std::os::raw::c_int,
                                                      param_types:
                                                          *mut GType);
    pub fn g_cclosure_marshal_BOOLEAN__BOXED_BOXED(closure: *mut GClosure,
                                                   return_value: *mut GValue,
                                                   n_param_values: guint,
                                                   param_values:
                                                       *const GValue,
                                                   invocation_hint: gpointer,
                                                   marshal_data: gpointer);
    pub fn g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(closure: *mut GClosure,
                                                    return_value: *mut GValue,
                                                    instance: gpointer,
                                                    args: va_list,
                                                    marshal_data: gpointer,
                                                    n_params:
                                                        ::std::os::raw::c_int,
                                                    param_types: *mut GType);
    pub fn g_signal_newv(signal_name: *const gchar, itype: GType,
                         signal_flags: GSignalFlags,
                         class_closure: *mut GClosure,
                         accumulator: GSignalAccumulator, accu_data: gpointer,
                         c_marshaller: GSignalCMarshaller, return_type: GType,
                         n_params: guint, param_types: *mut GType) -> guint;
    pub fn g_signal_new_valist(signal_name: *const gchar, itype: GType,
                               signal_flags: GSignalFlags,
                               class_closure: *mut GClosure,
                               accumulator: GSignalAccumulator,
                               accu_data: gpointer,
                               c_marshaller: GSignalCMarshaller,
                               return_type: GType, n_params: guint,
                               args: va_list) -> guint;
    pub fn g_signal_new(signal_name: *const gchar, itype: GType,
                        signal_flags: GSignalFlags, class_offset: guint,
                        accumulator: GSignalAccumulator, accu_data: gpointer,
                        c_marshaller: GSignalCMarshaller, return_type: GType,
                        n_params: guint, ...) -> guint;
    pub fn g_signal_new_class_handler(signal_name: *const gchar, itype: GType,
                                      signal_flags: GSignalFlags,
                                      class_handler: GCallback,
                                      accumulator: GSignalAccumulator,
                                      accu_data: gpointer,
                                      c_marshaller: GSignalCMarshaller,
                                      return_type: GType,
                                      n_params: guint, ...) -> guint;
    pub fn g_signal_set_va_marshaller(signal_id: guint, instance_type: GType,
                                      va_marshaller: GSignalCVaMarshaller);
    pub fn g_signal_emitv(instance_and_params: *const GValue,
                          signal_id: guint, detail: GQuark,
                          return_value: *mut GValue);
    pub fn g_signal_emit_valist(instance: gpointer, signal_id: guint,
                                detail: GQuark, var_args: va_list);
    pub fn g_signal_emit(instance: gpointer, signal_id: guint,
                         detail: GQuark, ...);
    pub fn g_signal_emit_by_name(instance: gpointer,
                                 detailed_signal: *const gchar, ...);
    pub fn g_signal_lookup(name: *const gchar, itype: GType) -> guint;
    pub fn g_signal_name(signal_id: guint) -> *const gchar;
    pub fn g_signal_query(signal_id: guint, query: *mut GSignalQuery);
    pub fn g_signal_list_ids(itype: GType, n_ids: *mut guint) -> *mut guint;
    pub fn g_signal_parse_name(detailed_signal: *const gchar, itype: GType,
                               signal_id_p: *mut guint, detail_p: *mut GQuark,
                               force_detail_quark: gboolean) -> gboolean;
    pub fn g_signal_get_invocation_hint(instance: gpointer)
     -> *mut GSignalInvocationHint;
    pub fn g_signal_stop_emission(instance: gpointer, signal_id: guint,
                                  detail: GQuark);
    pub fn g_signal_stop_emission_by_name(instance: gpointer,
                                          detailed_signal: *const gchar);
    pub fn g_signal_add_emission_hook(signal_id: guint, detail: GQuark,
                                      hook_func: GSignalEmissionHook,
                                      hook_data: gpointer,
                                      data_destroy: GDestroyNotify) -> gulong;
    pub fn g_signal_remove_emission_hook(signal_id: guint, hook_id: gulong);
    pub fn g_signal_has_handler_pending(instance: gpointer, signal_id: guint,
                                        detail: GQuark,
                                        may_be_blocked: gboolean) -> gboolean;
    pub fn g_signal_connect_closure_by_id(instance: gpointer,
                                          signal_id: guint, detail: GQuark,
                                          closure: *mut GClosure,
                                          after: gboolean) -> gulong;
    pub fn g_signal_connect_closure(instance: gpointer,
                                    detailed_signal: *const gchar,
                                    closure: *mut GClosure, after: gboolean)
     -> gulong;
    pub fn g_signal_connect_data(instance: gpointer,
                                 detailed_signal: *const gchar,
                                 c_handler: GCallback, data: gpointer,
                                 destroy_data: GClosureNotify,
                                 connect_flags: GConnectFlags) -> gulong;
    pub fn g_signal_handler_block(instance: gpointer, handler_id: gulong);
    pub fn g_signal_handler_unblock(instance: gpointer, handler_id: gulong);
    pub fn g_signal_handler_disconnect(instance: gpointer,
                                       handler_id: gulong);
    pub fn g_signal_handler_is_connected(instance: gpointer,
                                         handler_id: gulong) -> gboolean;
    pub fn g_signal_handler_find(instance: gpointer, mask: GSignalMatchType,
                                 signal_id: guint, detail: GQuark,
                                 closure: *mut GClosure, func: gpointer,
                                 data: gpointer) -> gulong;
    pub fn g_signal_handlers_block_matched(instance: gpointer,
                                           mask: GSignalMatchType,
                                           signal_id: guint, detail: GQuark,
                                           closure: *mut GClosure,
                                           func: gpointer, data: gpointer)
     -> guint;
    pub fn g_signal_handlers_unblock_matched(instance: gpointer,
                                             mask: GSignalMatchType,
                                             signal_id: guint, detail: GQuark,
                                             closure: *mut GClosure,
                                             func: gpointer, data: gpointer)
     -> guint;
    pub fn g_signal_handlers_disconnect_matched(instance: gpointer,
                                                mask: GSignalMatchType,
                                                signal_id: guint,
                                                detail: GQuark,
                                                closure: *mut GClosure,
                                                func: gpointer,
                                                data: gpointer) -> guint;
    pub fn g_signal_override_class_closure(signal_id: guint,
                                           instance_type: GType,
                                           class_closure: *mut GClosure);
    pub fn g_signal_override_class_handler(signal_name: *const gchar,
                                           instance_type: GType,
                                           class_handler: GCallback);
    pub fn g_signal_chain_from_overridden(instance_and_params: *const GValue,
                                          return_value: *mut GValue);
    pub fn g_signal_chain_from_overridden_handler(instance: gpointer, ...);
    pub fn g_signal_accumulator_true_handled(ihint:
                                                 *mut GSignalInvocationHint,
                                             return_accu: *mut GValue,
                                             handler_return: *const GValue,
                                             dummy: gpointer) -> gboolean;
    pub fn g_signal_accumulator_first_wins(ihint: *mut GSignalInvocationHint,
                                           return_accu: *mut GValue,
                                           handler_return: *const GValue,
                                           dummy: gpointer) -> gboolean;
    pub fn g_signal_handlers_destroy(instance: gpointer);
    pub fn _g_signals_destroy(itype: GType);
    pub fn g_date_get_type() -> GType;
    pub fn g_strv_get_type() -> GType;
    pub fn g_gstring_get_type() -> GType;
    pub fn g_hash_table_get_type() -> GType;
    pub fn g_array_get_type() -> GType;
    pub fn g_byte_array_get_type() -> GType;
    pub fn g_ptr_array_get_type() -> GType;
    pub fn g_bytes_get_type() -> GType;
    pub fn g_variant_type_get_gtype() -> GType;
    pub fn g_regex_get_type() -> GType;
    pub fn g_match_info_get_type() -> GType;
    pub fn g_error_get_type() -> GType;
    pub fn g_date_time_get_type() -> GType;
    pub fn g_time_zone_get_type() -> GType;
    pub fn g_io_channel_get_type() -> GType;
    pub fn g_io_condition_get_type() -> GType;
    pub fn g_variant_builder_get_type() -> GType;
    pub fn g_variant_dict_get_type() -> GType;
    pub fn g_key_file_get_type() -> GType;
    pub fn g_main_loop_get_type() -> GType;
    pub fn g_main_context_get_type() -> GType;
    pub fn g_source_get_type() -> GType;
    pub fn g_pollfd_get_type() -> GType;
    pub fn g_thread_get_type() -> GType;
    pub fn g_checksum_get_type() -> GType;
    pub fn g_markup_parse_context_get_type() -> GType;
    pub fn g_mapped_file_get_type() -> GType;
    pub fn g_option_group_get_type() -> GType;
    pub fn g_variant_get_gtype() -> GType;
    pub fn g_boxed_copy(boxed_type: GType, src_boxed: gconstpointer)
     -> gpointer;
    pub fn g_boxed_free(boxed_type: GType, boxed: gpointer);
    pub fn g_value_set_boxed(value: *mut GValue, v_boxed: gconstpointer);
    pub fn g_value_set_static_boxed(value: *mut GValue,
                                    v_boxed: gconstpointer);
    pub fn g_value_take_boxed(value: *mut GValue, v_boxed: gconstpointer);
    pub fn g_value_set_boxed_take_ownership(value: *mut GValue,
                                            v_boxed: gconstpointer);
    pub fn g_value_get_boxed(value: *const GValue) -> gpointer;
    pub fn g_value_dup_boxed(value: *const GValue) -> gpointer;
    pub fn g_boxed_type_register_static(name: *const gchar,
                                        boxed_copy: GBoxedCopyFunc,
                                        boxed_free: GBoxedFreeFunc) -> GType;
    pub fn g_closure_get_type() -> GType;
    pub fn g_value_get_type() -> GType;
    pub fn g_initially_unowned_get_type() -> GType;
    pub fn g_object_class_install_property(oclass: *mut GObjectClass,
                                           property_id: guint,
                                           pspec: *mut GParamSpec);
    pub fn g_object_class_find_property(oclass: *mut GObjectClass,
                                        property_name: *const gchar)
     -> *mut GParamSpec;
    pub fn g_object_class_list_properties(oclass: *mut GObjectClass,
                                          n_properties: *mut guint)
     -> *mut *mut GParamSpec;
    pub fn g_object_class_override_property(oclass: *mut GObjectClass,
                                            property_id: guint,
                                            name: *const gchar);
    pub fn g_object_class_install_properties(oclass: *mut GObjectClass,
                                             n_pspecs: guint,
                                             pspecs: *mut *mut GParamSpec);
    pub fn g_object_interface_install_property(g_iface: gpointer,
                                               pspec: *mut GParamSpec);
    pub fn g_object_interface_find_property(g_iface: gpointer,
                                            property_name: *const gchar)
     -> *mut GParamSpec;
    pub fn g_object_interface_list_properties(g_iface: gpointer,
                                              n_properties_p: *mut guint)
     -> *mut *mut GParamSpec;
    pub fn g_object_get_type() -> GType;
    pub fn g_object_new(object_type: GType,
                        first_property_name: *const gchar, ...) -> gpointer;
    pub fn g_object_newv(object_type: GType, n_parameters: guint,
                         parameters: *mut GParameter) -> gpointer;
    pub fn g_object_new_valist(object_type: GType,
                               first_property_name: *const gchar,
                               var_args: va_list) -> *mut GObject;
    pub fn g_object_set(object: gpointer,
                        first_property_name: *const gchar, ...);
    pub fn g_object_get(object: gpointer,
                        first_property_name: *const gchar, ...);
    pub fn g_object_connect(object: gpointer, signal_spec: *const gchar, ...)
     -> gpointer;
    pub fn g_object_disconnect(object: gpointer,
                               signal_spec: *const gchar, ...);
    pub fn g_object_set_valist(object: *mut GObject,
                               first_property_name: *const gchar,
                               var_args: va_list);
    pub fn g_object_get_valist(object: *mut GObject,
                               first_property_name: *const gchar,
                               var_args: va_list);
    pub fn g_object_set_property(object: *mut GObject,
                                 property_name: *const gchar,
                                 value: *const GValue);
    pub fn g_object_get_property(object: *mut GObject,
                                 property_name: *const gchar,
                                 value: *mut GValue);
    pub fn g_object_freeze_notify(object: *mut GObject);
    pub fn g_object_notify(object: *mut GObject, property_name: *const gchar);
    pub fn g_object_notify_by_pspec(object: *mut GObject,
                                    pspec: *mut GParamSpec);
    pub fn g_object_thaw_notify(object: *mut GObject);
    pub fn g_object_is_floating(object: gpointer) -> gboolean;
    pub fn g_object_ref_sink(object: gpointer) -> gpointer;
    pub fn g_object_ref(object: gpointer) -> gpointer;
    pub fn g_object_unref(object: gpointer);
    pub fn g_object_weak_ref(object: *mut GObject, notify: GWeakNotify,
                             data: gpointer);
    pub fn g_object_weak_unref(object: *mut GObject, notify: GWeakNotify,
                               data: gpointer);
    pub fn g_object_add_weak_pointer(object: *mut GObject,
                                     weak_pointer_location: *mut gpointer);
    pub fn g_object_remove_weak_pointer(object: *mut GObject,
                                        weak_pointer_location: *mut gpointer);
    pub fn g_object_add_toggle_ref(object: *mut GObject,
                                   notify: GToggleNotify, data: gpointer);
    pub fn g_object_remove_toggle_ref(object: *mut GObject,
                                      notify: GToggleNotify, data: gpointer);
    pub fn g_object_get_qdata(object: *mut GObject, quark: GQuark)
     -> gpointer;
    pub fn g_object_set_qdata(object: *mut GObject, quark: GQuark,
                              data: gpointer);
    pub fn g_object_set_qdata_full(object: *mut GObject, quark: GQuark,
                                   data: gpointer, destroy: GDestroyNotify);
    pub fn g_object_steal_qdata(object: *mut GObject, quark: GQuark)
     -> gpointer;
    pub fn g_object_dup_qdata(object: *mut GObject, quark: GQuark,
                              dup_func: GDuplicateFunc, user_data: gpointer)
     -> gpointer;
    pub fn g_object_replace_qdata(object: *mut GObject, quark: GQuark,
                                  oldval: gpointer, newval: gpointer,
                                  destroy: GDestroyNotify,
                                  old_destroy: *mut GDestroyNotify)
     -> gboolean;
    pub fn g_object_get_data(object: *mut GObject, key: *const gchar)
     -> gpointer;
    pub fn g_object_set_data(object: *mut GObject, key: *const gchar,
                             data: gpointer);
    pub fn g_object_set_data_full(object: *mut GObject, key: *const gchar,
                                  data: gpointer, destroy: GDestroyNotify);
    pub fn g_object_steal_data(object: *mut GObject, key: *const gchar)
     -> gpointer;
    pub fn g_object_dup_data(object: *mut GObject, key: *const gchar,
                             dup_func: GDuplicateFunc, user_data: gpointer)
     -> gpointer;
    pub fn g_object_replace_data(object: *mut GObject, key: *const gchar,
                                 oldval: gpointer, newval: gpointer,
                                 destroy: GDestroyNotify,
                                 old_destroy: *mut GDestroyNotify)
     -> gboolean;
    pub fn g_object_watch_closure(object: *mut GObject,
                                  closure: *mut GClosure);
    pub fn g_cclosure_new_object(callback_func: GCallback,
                                 object: *mut GObject) -> *mut GClosure;
    pub fn g_cclosure_new_object_swap(callback_func: GCallback,
                                      object: *mut GObject) -> *mut GClosure;
    pub fn g_closure_new_object(sizeof_closure: guint, object: *mut GObject)
     -> *mut GClosure;
    pub fn g_value_set_object(value: *mut GValue, v_object: gpointer);
    pub fn g_value_get_object(value: *const GValue) -> gpointer;
    pub fn g_value_dup_object(value: *const GValue) -> gpointer;
    pub fn g_signal_connect_object(instance: gpointer,
                                   detailed_signal: *const gchar,
                                   c_handler: GCallback, gobject: gpointer,
                                   connect_flags: GConnectFlags) -> gulong;
    pub fn g_object_force_floating(object: *mut GObject);
    pub fn g_object_run_dispose(object: *mut GObject);
    pub fn g_value_take_object(value: *mut GValue, v_object: gpointer);
    pub fn g_value_set_object_take_ownership(value: *mut GValue,
                                             v_object: gpointer);
    pub fn g_object_compat_control(what: gsize, data: gpointer) -> gsize;
    pub fn g_clear_object(object_ptr: *mut *mut GObject);
    pub fn g_weak_ref_init(weak_ref: *mut GWeakRef, object: gpointer);
    pub fn g_weak_ref_clear(weak_ref: *mut GWeakRef);
    pub fn g_weak_ref_get(weak_ref: *mut GWeakRef) -> gpointer;
    pub fn g_weak_ref_set(weak_ref: *mut GWeakRef, object: gpointer);
    pub fn g_binding_flags_get_type() -> GType;
    pub fn g_binding_get_type() -> GType;
    pub fn g_binding_get_flags(binding: *mut GBinding) -> GBindingFlags;
    pub fn g_binding_get_source(binding: *mut GBinding) -> *mut GObject;
    pub fn g_binding_get_target(binding: *mut GBinding) -> *mut GObject;
    pub fn g_binding_get_source_property(binding: *mut GBinding)
     -> *const gchar;
    pub fn g_binding_get_target_property(binding: *mut GBinding)
     -> *const gchar;
    pub fn g_binding_unbind(binding: *mut GBinding);
    pub fn g_object_bind_property(source: gpointer,
                                  source_property: *const gchar,
                                  target: gpointer,
                                  target_property: *const gchar,
                                  flags: GBindingFlags) -> *mut GBinding;
    pub fn g_object_bind_property_full(source: gpointer,
                                       source_property: *const gchar,
                                       target: gpointer,
                                       target_property: *const gchar,
                                       flags: GBindingFlags,
                                       transform_to: GBindingTransformFunc,
                                       transform_from: GBindingTransformFunc,
                                       user_data: gpointer,
                                       notify: GDestroyNotify)
     -> *mut GBinding;
    pub fn g_object_bind_property_with_closures(source: gpointer,
                                                source_property: *const gchar,
                                                target: gpointer,
                                                target_property: *const gchar,
                                                flags: GBindingFlags,
                                                transform_to: *mut GClosure,
                                                transform_from: *mut GClosure)
     -> *mut GBinding;
    pub fn g_enum_get_value(enum_class: *mut GEnumClass, value: gint)
     -> *mut GEnumValue;
    pub fn g_enum_get_value_by_name(enum_class: *mut GEnumClass,
                                    name: *const gchar) -> *mut GEnumValue;
    pub fn g_enum_get_value_by_nick(enum_class: *mut GEnumClass,
                                    nick: *const gchar) -> *mut GEnumValue;
    pub fn g_flags_get_first_value(flags_class: *mut GFlagsClass,
                                   value: guint) -> *mut GFlagsValue;
    pub fn g_flags_get_value_by_name(flags_class: *mut GFlagsClass,
                                     name: *const gchar) -> *mut GFlagsValue;
    pub fn g_flags_get_value_by_nick(flags_class: *mut GFlagsClass,
                                     nick: *const gchar) -> *mut GFlagsValue;
    pub fn g_value_set_enum(value: *mut GValue, v_enum: gint);
    pub fn g_value_get_enum(value: *const GValue) -> gint;
    pub fn g_value_set_flags(value: *mut GValue, v_flags: guint);
    pub fn g_value_get_flags(value: *const GValue) -> guint;
    pub fn g_enum_register_static(name: *const gchar,
                                  const_static_values: *const GEnumValue)
     -> GType;
    pub fn g_flags_register_static(name: *const gchar,
                                   const_static_values: *const GFlagsValue)
     -> GType;
    pub fn g_enum_complete_type_info(g_enum_type: GType, info: *mut GTypeInfo,
                                     const_values: *const GEnumValue);
    pub fn g_flags_complete_type_info(g_flags_type: GType,
                                      info: *mut GTypeInfo,
                                      const_values: *const GFlagsValue);
    pub fn g_param_spec_char(name: *const gchar, nick: *const gchar,
                             blurb: *const gchar, minimum: gint8,
                             maximum: gint8, default_value: gint8,
                             flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_uchar(name: *const gchar, nick: *const gchar,
                              blurb: *const gchar, minimum: guint8,
                              maximum: guint8, default_value: guint8,
                              flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_boolean(name: *const gchar, nick: *const gchar,
                                blurb: *const gchar, default_value: gboolean,
                                flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_int(name: *const gchar, nick: *const gchar,
                            blurb: *const gchar, minimum: gint, maximum: gint,
                            default_value: gint, flags: GParamFlags)
     -> *mut GParamSpec;
    pub fn g_param_spec_uint(name: *const gchar, nick: *const gchar,
                             blurb: *const gchar, minimum: guint,
                             maximum: guint, default_value: guint,
                             flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_long(name: *const gchar, nick: *const gchar,
                             blurb: *const gchar, minimum: glong,
                             maximum: glong, default_value: glong,
                             flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_ulong(name: *const gchar, nick: *const gchar,
                              blurb: *const gchar, minimum: gulong,
                              maximum: gulong, default_value: gulong,
                              flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_int64(name: *const gchar, nick: *const gchar,
                              blurb: *const gchar, minimum: gint64,
                              maximum: gint64, default_value: gint64,
                              flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_uint64(name: *const gchar, nick: *const gchar,
                               blurb: *const gchar, minimum: guint64,
                               maximum: guint64, default_value: guint64,
                               flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_unichar(name: *const gchar, nick: *const gchar,
                                blurb: *const gchar, default_value: gunichar,
                                flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_enum(name: *const gchar, nick: *const gchar,
                             blurb: *const gchar, enum_type: GType,
                             default_value: gint, flags: GParamFlags)
     -> *mut GParamSpec;
    pub fn g_param_spec_flags(name: *const gchar, nick: *const gchar,
                              blurb: *const gchar, flags_type: GType,
                              default_value: guint, flags: GParamFlags)
     -> *mut GParamSpec;
    pub fn g_param_spec_float(name: *const gchar, nick: *const gchar,
                              blurb: *const gchar, minimum: gfloat,
                              maximum: gfloat, default_value: gfloat,
                              flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_double(name: *const gchar, nick: *const gchar,
                               blurb: *const gchar, minimum: gdouble,
                               maximum: gdouble, default_value: gdouble,
                               flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_string(name: *const gchar, nick: *const gchar,
                               blurb: *const gchar,
                               default_value: *const gchar,
                               flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_param(name: *const gchar, nick: *const gchar,
                              blurb: *const gchar, param_type: GType,
                              flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_boxed(name: *const gchar, nick: *const gchar,
                              blurb: *const gchar, boxed_type: GType,
                              flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_pointer(name: *const gchar, nick: *const gchar,
                                blurb: *const gchar, flags: GParamFlags)
     -> *mut GParamSpec;
    pub fn g_param_spec_value_array(name: *const gchar, nick: *const gchar,
                                    blurb: *const gchar,
                                    element_spec: *mut GParamSpec,
                                    flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_object(name: *const gchar, nick: *const gchar,
                               blurb: *const gchar, object_type: GType,
                               flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_override(name: *const gchar,
                                 overridden: *mut GParamSpec)
     -> *mut GParamSpec;
    pub fn g_param_spec_gtype(name: *const gchar, nick: *const gchar,
                              blurb: *const gchar, is_a_type: GType,
                              flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_param_spec_variant(name: *const gchar, nick: *const gchar,
                                blurb: *const gchar,
                                _type: *const GVariantType,
                                default_value: *mut GVariant,
                                flags: GParamFlags) -> *mut GParamSpec;
    pub fn g_source_set_closure(source: *mut GSource, closure: *mut GClosure);
    pub fn g_source_set_dummy_callback(source: *mut GSource);
    pub fn g_type_module_get_type() -> GType;
    pub fn g_type_module_use(module: *mut GTypeModule) -> gboolean;
    pub fn g_type_module_unuse(module: *mut GTypeModule);
    pub fn g_type_module_set_name(module: *mut GTypeModule,
                                  name: *const gchar);
    pub fn g_type_module_register_type(module: *mut GTypeModule,
                                       parent_type: GType,
                                       type_name: *const gchar,
                                       type_info: *const GTypeInfo,
                                       flags: GTypeFlags) -> GType;
    pub fn g_type_module_add_interface(module: *mut GTypeModule,
                                       instance_type: GType,
                                       interface_type: GType,
                                       interface_info: *const GInterfaceInfo);
    pub fn g_type_module_register_enum(module: *mut GTypeModule,
                                       name: *const gchar,
                                       const_static_values: *const GEnumValue)
     -> GType;
    pub fn g_type_module_register_flags(module: *mut GTypeModule,
                                        name: *const gchar,
                                        const_static_values:
                                            *const GFlagsValue) -> GType;
    pub fn g_type_plugin_get_type() -> GType;
    pub fn g_type_plugin_use(plugin: *mut GTypePlugin);
    pub fn g_type_plugin_unuse(plugin: *mut GTypePlugin);
    pub fn g_type_plugin_complete_type_info(plugin: *mut GTypePlugin,
                                            g_type: GType,
                                            info: *mut GTypeInfo,
                                            value_table:
                                                *mut GTypeValueTable);
    pub fn g_type_plugin_complete_interface_info(plugin: *mut GTypePlugin,
                                                 instance_type: GType,
                                                 interface_type: GType,
                                                 info: *mut GInterfaceInfo);
    pub fn g_value_array_get_type() -> GType;
    pub fn g_value_array_get_nth(value_array: *mut GValueArray, index_: guint)
     -> *mut GValue;
    pub fn g_value_array_new(n_prealloced: guint) -> *mut GValueArray;
    pub fn g_value_array_free(value_array: *mut GValueArray);
    pub fn g_value_array_copy(value_array: *const GValueArray)
     -> *mut GValueArray;
    pub fn g_value_array_prepend(value_array: *mut GValueArray,
                                 value: *const GValue) -> *mut GValueArray;
    pub fn g_value_array_append(value_array: *mut GValueArray,
                                value: *const GValue) -> *mut GValueArray;
    pub fn g_value_array_insert(value_array: *mut GValueArray, index_: guint,
                                value: *const GValue) -> *mut GValueArray;
    pub fn g_value_array_remove(value_array: *mut GValueArray, index_: guint)
     -> *mut GValueArray;
    pub fn g_value_array_sort(value_array: *mut GValueArray,
                              compare_func: GCompareFunc) -> *mut GValueArray;
    pub fn g_value_array_sort_with_data(value_array: *mut GValueArray,
                                        compare_func: GCompareDataFunc,
                                        user_data: gpointer)
     -> *mut GValueArray;
    pub fn g_value_set_char(value: *mut GValue, v_char: gchar);
    pub fn g_value_get_char(value: *const GValue) -> gchar;
    pub fn g_value_set_schar(value: *mut GValue, v_char: gint8);
    pub fn g_value_get_schar(value: *const GValue) -> gint8;
    pub fn g_value_set_uchar(value: *mut GValue, v_uchar: guchar);
    pub fn g_value_get_uchar(value: *const GValue) -> guchar;
    pub fn g_value_set_boolean(value: *mut GValue, v_boolean: gboolean);
    pub fn g_value_get_boolean(value: *const GValue) -> gboolean;
    pub fn g_value_set_int(value: *mut GValue, v_int: gint);
    pub fn g_value_get_int(value: *const GValue) -> gint;
    pub fn g_value_set_uint(value: *mut GValue, v_uint: guint);
    pub fn g_value_get_uint(value: *const GValue) -> guint;
    pub fn g_value_set_long(value: *mut GValue, v_long: glong);
    pub fn g_value_get_long(value: *const GValue) -> glong;
    pub fn g_value_set_ulong(value: *mut GValue, v_ulong: gulong);
    pub fn g_value_get_ulong(value: *const GValue) -> gulong;
    pub fn g_value_set_int64(value: *mut GValue, v_int64: gint64);
    pub fn g_value_get_int64(value: *const GValue) -> gint64;
    pub fn g_value_set_uint64(value: *mut GValue, v_uint64: guint64);
    pub fn g_value_get_uint64(value: *const GValue) -> guint64;
    pub fn g_value_set_float(value: *mut GValue, v_float: gfloat);
    pub fn g_value_get_float(value: *const GValue) -> gfloat;
    pub fn g_value_set_double(value: *mut GValue, v_double: gdouble);
    pub fn g_value_get_double(value: *const GValue) -> gdouble;
    pub fn g_value_set_string(value: *mut GValue, v_string: *const gchar);
    pub fn g_value_set_static_string(value: *mut GValue,
                                     v_string: *const gchar);
    pub fn g_value_get_string(value: *const GValue) -> *const gchar;
    pub fn g_value_dup_string(value: *const GValue) -> *mut gchar;
    pub fn g_value_set_pointer(value: *mut GValue, v_pointer: gpointer);
    pub fn g_value_get_pointer(value: *const GValue) -> gpointer;
    pub fn g_gtype_get_type() -> GType;
    pub fn g_value_set_gtype(value: *mut GValue, v_gtype: GType);
    pub fn g_value_get_gtype(value: *const GValue) -> GType;
    pub fn g_value_set_variant(value: *mut GValue, variant: *mut GVariant);
    pub fn g_value_take_variant(value: *mut GValue, variant: *mut GVariant);
    pub fn g_value_get_variant(value: *const GValue) -> *mut GVariant;
    pub fn g_value_dup_variant(value: *const GValue) -> *mut GVariant;
    pub fn g_pointer_type_register_static(name: *const gchar) -> GType;
    pub fn g_strdup_value_contents(value: *const GValue) -> *mut gchar;
    pub fn g_value_take_string(value: *mut GValue, v_string: *mut gchar);
    pub fn g_value_set_string_take_ownership(value: *mut GValue,
                                             v_string: *mut gchar);
    pub fn g_module_supported() -> gboolean;
    pub fn g_module_open(file_name: *const gchar, flags: GModuleFlags)
     -> *mut GModule;
    pub fn g_module_close(module: *mut GModule) -> gboolean;
    pub fn g_module_make_resident(module: *mut GModule);
    pub fn g_module_error() -> *const gchar;
    pub fn g_module_symbol(module: *mut GModule, symbol_name: *const gchar,
                           symbol: *mut gpointer) -> gboolean;
    pub fn g_module_name(module: *mut GModule) -> *const gchar;
    pub fn g_module_build_path(directory: *const gchar,
                               module_name: *const gchar) -> *mut gchar;
    pub fn purple_value_new(_type: PurpleType, ...) -> *mut PurpleValue;
    pub fn purple_value_new_outgoing(_type: PurpleType, ...)
     -> *mut PurpleValue;
    pub fn purple_value_destroy(value: *mut PurpleValue);
    pub fn purple_value_dup(value: *const PurpleValue) -> *mut PurpleValue;
    pub fn purple_value_get_type(value: *const PurpleValue) -> PurpleType;
    pub fn purple_value_get_subtype(value: *const PurpleValue)
     -> ::std::os::raw::c_uint;
    pub fn purple_value_get_specific_type(value: *const PurpleValue)
     -> *const ::std::os::raw::c_char;
    pub fn purple_value_is_outgoing(value: *const PurpleValue) -> gboolean;
    pub fn purple_value_set_char(value: *mut PurpleValue,
                                 data: ::std::os::raw::c_char);
    pub fn purple_value_set_uchar(value: *mut PurpleValue,
                                  data: ::std::os::raw::c_uchar);
    pub fn purple_value_set_boolean(value: *mut PurpleValue, data: gboolean);
    pub fn purple_value_set_short(value: *mut PurpleValue,
                                  data: ::std::os::raw::c_short);
    pub fn purple_value_set_ushort(value: *mut PurpleValue,
                                   data: ::std::os::raw::c_ushort);
    pub fn purple_value_set_int(value: *mut PurpleValue,
                                data: ::std::os::raw::c_int);
    pub fn purple_value_set_uint(value: *mut PurpleValue,
                                 data: ::std::os::raw::c_uint);
    pub fn purple_value_set_long(value: *mut PurpleValue,
                                 data: ::std::os::raw::c_long);
    pub fn purple_value_set_ulong(value: *mut PurpleValue,
                                  data: ::std::os::raw::c_ulong);
    pub fn purple_value_set_int64(value: *mut PurpleValue, data: gint64);
    pub fn purple_value_set_uint64(value: *mut PurpleValue, data: guint64);
    pub fn purple_value_set_string(value: *mut PurpleValue,
                                   data: *const ::std::os::raw::c_char);
    pub fn purple_value_set_object(value: *mut PurpleValue,
                                   data: *mut ::std::os::raw::c_void);
    pub fn purple_value_set_pointer(value: *mut PurpleValue,
                                    data: *mut ::std::os::raw::c_void);
    pub fn purple_value_set_enum(value: *mut PurpleValue,
                                 data: ::std::os::raw::c_int);
    pub fn purple_value_set_boxed(value: *mut PurpleValue,
                                  data: *mut ::std::os::raw::c_void);
    pub fn purple_value_get_char(value: *const PurpleValue)
     -> ::std::os::raw::c_char;
    pub fn purple_value_get_uchar(value: *const PurpleValue)
     -> ::std::os::raw::c_uchar;
    pub fn purple_value_get_boolean(value: *const PurpleValue) -> gboolean;
    pub fn purple_value_get_short(value: *const PurpleValue)
     -> ::std::os::raw::c_short;
    pub fn purple_value_get_ushort(value: *const PurpleValue)
     -> ::std::os::raw::c_ushort;
    pub fn purple_value_get_int(value: *const PurpleValue)
     -> ::std::os::raw::c_int;
    pub fn purple_value_get_uint(value: *const PurpleValue)
     -> ::std::os::raw::c_uint;
    pub fn purple_value_get_long(value: *const PurpleValue)
     -> ::std::os::raw::c_long;
    pub fn purple_value_get_ulong(value: *const PurpleValue)
     -> ::std::os::raw::c_ulong;
    pub fn purple_value_get_int64(value: *const PurpleValue) -> gint64;
    pub fn purple_value_get_uint64(value: *const PurpleValue) -> guint64;
    pub fn purple_value_get_string(value: *const PurpleValue)
     -> *const ::std::os::raw::c_char;
    pub fn purple_value_get_object(value: *const PurpleValue)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_value_get_pointer(value: *const PurpleValue)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_value_get_enum(value: *const PurpleValue)
     -> ::std::os::raw::c_int;
    pub fn purple_value_get_boxed(value: *const PurpleValue)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_signal_register(instance: *mut ::std::os::raw::c_void,
                                  signal: *const ::std::os::raw::c_char,
                                  marshal: PurpleSignalMarshalFunc,
                                  ret_value: *mut PurpleValue,
                                  num_values: ::std::os::raw::c_int, ...)
     -> gulong;
    pub fn purple_signal_unregister(instance: *mut ::std::os::raw::c_void,
                                    signal: *const ::std::os::raw::c_char);
    pub fn purple_signals_unregister_by_instance(instance:
                                                     *mut ::std::os::raw::c_void);
    pub fn purple_signal_get_values(instance: *mut ::std::os::raw::c_void,
                                    signal: *const ::std::os::raw::c_char,
                                    ret_value: *mut *mut PurpleValue,
                                    num_values: *mut ::std::os::raw::c_int,
                                    values: *mut *mut *mut PurpleValue);
    pub fn purple_signal_connect_priority(instance:
                                              *mut ::std::os::raw::c_void,
                                          signal:
                                              *const ::std::os::raw::c_char,
                                          handle: *mut ::std::os::raw::c_void,
                                          func: PurpleCallback,
                                          data: *mut ::std::os::raw::c_void,
                                          priority: ::std::os::raw::c_int)
     -> gulong;
    pub fn purple_signal_connect(instance: *mut ::std::os::raw::c_void,
                                 signal: *const ::std::os::raw::c_char,
                                 handle: *mut ::std::os::raw::c_void,
                                 func: PurpleCallback,
                                 data: *mut ::std::os::raw::c_void) -> gulong;
    pub fn purple_signal_connect_priority_vargs(instance:
                                                    *mut ::std::os::raw::c_void,
                                                signal:
                                                    *const ::std::os::raw::c_char,
                                                handle:
                                                    *mut ::std::os::raw::c_void,
                                                func: PurpleCallback,
                                                data:
                                                    *mut ::std::os::raw::c_void,
                                                priority:
                                                    ::std::os::raw::c_int)
     -> gulong;
    pub fn purple_signal_connect_vargs(instance: *mut ::std::os::raw::c_void,
                                       signal: *const ::std::os::raw::c_char,
                                       handle: *mut ::std::os::raw::c_void,
                                       func: PurpleCallback,
                                       data: *mut ::std::os::raw::c_void)
     -> gulong;
    pub fn purple_signal_disconnect(instance: *mut ::std::os::raw::c_void,
                                    signal: *const ::std::os::raw::c_char,
                                    handle: *mut ::std::os::raw::c_void,
                                    func: PurpleCallback);
    pub fn purple_signals_disconnect_by_handle(handle:
                                                   *mut ::std::os::raw::c_void);
    pub fn purple_signal_emit(instance: *mut ::std::os::raw::c_void,
                              signal: *const ::std::os::raw::c_char, ...);
    pub fn purple_signal_emit_vargs(instance: *mut ::std::os::raw::c_void,
                                    signal: *const ::std::os::raw::c_char,
                                    args: va_list);
    pub fn purple_signal_emit_return_1(instance: *mut ::std::os::raw::c_void,
                                       signal:
                                           *const ::std::os::raw::c_char, ...)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_signal_emit_vargs_return_1(instance:
                                                 *mut ::std::os::raw::c_void,
                                             signal:
                                                 *const ::std::os::raw::c_char,
                                             args: va_list)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_signals_init();
    pub fn purple_signals_uninit();
    pub fn purple_marshal_VOID(cb: PurpleCallback, args: va_list,
                               data: *mut ::std::os::raw::c_void,
                               return_val: *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__INT(cb: PurpleCallback, args: va_list,
                                    data: *mut ::std::os::raw::c_void,
                                    return_val:
                                        *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__INT_INT(cb: PurpleCallback, args: va_list,
                                        data: *mut ::std::os::raw::c_void,
                                        return_val:
                                            *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__POINTER(cb: PurpleCallback, args: va_list,
                                        data: *mut ::std::os::raw::c_void,
                                        return_val:
                                            *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__POINTER_UINT(cb: PurpleCallback,
                                             args: va_list,
                                             data:
                                                 *mut ::std::os::raw::c_void,
                                             return_val:
                                                 *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__POINTER_INT_INT(cb: PurpleCallback,
                                                args: va_list,
                                                data:
                                                    *mut ::std::os::raw::c_void,
                                                return_val:
                                                    *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__POINTER_INT_POINTER(cb: PurpleCallback,
                                                    args: va_list,
                                                    data:
                                                        *mut ::std::os::raw::c_void,
                                                    return_val:
                                                        *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__POINTER_POINTER(cb: PurpleCallback,
                                                args: va_list,
                                                data:
                                                    *mut ::std::os::raw::c_void,
                                                return_val:
                                                    *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__POINTER_POINTER_UINT(cb: PurpleCallback,
                                                     args: va_list,
                                                     data:
                                                         *mut ::std::os::raw::c_void,
                                                     return_val:
                                                         *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__POINTER_POINTER_UINT_UINT(cb: PurpleCallback,
                                                          args: va_list,
                                                          data:
                                                              *mut ::std::os::raw::c_void,
                                                          return_val:
                                                              *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__POINTER_POINTER_POINTER(cb: PurpleCallback,
                                                        args: va_list,
                                                        data:
                                                            *mut ::std::os::raw::c_void,
                                                        return_val:
                                                            *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__POINTER_POINTER_POINTER_POINTER(cb:
                                                                    PurpleCallback,
                                                                args: va_list,
                                                                data:
                                                                    *mut ::std::os::raw::c_void,
                                                                return_val:
                                                                    *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__POINTER_POINTER_POINTER_POINTER_POINTER(cb:
                                                                            PurpleCallback,
                                                                        args:
                                                                            va_list,
                                                                        data:
                                                                            *mut ::std::os::raw::c_void,
                                                                        return_val:
                                                                            *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__POINTER_POINTER_POINTER_UINT(cb:
                                                                 PurpleCallback,
                                                             args: va_list,
                                                             data:
                                                                 *mut ::std::os::raw::c_void,
                                                             return_val:
                                                                 *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__POINTER_POINTER_POINTER_POINTER_UINT(cb:
                                                                         PurpleCallback,
                                                                     args:
                                                                         va_list,
                                                                     data:
                                                                         *mut ::std::os::raw::c_void,
                                                                     return_val:
                                                                         *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_VOID__POINTER_POINTER_POINTER_UINT_UINT(cb:
                                                                      PurpleCallback,
                                                                  args:
                                                                      va_list,
                                                                  data:
                                                                      *mut ::std::os::raw::c_void,
                                                                  return_val:
                                                                      *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_INT__INT(cb: PurpleCallback, args: va_list,
                                   data: *mut ::std::os::raw::c_void,
                                   return_val:
                                       *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_INT__INT_INT(cb: PurpleCallback, args: va_list,
                                       data: *mut ::std::os::raw::c_void,
                                       return_val:
                                           *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_INT__POINTER_POINTER(cb: PurpleCallback,
                                               args: va_list,
                                               data:
                                                   *mut ::std::os::raw::c_void,
                                               return_val:
                                                   *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_INT__POINTER_POINTER_POINTER(cb: PurpleCallback,
                                                       args: va_list,
                                                       data:
                                                           *mut ::std::os::raw::c_void,
                                                       return_val:
                                                           *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_INT__POINTER_POINTER_POINTER_POINTER_POINTER(cb:
                                                                           PurpleCallback,
                                                                       args:
                                                                           va_list,
                                                                       data:
                                                                           *mut ::std::os::raw::c_void,
                                                                       return_val:
                                                                           *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_BOOLEAN__POINTER(cb: PurpleCallback, args: va_list,
                                           data: *mut ::std::os::raw::c_void,
                                           return_val:
                                               *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_BOOLEAN__POINTER_POINTER(cb: PurpleCallback,
                                                   args: va_list,
                                                   data:
                                                       *mut ::std::os::raw::c_void,
                                                   return_val:
                                                       *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_BOOLEAN__POINTER_BOOLEAN(cb: PurpleCallback,
                                                   args: va_list,
                                                   data:
                                                       *mut ::std::os::raw::c_void,
                                                   return_val:
                                                       *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_BOOLEAN__POINTER_POINTER_POINTER(cb: PurpleCallback,
                                                           args: va_list,
                                                           data:
                                                               *mut ::std::os::raw::c_void,
                                                           return_val:
                                                               *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_BOOLEAN__POINTER_POINTER_UINT(cb: PurpleCallback,
                                                        args: va_list,
                                                        data:
                                                            *mut ::std::os::raw::c_void,
                                                        return_val:
                                                            *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_UINT(cb:
                                                                    PurpleCallback,
                                                                args: va_list,
                                                                data:
                                                                    *mut ::std::os::raw::c_void,
                                                                return_val:
                                                                    *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER(cb:
                                                                       PurpleCallback,
                                                                   args:
                                                                       va_list,
                                                                   data:
                                                                       *mut ::std::os::raw::c_void,
                                                                   return_val:
                                                                       *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER(cb:
                                                                               PurpleCallback,
                                                                           args:
                                                                               va_list,
                                                                           data:
                                                                               *mut ::std::os::raw::c_void,
                                                                           return_val:
                                                                               *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_UINT(cb:
                                                                            PurpleCallback,
                                                                        args:
                                                                            va_list,
                                                                        data:
                                                                            *mut ::std::os::raw::c_void,
                                                                        return_val:
                                                                            *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_POINTER_POINTER(cb:
                                                                                       PurpleCallback,
                                                                                   args:
                                                                                       va_list,
                                                                                   data:
                                                                                       *mut ::std::os::raw::c_void,
                                                                                   return_val:
                                                                                       *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_BOOLEAN__INT_POINTER(cb: PurpleCallback,
                                               args: va_list,
                                               data:
                                                   *mut ::std::os::raw::c_void,
                                               return_val:
                                                   *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_POINTER__POINTER(cb: PurpleCallback, args: va_list,
                                           data: *mut ::std::os::raw::c_void,
                                           return_val:
                                               *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_POINTER__POINTER_INT(cb: PurpleCallback,
                                               args: va_list,
                                               data:
                                                   *mut ::std::os::raw::c_void,
                                               return_val:
                                                   *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_POINTER__POINTER_INT64(cb: PurpleCallback,
                                                 args: va_list,
                                                 data:
                                                     *mut ::std::os::raw::c_void,
                                                 return_val:
                                                     *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_POINTER__POINTER_INT_BOOLEAN(cb: PurpleCallback,
                                                       args: va_list,
                                                       data:
                                                           *mut ::std::os::raw::c_void,
                                                       return_val:
                                                           *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_POINTER__POINTER_INT64_BOOLEAN(cb: PurpleCallback,
                                                         args: va_list,
                                                         data:
                                                             *mut ::std::os::raw::c_void,
                                                         return_val:
                                                             *mut *mut ::std::os::raw::c_void);
    pub fn purple_marshal_POINTER__POINTER_POINTER(cb: PurpleCallback,
                                                   args: va_list,
                                                   data:
                                                       *mut ::std::os::raw::c_void,
                                                   return_val:
                                                       *mut *mut ::std::os::raw::c_void);
    pub fn purple_prefs_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_prefs_init();
    pub fn purple_prefs_uninit();
    pub fn purple_prefs_add_none(name: *const ::std::os::raw::c_char);
    pub fn purple_prefs_add_bool(name: *const ::std::os::raw::c_char,
                                 value: gboolean);
    pub fn purple_prefs_add_int(name: *const ::std::os::raw::c_char,
                                value: ::std::os::raw::c_int);
    pub fn purple_prefs_add_string(name: *const ::std::os::raw::c_char,
                                   value: *const ::std::os::raw::c_char);
    pub fn purple_prefs_add_string_list(name: *const ::std::os::raw::c_char,
                                        value: *mut GList);
    pub fn purple_prefs_add_path(name: *const ::std::os::raw::c_char,
                                 value: *const ::std::os::raw::c_char);
    pub fn purple_prefs_add_path_list(name: *const ::std::os::raw::c_char,
                                      value: *mut GList);
    pub fn purple_prefs_remove(name: *const ::std::os::raw::c_char);
    pub fn purple_prefs_rename(oldname: *const ::std::os::raw::c_char,
                               newname: *const ::std::os::raw::c_char);
    pub fn purple_prefs_rename_boolean_toggle(oldname:
                                                  *const ::std::os::raw::c_char,
                                              newname:
                                                  *const ::std::os::raw::c_char);
    pub fn purple_prefs_destroy();
    pub fn purple_prefs_set_generic(name: *const ::std::os::raw::c_char,
                                    value: gpointer);
    pub fn purple_prefs_set_bool(name: *const ::std::os::raw::c_char,
                                 value: gboolean);
    pub fn purple_prefs_set_int(name: *const ::std::os::raw::c_char,
                                value: ::std::os::raw::c_int);
    pub fn purple_prefs_set_string(name: *const ::std::os::raw::c_char,
                                   value: *const ::std::os::raw::c_char);
    pub fn purple_prefs_set_string_list(name: *const ::std::os::raw::c_char,
                                        value: *mut GList);
    pub fn purple_prefs_set_path(name: *const ::std::os::raw::c_char,
                                 value: *const ::std::os::raw::c_char);
    pub fn purple_prefs_set_path_list(name: *const ::std::os::raw::c_char,
                                      value: *mut GList);
    pub fn purple_prefs_exists(name: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_prefs_get_type(name: *const ::std::os::raw::c_char)
     -> PurplePrefType;
    pub fn purple_prefs_get_bool(name: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_prefs_get_int(name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn purple_prefs_get_string(name: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_prefs_get_string_list(name: *const ::std::os::raw::c_char)
     -> *mut GList;
    pub fn purple_prefs_get_path(name: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_prefs_get_path_list(name: *const ::std::os::raw::c_char)
     -> *mut GList;
    pub fn purple_prefs_get_children_names(name:
                                               *const ::std::os::raw::c_char)
     -> *mut GList;
    pub fn purple_prefs_connect_callback(handle: *mut ::std::os::raw::c_void,
                                         name: *const ::std::os::raw::c_char,
                                         cb: PurplePrefCallback,
                                         data: gpointer) -> guint;
    pub fn purple_prefs_disconnect_callback(callback_id: guint);
    pub fn purple_prefs_disconnect_by_handle(handle:
                                                 *mut ::std::os::raw::c_void);
    pub fn purple_prefs_trigger_callback(name: *const ::std::os::raw::c_char);
    pub fn purple_prefs_load() -> gboolean;
    pub fn purple_prefs_update_old();
    pub fn purple_plugin_pref_frame_new() -> *mut PurplePluginPrefFrame;
    pub fn purple_plugin_pref_frame_destroy(frame:
                                                *mut PurplePluginPrefFrame);
    pub fn purple_plugin_pref_frame_add(frame: *mut PurplePluginPrefFrame,
                                        pref: *mut PurplePluginPref);
    pub fn purple_plugin_pref_frame_get_prefs(frame:
                                                  *mut PurplePluginPrefFrame)
     -> *mut GList;
    pub fn purple_plugin_pref_new() -> *mut PurplePluginPref;
    pub fn purple_plugin_pref_new_with_name(name:
                                                *const ::std::os::raw::c_char)
     -> *mut PurplePluginPref;
    pub fn purple_plugin_pref_new_with_label(label:
                                                 *const ::std::os::raw::c_char)
     -> *mut PurplePluginPref;
    pub fn purple_plugin_pref_new_with_name_and_label(name:
                                                          *const ::std::os::raw::c_char,
                                                      label:
                                                          *const ::std::os::raw::c_char)
     -> *mut PurplePluginPref;
    pub fn purple_plugin_pref_destroy(pref: *mut PurplePluginPref);
    pub fn purple_plugin_pref_set_name(pref: *mut PurplePluginPref,
                                       name: *const ::std::os::raw::c_char);
    pub fn purple_plugin_pref_get_name(pref: *mut PurplePluginPref)
     -> *const ::std::os::raw::c_char;
    pub fn purple_plugin_pref_set_label(pref: *mut PurplePluginPref,
                                        label: *const ::std::os::raw::c_char);
    pub fn purple_plugin_pref_get_label(pref: *mut PurplePluginPref)
     -> *const ::std::os::raw::c_char;
    pub fn purple_plugin_pref_set_bounds(pref: *mut PurplePluginPref,
                                         min: ::std::os::raw::c_int,
                                         max: ::std::os::raw::c_int);
    pub fn purple_plugin_pref_get_bounds(pref: *mut PurplePluginPref,
                                         min: *mut ::std::os::raw::c_int,
                                         max: *mut ::std::os::raw::c_int);
    pub fn purple_plugin_pref_set_type(pref: *mut PurplePluginPref,
                                       _type: PurplePluginPrefType);
    pub fn purple_plugin_pref_get_type(pref: *mut PurplePluginPref)
     -> PurplePluginPrefType;
    pub fn purple_plugin_pref_add_choice(pref: *mut PurplePluginPref,
                                         label: *const ::std::os::raw::c_char,
                                         choice: gpointer);
    pub fn purple_plugin_pref_get_choices(pref: *mut PurplePluginPref)
     -> *mut GList;
    pub fn purple_plugin_pref_set_max_length(pref: *mut PurplePluginPref,
                                             max_length:
                                                 ::std::os::raw::c_uint);
    pub fn purple_plugin_pref_get_max_length(pref: *mut PurplePluginPref)
     -> ::std::os::raw::c_uint;
    pub fn purple_plugin_pref_set_masked(pref: *mut PurplePluginPref,
                                         mask: gboolean);
    pub fn purple_plugin_pref_get_masked(pref: *mut PurplePluginPref)
     -> gboolean;
    pub fn purple_plugin_pref_set_format_type(pref: *mut PurplePluginPref,
                                              format: PurpleStringFormatType);
    pub fn purple_plugin_pref_get_format_type(pref: *mut PurplePluginPref)
     -> PurpleStringFormatType;
    pub fn purple_plugin_new(native: gboolean,
                             path: *const ::std::os::raw::c_char)
     -> *mut PurplePlugin;
    pub fn purple_plugin_probe(filename: *const ::std::os::raw::c_char)
     -> *mut PurplePlugin;
    pub fn purple_plugin_register(plugin: *mut PurplePlugin) -> gboolean;
    pub fn purple_plugin_load(plugin: *mut PurplePlugin) -> gboolean;
    pub fn purple_plugin_unload(plugin: *mut PurplePlugin) -> gboolean;
    pub fn purple_plugin_disable(plugin: *mut PurplePlugin);
    pub fn purple_plugin_reload(plugin: *mut PurplePlugin) -> gboolean;
    pub fn purple_plugin_destroy(plugin: *mut PurplePlugin);
    pub fn purple_plugin_is_loaded(plugin: *const PurplePlugin) -> gboolean;
    pub fn purple_plugin_is_unloadable(plugin: *const PurplePlugin)
     -> gboolean;
    pub fn purple_plugin_get_id(plugin: *const PurplePlugin) -> *const gchar;
    pub fn purple_plugin_get_name(plugin: *const PurplePlugin)
     -> *const gchar;
    pub fn purple_plugin_get_version(plugin: *const PurplePlugin)
     -> *const gchar;
    pub fn purple_plugin_get_summary(plugin: *const PurplePlugin)
     -> *const gchar;
    pub fn purple_plugin_get_description(plugin: *const PurplePlugin)
     -> *const gchar;
    pub fn purple_plugin_get_author(plugin: *const PurplePlugin)
     -> *const gchar;
    pub fn purple_plugin_get_homepage(plugin: *const PurplePlugin)
     -> *const gchar;
    pub fn purple_plugin_ipc_register(plugin: *mut PurplePlugin,
                                      command: *const ::std::os::raw::c_char,
                                      func: PurpleCallback,
                                      marshal: PurpleSignalMarshalFunc,
                                      ret_value: *mut PurpleValue,
                                      num_params: ::std::os::raw::c_int, ...)
     -> gboolean;
    pub fn purple_plugin_ipc_unregister(plugin: *mut PurplePlugin,
                                        command:
                                            *const ::std::os::raw::c_char);
    pub fn purple_plugin_ipc_unregister_all(plugin: *mut PurplePlugin);
    pub fn purple_plugin_ipc_get_params(plugin: *mut PurplePlugin,
                                        command:
                                            *const ::std::os::raw::c_char,
                                        ret_value: *mut *mut PurpleValue,
                                        num_params:
                                            *mut ::std::os::raw::c_int,
                                        params: *mut *mut *mut PurpleValue)
     -> gboolean;
    pub fn purple_plugin_ipc_call(plugin: *mut PurplePlugin,
                                  command: *const ::std::os::raw::c_char,
                                  ok: *mut gboolean, ...)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_plugins_add_search_path(path:
                                              *const ::std::os::raw::c_char);
    pub fn purple_plugins_get_search_paths() -> *mut GList;
    pub fn purple_plugins_unload_all();
    pub fn purple_plugins_unload(_type: PurplePluginType);
    pub fn purple_plugins_destroy_all();
    pub fn purple_plugins_save_loaded(key: *const ::std::os::raw::c_char);
    pub fn purple_plugins_load_saved(key: *const ::std::os::raw::c_char);
    pub fn purple_plugins_probe(ext: *const ::std::os::raw::c_char);
    pub fn purple_plugins_enabled() -> gboolean;
    pub fn purple_plugins_register_probe_notify_cb(func:
                                                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                      *mut ::std::os::raw::c_void)>,
                                                   data:
                                                       *mut ::std::os::raw::c_void);
    pub fn purple_plugins_unregister_probe_notify_cb(func:
                                                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                        *mut ::std::os::raw::c_void)>);
    pub fn purple_plugins_register_load_notify_cb(func:
                                                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                     *mut PurplePlugin,
                                                                                                 arg2:
                                                                                                     *mut ::std::os::raw::c_void)>,
                                                  data:
                                                      *mut ::std::os::raw::c_void);
    pub fn purple_plugins_unregister_load_notify_cb(func:
                                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                       *mut PurplePlugin,
                                                                                                   arg2:
                                                                                                       *mut ::std::os::raw::c_void)>);
    pub fn purple_plugins_register_unload_notify_cb(func:
                                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                       *mut PurplePlugin,
                                                                                                   arg2:
                                                                                                       *mut ::std::os::raw::c_void)>,
                                                    data:
                                                        *mut ::std::os::raw::c_void);
    pub fn purple_plugins_unregister_unload_notify_cb(func:
                                                          ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                         *mut PurplePlugin,
                                                                                                     arg2:
                                                                                                         *mut ::std::os::raw::c_void)>);
    pub fn purple_plugins_find_with_name(name: *const ::std::os::raw::c_char)
     -> *mut PurplePlugin;
    pub fn purple_plugins_find_with_filename(filename:
                                                 *const ::std::os::raw::c_char)
     -> *mut PurplePlugin;
    pub fn purple_plugins_find_with_basename(basename:
                                                 *const ::std::os::raw::c_char)
     -> *mut PurplePlugin;
    pub fn purple_plugins_find_with_id(id: *const ::std::os::raw::c_char)
     -> *mut PurplePlugin;
    pub fn purple_plugins_get_loaded() -> *mut GList;
    pub fn purple_plugins_get_protocols() -> *mut GList;
    pub fn purple_plugins_get_all() -> *mut GList;
    pub fn purple_plugins_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_plugins_init();
    pub fn purple_plugins_uninit();
    pub fn purple_plugin_action_new(label: *const ::std::os::raw::c_char,
                                    callback:
                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                       *mut PurplePluginAction)>)
     -> *mut PurplePluginAction;
    pub fn purple_plugin_action_free(action: *mut PurplePluginAction);
    pub fn purple_imgstore_add(data: gpointer, size: size_t,
                               filename: *const ::std::os::raw::c_char)
     -> *mut PurpleStoredImage;
    pub fn purple_imgstore_new_from_file(path: *const ::std::os::raw::c_char)
     -> *mut PurpleStoredImage;
    pub fn purple_imgstore_add_with_id(data: gpointer, size: size_t,
                                       filename:
                                           *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn purple_imgstore_find_by_id(id: ::std::os::raw::c_int)
     -> *mut PurpleStoredImage;
    pub fn purple_imgstore_get_data(img: *mut PurpleStoredImage)
     -> gconstpointer;
    pub fn purple_imgstore_get_size(img: *mut PurpleStoredImage) -> size_t;
    pub fn purple_imgstore_get_filename(img: *const PurpleStoredImage)
     -> *const ::std::os::raw::c_char;
    pub fn purple_imgstore_get_extension(img: *mut PurpleStoredImage)
     -> *const ::std::os::raw::c_char;
    pub fn purple_imgstore_ref(img: *mut PurpleStoredImage)
     -> *mut PurpleStoredImage;
    pub fn purple_imgstore_unref(img: *mut PurpleStoredImage)
     -> *mut PurpleStoredImage;
    pub fn purple_imgstore_ref_by_id(id: ::std::os::raw::c_int);
    pub fn purple_imgstore_unref_by_id(id: ::std::os::raw::c_int);
    pub fn purple_imgstore_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_imgstore_init();
    pub fn purple_imgstore_uninit();
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn purple_log_new(_type: PurpleLogType,
                          name: *const ::std::os::raw::c_char,
                          account: *mut PurpleAccount,
                          conv: *mut PurpleConversation, time: time_t,
                          tm: *const Struct_tm) -> *mut PurpleLog;
    pub fn purple_log_free(log: *mut PurpleLog);
    pub fn purple_log_write(log: *mut PurpleLog, _type: PurpleMessageFlags,
                            from: *const ::std::os::raw::c_char, time: time_t,
                            message: *const ::std::os::raw::c_char);
    pub fn purple_log_read(log: *mut PurpleLog,
                           flags: *mut PurpleLogReadFlags)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_log_get_logs(_type: PurpleLogType,
                               name: *const ::std::os::raw::c_char,
                               account: *mut PurpleAccount) -> *mut GList;
    pub fn purple_log_get_log_sets() -> *mut GHashTable;
    pub fn purple_log_get_system_logs(account: *mut PurpleAccount)
     -> *mut GList;
    pub fn purple_log_get_size(log: *mut PurpleLog) -> ::std::os::raw::c_int;
    pub fn purple_log_get_total_size(_type: PurpleLogType,
                                     name: *const ::std::os::raw::c_char,
                                     account: *mut PurpleAccount)
     -> ::std::os::raw::c_int;
    pub fn purple_log_get_activity_score(_type: PurpleLogType,
                                         name: *const ::std::os::raw::c_char,
                                         account: *mut PurpleAccount)
     -> ::std::os::raw::c_int;
    pub fn purple_log_is_deletable(log: *mut PurpleLog) -> gboolean;
    pub fn purple_log_delete(log: *mut PurpleLog) -> gboolean;
    pub fn purple_log_get_log_dir(_type: PurpleLogType,
                                  name: *const ::std::os::raw::c_char,
                                  account: *mut PurpleAccount)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_log_compare(y: gconstpointer, z: gconstpointer) -> gint;
    pub fn purple_log_set_compare(y: gconstpointer, z: gconstpointer) -> gint;
    pub fn purple_log_set_free(set: *mut PurpleLogSet);
    pub fn purple_log_common_writer(log: *mut PurpleLog,
                                    ext: *const ::std::os::raw::c_char);
    pub fn purple_log_common_lister(_type: PurpleLogType,
                                    name: *const ::std::os::raw::c_char,
                                    account: *mut PurpleAccount,
                                    ext: *const ::std::os::raw::c_char,
                                    logger: *mut PurpleLogLogger)
     -> *mut GList;
    pub fn purple_log_common_total_sizer(_type: PurpleLogType,
                                         name: *const ::std::os::raw::c_char,
                                         account: *mut PurpleAccount,
                                         ext: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn purple_log_common_sizer(log: *mut PurpleLog)
     -> ::std::os::raw::c_int;
    pub fn purple_log_common_deleter(log: *mut PurpleLog) -> gboolean;
    pub fn purple_log_common_is_deletable(log: *mut PurpleLog) -> gboolean;
    pub fn purple_log_logger_new(id: *const ::std::os::raw::c_char,
                                 name: *const ::std::os::raw::c_char,
                                 functions: ::std::os::raw::c_int, ...)
     -> *mut PurpleLogLogger;
    pub fn purple_log_logger_free(logger: *mut PurpleLogLogger);
    pub fn purple_log_logger_add(logger: *mut PurpleLogLogger);
    pub fn purple_log_logger_remove(logger: *mut PurpleLogLogger);
    pub fn purple_log_logger_set(logger: *mut PurpleLogLogger);
    pub fn purple_log_logger_get() -> *mut PurpleLogLogger;
    pub fn purple_log_logger_get_options() -> *mut GList;
    pub fn purple_log_init();
    pub fn purple_log_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_log_uninit();
    pub fn serv_send_typing(gc: *mut PurpleConnection,
                            name: *const ::std::os::raw::c_char,
                            state: PurpleTypingState)
     -> ::std::os::raw::c_uint;
    pub fn serv_move_buddy(arg1: *mut PurpleBuddy, arg2: *mut PurpleGroup,
                           arg3: *mut PurpleGroup);
    pub fn serv_send_im(arg1: *mut PurpleConnection,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: *const ::std::os::raw::c_char,
                        flags: PurpleMessageFlags) -> ::std::os::raw::c_int;
    pub fn purple_get_attention_type_from_code(account: *mut PurpleAccount,
                                               type_code: guint)
     -> *mut PurpleAttentionType;
    pub fn serv_send_attention(gc: *mut PurpleConnection,
                               who: *const ::std::os::raw::c_char,
                               type_code: guint);
    pub fn serv_got_attention(gc: *mut PurpleConnection,
                              who: *const ::std::os::raw::c_char,
                              type_code: guint);
    pub fn serv_get_info(arg1: *mut PurpleConnection,
                         arg2: *const ::std::os::raw::c_char);
    pub fn serv_set_info(arg1: *mut PurpleConnection,
                         arg2: *const ::std::os::raw::c_char);
    pub fn serv_add_permit(arg1: *mut PurpleConnection,
                           arg2: *const ::std::os::raw::c_char);
    pub fn serv_add_deny(arg1: *mut PurpleConnection,
                         arg2: *const ::std::os::raw::c_char);
    pub fn serv_rem_permit(arg1: *mut PurpleConnection,
                           arg2: *const ::std::os::raw::c_char);
    pub fn serv_rem_deny(arg1: *mut PurpleConnection,
                         arg2: *const ::std::os::raw::c_char);
    pub fn serv_set_permit_deny(arg1: *mut PurpleConnection);
    pub fn serv_chat_invite(arg1: *mut PurpleConnection,
                            arg2: ::std::os::raw::c_int,
                            arg3: *const ::std::os::raw::c_char,
                            arg4: *const ::std::os::raw::c_char);
    pub fn serv_chat_leave(arg1: *mut PurpleConnection,
                           arg2: ::std::os::raw::c_int);
    pub fn serv_chat_whisper(arg1: *mut PurpleConnection,
                             arg2: ::std::os::raw::c_int,
                             arg3: *const ::std::os::raw::c_char,
                             arg4: *const ::std::os::raw::c_char);
    pub fn serv_chat_send(arg1: *mut PurpleConnection,
                          arg2: ::std::os::raw::c_int,
                          arg3: *const ::std::os::raw::c_char,
                          flags: PurpleMessageFlags) -> ::std::os::raw::c_int;
    pub fn serv_alias_buddy(arg1: *mut PurpleBuddy);
    pub fn serv_got_alias(gc: *mut PurpleConnection,
                          who: *const ::std::os::raw::c_char,
                          alias: *const ::std::os::raw::c_char);
    pub fn purple_serv_got_private_alias(gc: *mut PurpleConnection,
                                         who: *const ::std::os::raw::c_char,
                                         alias:
                                             *const ::std::os::raw::c_char);
    pub fn serv_got_typing(gc: *mut PurpleConnection,
                           name: *const ::std::os::raw::c_char,
                           timeout: ::std::os::raw::c_int,
                           state: PurpleTypingState);
    pub fn serv_got_typing_stopped(gc: *mut PurpleConnection,
                                   name: *const ::std::os::raw::c_char);
    pub fn serv_got_im(gc: *mut PurpleConnection,
                       who: *const ::std::os::raw::c_char,
                       msg: *const ::std::os::raw::c_char,
                       flags: PurpleMessageFlags, mtime: time_t);
    pub fn serv_join_chat(arg1: *mut PurpleConnection, data: *mut GHashTable);
    pub fn serv_reject_chat(arg1: *mut PurpleConnection,
                            data: *mut GHashTable);
    pub fn serv_got_chat_invite(gc: *mut PurpleConnection,
                                name: *const ::std::os::raw::c_char,
                                who: *const ::std::os::raw::c_char,
                                message: *const ::std::os::raw::c_char,
                                data: *mut GHashTable);
    pub fn serv_got_joined_chat(gc: *mut PurpleConnection,
                                id: ::std::os::raw::c_int,
                                name: *const ::std::os::raw::c_char)
     -> *mut PurpleConversation;
    pub fn purple_serv_got_join_chat_failed(gc: *mut PurpleConnection,
                                            data: *mut GHashTable);
    pub fn serv_got_chat_left(g: *mut PurpleConnection,
                              id: ::std::os::raw::c_int);
    pub fn serv_got_chat_in(g: *mut PurpleConnection,
                            id: ::std::os::raw::c_int,
                            who: *const ::std::os::raw::c_char,
                            flags: PurpleMessageFlags,
                            message: *const ::std::os::raw::c_char,
                            mtime: time_t);
    pub fn serv_send_file(gc: *mut PurpleConnection,
                          who: *const ::std::os::raw::c_char,
                          file: *const ::std::os::raw::c_char);
    pub fn purple_conversation_new(_type: PurpleConversationType,
                                   account: *mut PurpleAccount,
                                   name: *const ::std::os::raw::c_char)
     -> *mut PurpleConversation;
    pub fn purple_conversation_destroy(conv: *mut PurpleConversation);
    pub fn purple_conversation_present(conv: *mut PurpleConversation);
    pub fn purple_conversation_get_type(conv: *const PurpleConversation)
     -> PurpleConversationType;
    pub fn purple_conversation_set_ui_ops(conv: *mut PurpleConversation,
                                          ops: *mut PurpleConversationUiOps);
    pub fn purple_conversations_set_ui_ops(ops: *mut PurpleConversationUiOps);
    pub fn purple_conversation_get_ui_ops(conv: *const PurpleConversation)
     -> *mut PurpleConversationUiOps;
    pub fn purple_conversation_set_account(conv: *mut PurpleConversation,
                                           account: *mut PurpleAccount);
    pub fn purple_conversation_get_account(conv: *const PurpleConversation)
     -> *mut PurpleAccount;
    pub fn purple_conversation_get_gc(conv: *const PurpleConversation)
     -> *mut PurpleConnection;
    pub fn purple_conversation_set_title(conv: *mut PurpleConversation,
                                         title:
                                             *const ::std::os::raw::c_char);
    pub fn purple_conversation_get_title(conv: *const PurpleConversation)
     -> *const ::std::os::raw::c_char;
    pub fn purple_conversation_autoset_title(conv: *mut PurpleConversation);
    pub fn purple_conversation_set_name(conv: *mut PurpleConversation,
                                        name: *const ::std::os::raw::c_char);
    pub fn purple_conversation_get_name(conv: *const PurpleConversation)
     -> *const ::std::os::raw::c_char;
    pub fn purple_conv_chat_cb_get_attribute(cb: *mut PurpleConvChatBuddy,
                                             key:
                                                 *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_conv_chat_cb_get_attribute_keys(cb:
                                                      *mut PurpleConvChatBuddy)
     -> *mut GList;
    pub fn purple_conv_chat_cb_set_attribute(chat: *mut PurpleConvChat,
                                             cb: *mut PurpleConvChatBuddy,
                                             key:
                                                 *const ::std::os::raw::c_char,
                                             value:
                                                 *const ::std::os::raw::c_char);
    pub fn purple_conv_chat_cb_set_attributes(chat: *mut PurpleConvChat,
                                              cb: *mut PurpleConvChatBuddy,
                                              keys: *mut GList,
                                              values: *mut GList);
    pub fn purple_conversation_set_logging(conv: *mut PurpleConversation,
                                           log: gboolean);
    pub fn purple_conversation_is_logging(conv: *const PurpleConversation)
     -> gboolean;
    pub fn purple_conversation_close_logs(conv: *mut PurpleConversation);
    pub fn purple_conversation_get_im_data(conv: *const PurpleConversation)
     -> *mut PurpleConvIm;
    pub fn purple_conversation_get_chat_data(conv: *const PurpleConversation)
     -> *mut PurpleConvChat;
    pub fn purple_conversation_set_data(conv: *mut PurpleConversation,
                                        key: *const ::std::os::raw::c_char,
                                        data: gpointer);
    pub fn purple_conversation_get_data(conv: *mut PurpleConversation,
                                        key: *const ::std::os::raw::c_char)
     -> gpointer;
    pub fn purple_get_conversations() -> *mut GList;
    pub fn purple_get_ims() -> *mut GList;
    pub fn purple_get_chats() -> *mut GList;
    pub fn purple_find_conversation_with_account(_type:
                                                     PurpleConversationType,
                                                 name:
                                                     *const ::std::os::raw::c_char,
                                                 account:
                                                     *const PurpleAccount)
     -> *mut PurpleConversation;
    pub fn purple_conversation_write(conv: *mut PurpleConversation,
                                     who: *const ::std::os::raw::c_char,
                                     message: *const ::std::os::raw::c_char,
                                     flags: PurpleMessageFlags,
                                     mtime: time_t);
    pub fn purple_conversation_set_features(conv: *mut PurpleConversation,
                                            features: PurpleConnectionFlags);
    pub fn purple_conversation_get_features(conv: *mut PurpleConversation)
     -> PurpleConnectionFlags;
    pub fn purple_conversation_has_focus(conv: *mut PurpleConversation)
     -> gboolean;
    pub fn purple_conversation_update(conv: *mut PurpleConversation,
                                      _type: PurpleConvUpdateType);
    pub fn purple_conversation_foreach(func:
                                           ::std::option::Option<unsafe extern "C" fn(conv:
                                                                                          *mut PurpleConversation)>);
    pub fn purple_conversation_get_message_history(conv:
                                                       *mut PurpleConversation)
     -> *mut GList;
    pub fn purple_conversation_clear_message_history(conv:
                                                         *mut PurpleConversation);
    pub fn purple_conversation_message_get_sender(msg: *mut PurpleConvMessage)
     -> *const ::std::os::raw::c_char;
    pub fn purple_conversation_message_get_message(msg:
                                                       *mut PurpleConvMessage)
     -> *const ::std::os::raw::c_char;
    pub fn purple_conversation_message_get_flags(msg: *mut PurpleConvMessage)
     -> PurpleMessageFlags;
    pub fn purple_conversation_message_get_timestamp(msg:
                                                         *mut PurpleConvMessage)
     -> time_t;
    pub fn purple_conv_im_get_conversation(im: *const PurpleConvIm)
     -> *mut PurpleConversation;
    pub fn purple_conv_im_set_icon(im: *mut PurpleConvIm,
                                   icon: *mut PurpleBuddyIcon);
    pub fn purple_conv_im_get_icon(im: *const PurpleConvIm)
     -> *mut PurpleBuddyIcon;
    pub fn purple_conv_im_set_typing_state(im: *mut PurpleConvIm,
                                           state: PurpleTypingState);
    pub fn purple_conv_im_get_typing_state(im: *const PurpleConvIm)
     -> PurpleTypingState;
    pub fn purple_conv_im_start_typing_timeout(im: *mut PurpleConvIm,
                                               timeout:
                                                   ::std::os::raw::c_int);
    pub fn purple_conv_im_stop_typing_timeout(im: *mut PurpleConvIm);
    pub fn purple_conv_im_get_typing_timeout(im: *const PurpleConvIm)
     -> guint;
    pub fn purple_conv_im_set_type_again(im: *mut PurpleConvIm,
                                         val: ::std::os::raw::c_uint);
    pub fn purple_conv_im_get_type_again(im: *const PurpleConvIm) -> time_t;
    pub fn purple_conv_im_start_send_typed_timeout(im: *mut PurpleConvIm);
    pub fn purple_conv_im_stop_send_typed_timeout(im: *mut PurpleConvIm);
    pub fn purple_conv_im_get_send_typed_timeout(im: *const PurpleConvIm)
     -> guint;
    pub fn purple_conv_im_update_typing(im: *mut PurpleConvIm);
    pub fn purple_conv_im_write(im: *mut PurpleConvIm,
                                who: *const ::std::os::raw::c_char,
                                message: *const ::std::os::raw::c_char,
                                flags: PurpleMessageFlags, mtime: time_t);
    pub fn purple_conv_present_error(who: *const ::std::os::raw::c_char,
                                     account: *mut PurpleAccount,
                                     what: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_conv_im_send(im: *mut PurpleConvIm,
                               message: *const ::std::os::raw::c_char);
    pub fn purple_conv_send_confirm(conv: *mut PurpleConversation,
                                    message: *const ::std::os::raw::c_char);
    pub fn purple_conv_im_send_with_flags(im: *mut PurpleConvIm,
                                          message:
                                              *const ::std::os::raw::c_char,
                                          flags: PurpleMessageFlags);
    pub fn purple_conv_custom_smiley_add(conv: *mut PurpleConversation,
                                         smile: *const ::std::os::raw::c_char,
                                         cksum_type:
                                             *const ::std::os::raw::c_char,
                                         chksum:
                                             *const ::std::os::raw::c_char,
                                         remote: gboolean) -> gboolean;
    pub fn purple_conv_custom_smiley_write(conv: *mut PurpleConversation,
                                           smile:
                                               *const ::std::os::raw::c_char,
                                           data: *const guchar, size: gsize);
    pub fn purple_conv_custom_smiley_close(conv: *mut PurpleConversation,
                                           smile:
                                               *const ::std::os::raw::c_char);
    pub fn purple_conv_chat_get_conversation(chat: *const PurpleConvChat)
     -> *mut PurpleConversation;
    pub fn purple_conv_chat_set_users(chat: *mut PurpleConvChat,
                                      users: *mut GList) -> *mut GList;
    pub fn purple_conv_chat_get_users(chat: *const PurpleConvChat)
     -> *mut GList;
    pub fn purple_conv_chat_ignore(chat: *mut PurpleConvChat,
                                   name: *const ::std::os::raw::c_char);
    pub fn purple_conv_chat_unignore(chat: *mut PurpleConvChat,
                                     name: *const ::std::os::raw::c_char);
    pub fn purple_conv_chat_set_ignored(chat: *mut PurpleConvChat,
                                        ignored: *mut GList) -> *mut GList;
    pub fn purple_conv_chat_get_ignored(chat: *const PurpleConvChat)
     -> *mut GList;
    pub fn purple_conv_chat_get_ignored_user(chat: *const PurpleConvChat,
                                             user:
                                                 *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_conv_chat_is_user_ignored(chat: *const PurpleConvChat,
                                            user:
                                                *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_conv_chat_set_topic(chat: *mut PurpleConvChat,
                                      who: *const ::std::os::raw::c_char,
                                      topic: *const ::std::os::raw::c_char);
    pub fn purple_conv_chat_get_topic(chat: *const PurpleConvChat)
     -> *const ::std::os::raw::c_char;
    pub fn purple_conv_chat_set_id(chat: *mut PurpleConvChat,
                                   id: ::std::os::raw::c_int);
    pub fn purple_conv_chat_get_id(chat: *const PurpleConvChat)
     -> ::std::os::raw::c_int;
    pub fn purple_conv_chat_write(chat: *mut PurpleConvChat,
                                  who: *const ::std::os::raw::c_char,
                                  message: *const ::std::os::raw::c_char,
                                  flags: PurpleMessageFlags, mtime: time_t);
    pub fn purple_conv_chat_send(chat: *mut PurpleConvChat,
                                 message: *const ::std::os::raw::c_char);
    pub fn purple_conv_chat_send_with_flags(chat: *mut PurpleConvChat,
                                            message:
                                                *const ::std::os::raw::c_char,
                                            flags: PurpleMessageFlags);
    pub fn purple_conv_chat_add_user(chat: *mut PurpleConvChat,
                                     user: *const ::std::os::raw::c_char,
                                     extra_msg: *const ::std::os::raw::c_char,
                                     flags: PurpleConvChatBuddyFlags,
                                     new_arrival: gboolean);
    pub fn purple_conv_chat_add_users(chat: *mut PurpleConvChat,
                                      users: *mut GList,
                                      extra_msgs: *mut GList,
                                      flags: *mut GList,
                                      new_arrivals: gboolean);
    pub fn purple_conv_chat_rename_user(chat: *mut PurpleConvChat,
                                        old_user:
                                            *const ::std::os::raw::c_char,
                                        new_user:
                                            *const ::std::os::raw::c_char);
    pub fn purple_conv_chat_remove_user(chat: *mut PurpleConvChat,
                                        user: *const ::std::os::raw::c_char,
                                        reason:
                                            *const ::std::os::raw::c_char);
    pub fn purple_conv_chat_remove_users(chat: *mut PurpleConvChat,
                                         users: *mut GList,
                                         reason:
                                             *const ::std::os::raw::c_char);
    pub fn purple_conv_chat_find_user(chat: *mut PurpleConvChat,
                                      user: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_conv_chat_user_set_flags(chat: *mut PurpleConvChat,
                                           user:
                                               *const ::std::os::raw::c_char,
                                           flags: PurpleConvChatBuddyFlags);
    pub fn purple_conv_chat_user_get_flags(chat: *mut PurpleConvChat,
                                           user:
                                               *const ::std::os::raw::c_char)
     -> PurpleConvChatBuddyFlags;
    pub fn purple_conv_chat_clear_users(chat: *mut PurpleConvChat);
    pub fn purple_conv_chat_set_nick(chat: *mut PurpleConvChat,
                                     nick: *const ::std::os::raw::c_char);
    pub fn purple_conv_chat_get_nick(chat: *mut PurpleConvChat)
     -> *const ::std::os::raw::c_char;
    pub fn purple_find_chat(gc: *const PurpleConnection,
                            id: ::std::os::raw::c_int)
     -> *mut PurpleConversation;
    pub fn purple_conv_chat_left(chat: *mut PurpleConvChat);
    pub fn purple_conv_chat_invite_user(chat: *mut PurpleConvChat,
                                        user: *const ::std::os::raw::c_char,
                                        message:
                                            *const ::std::os::raw::c_char,
                                        confirm: gboolean);
    pub fn purple_conv_chat_has_left(chat: *mut PurpleConvChat) -> gboolean;
    pub fn purple_conv_chat_cb_new(name: *const ::std::os::raw::c_char,
                                   alias: *const ::std::os::raw::c_char,
                                   flags: PurpleConvChatBuddyFlags)
     -> *mut PurpleConvChatBuddy;
    pub fn purple_conv_chat_cb_find(chat: *mut PurpleConvChat,
                                    name: *const ::std::os::raw::c_char)
     -> *mut PurpleConvChatBuddy;
    pub fn purple_conv_chat_cb_get_name(cb: *mut PurpleConvChatBuddy)
     -> *const ::std::os::raw::c_char;
    pub fn purple_conv_chat_cb_destroy(cb: *mut PurpleConvChatBuddy);
    pub fn purple_conversation_get_extended_menu(conv:
                                                     *mut PurpleConversation)
     -> *mut GList;
    pub fn purple_conversation_do_command(conv: *mut PurpleConversation,
                                          cmdline: *const gchar,
                                          markup: *const gchar,
                                          error: *mut *mut gchar) -> gboolean;
    pub fn purple_conversations_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_conversations_init();
    pub fn purple_conversations_uninit();
    pub fn purple_xfer_new(account: *mut PurpleAccount, _type: PurpleXferType,
                           who: *const ::std::os::raw::c_char)
     -> *mut PurpleXfer;
    pub fn purple_xfers_get_all() -> *mut GList;
    pub fn purple_xfer_ref(xfer: *mut PurpleXfer);
    pub fn purple_xfer_unref(xfer: *mut PurpleXfer);
    pub fn purple_xfer_request(xfer: *mut PurpleXfer);
    pub fn purple_xfer_request_accepted(xfer: *mut PurpleXfer,
                                        filename:
                                            *const ::std::os::raw::c_char);
    pub fn purple_xfer_request_denied(xfer: *mut PurpleXfer);
    pub fn purple_xfer_get_type(xfer: *const PurpleXfer) -> PurpleXferType;
    pub fn purple_xfer_get_account(xfer: *const PurpleXfer)
     -> *mut PurpleAccount;
    pub fn purple_xfer_get_remote_user(xfer: *const PurpleXfer)
     -> *const ::std::os::raw::c_char;
    pub fn purple_xfer_get_status(xfer: *const PurpleXfer)
     -> PurpleXferStatusType;
    pub fn purple_xfer_is_canceled(xfer: *const PurpleXfer) -> gboolean;
    pub fn purple_xfer_is_completed(xfer: *const PurpleXfer) -> gboolean;
    pub fn purple_xfer_get_filename(xfer: *const PurpleXfer)
     -> *const ::std::os::raw::c_char;
    pub fn purple_xfer_get_local_filename(xfer: *const PurpleXfer)
     -> *const ::std::os::raw::c_char;
    pub fn purple_xfer_get_bytes_sent(xfer: *const PurpleXfer) -> size_t;
    pub fn purple_xfer_get_bytes_remaining(xfer: *const PurpleXfer) -> size_t;
    pub fn purple_xfer_get_size(xfer: *const PurpleXfer) -> size_t;
    pub fn purple_xfer_get_progress(xfer: *const PurpleXfer)
     -> ::std::os::raw::c_double;
    pub fn purple_xfer_get_local_port(xfer: *const PurpleXfer)
     -> ::std::os::raw::c_uint;
    pub fn purple_xfer_get_remote_ip(xfer: *const PurpleXfer)
     -> *const ::std::os::raw::c_char;
    pub fn purple_xfer_get_remote_port(xfer: *const PurpleXfer)
     -> ::std::os::raw::c_uint;
    pub fn purple_xfer_get_start_time(xfer: *const PurpleXfer) -> time_t;
    pub fn purple_xfer_get_end_time(xfer: *const PurpleXfer) -> time_t;
    pub fn purple_xfer_set_completed(xfer: *mut PurpleXfer,
                                     completed: gboolean);
    pub fn purple_xfer_set_message(xfer: *mut PurpleXfer,
                                   message: *const ::std::os::raw::c_char);
    pub fn purple_xfer_set_filename(xfer: *mut PurpleXfer,
                                    filename: *const ::std::os::raw::c_char);
    pub fn purple_xfer_set_local_filename(xfer: *mut PurpleXfer,
                                          filename:
                                              *const ::std::os::raw::c_char);
    pub fn purple_xfer_set_size(xfer: *mut PurpleXfer, size: size_t);
    pub fn purple_xfer_set_bytes_sent(xfer: *mut PurpleXfer,
                                      bytes_sent: size_t);
    pub fn purple_xfer_get_ui_ops(xfer: *const PurpleXfer)
     -> *mut PurpleXferUiOps;
    pub fn purple_xfer_set_read_fnc(xfer: *mut PurpleXfer,
                                    fnc:
                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                       *mut *mut guchar,
                                                                                   arg2:
                                                                                       *mut PurpleXfer)
                                                                  -> gssize>);
    pub fn purple_xfer_set_write_fnc(xfer: *mut PurpleXfer,
                                     fnc:
                                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                        *const guchar,
                                                                                    arg2:
                                                                                        size_t,
                                                                                    arg3:
                                                                                        *mut PurpleXfer)
                                                                   ->
                                                                       gssize>);
    pub fn purple_xfer_set_ack_fnc(xfer: *mut PurpleXfer,
                                   fnc:
                                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *mut PurpleXfer,
                                                                                  arg2:
                                                                                      *const guchar,
                                                                                  arg3:
                                                                                      size_t)>);
    pub fn purple_xfer_set_request_denied_fnc(xfer: *mut PurpleXfer,
                                              fnc:
                                                  ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                 *mut PurpleXfer)>);
    pub fn purple_xfer_set_init_fnc(xfer: *mut PurpleXfer,
                                    fnc:
                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                       *mut PurpleXfer)>);
    pub fn purple_xfer_set_start_fnc(xfer: *mut PurpleXfer,
                                     fnc:
                                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                        *mut PurpleXfer)>);
    pub fn purple_xfer_set_end_fnc(xfer: *mut PurpleXfer,
                                   fnc:
                                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                      *mut PurpleXfer)>);
    pub fn purple_xfer_set_cancel_send_fnc(xfer: *mut PurpleXfer,
                                           fnc:
                                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                              *mut PurpleXfer)>);
    pub fn purple_xfer_set_cancel_recv_fnc(xfer: *mut PurpleXfer,
                                           fnc:
                                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                              *mut PurpleXfer)>);
    pub fn purple_xfer_read(xfer: *mut PurpleXfer, buffer: *mut *mut guchar)
     -> gssize;
    pub fn purple_xfer_write(xfer: *mut PurpleXfer, buffer: *const guchar,
                             size: gsize) -> gssize;
    pub fn purple_xfer_write_file(xfer: *mut PurpleXfer,
                                  buffer: *const guchar, size: gsize)
     -> gboolean;
    pub fn purple_xfer_read_file(xfer: *mut PurpleXfer, buffer: *mut guchar,
                                 size: gsize) -> gssize;
    pub fn purple_xfer_start(xfer: *mut PurpleXfer, fd: ::std::os::raw::c_int,
                             ip: *const ::std::os::raw::c_char,
                             port: ::std::os::raw::c_uint);
    pub fn purple_xfer_end(xfer: *mut PurpleXfer);
    pub fn purple_xfer_add(xfer: *mut PurpleXfer);
    pub fn purple_xfer_cancel_local(xfer: *mut PurpleXfer);
    pub fn purple_xfer_cancel_remote(xfer: *mut PurpleXfer);
    pub fn purple_xfer_error(_type: PurpleXferType,
                             account: *mut PurpleAccount,
                             who: *const ::std::os::raw::c_char,
                             msg: *const ::std::os::raw::c_char);
    pub fn purple_xfer_update_progress(xfer: *mut PurpleXfer);
    pub fn purple_xfer_conversation_write(xfer: *mut PurpleXfer,
                                          message:
                                              *mut ::std::os::raw::c_char,
                                          is_error: gboolean);
    pub fn purple_xfer_ui_ready(xfer: *mut PurpleXfer);
    pub fn purple_xfer_prpl_ready(xfer: *mut PurpleXfer);
    pub fn purple_xfer_get_thumbnail(xfer: *const PurpleXfer, len: *mut gsize)
     -> gconstpointer;
    pub fn purple_xfer_get_thumbnail_mimetype(xfer: *const PurpleXfer)
     -> *const gchar;
    pub fn purple_xfer_set_thumbnail(xfer: *mut PurpleXfer,
                                     thumbnail: gconstpointer, size: gsize,
                                     mimetype: *const gchar);
    pub fn purple_xfer_prepare_thumbnail(xfer: *mut PurpleXfer,
                                         formats: *const gchar);
    pub fn purple_xfers_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_xfers_init();
    pub fn purple_xfers_uninit();
    pub fn purple_xfers_set_ui_ops(ops: *mut PurpleXferUiOps);
    pub fn purple_xfers_get_ui_ops() -> *mut PurpleXferUiOps;
    pub fn purple_media_candidate_type_get_type() -> GType;
    pub fn purple_media_caps_get_type() -> GType;
    pub fn purple_media_info_type_get_type() -> GType;
    pub fn purple_media_network_protocol_get_type() -> GType;
    pub fn purple_media_session_type_get_type() -> GType;
    pub fn purple_media_state_changed_get_type() -> GType;
    pub fn purple_media_candidate_get_type() -> GType;
    pub fn purple_media_candidate_new(foundation: *const gchar,
                                      component_id: guint,
                                      _type: PurpleMediaCandidateType,
                                      proto: PurpleMediaNetworkProtocol,
                                      ip: *const gchar, port: guint)
     -> *mut PurpleMediaCandidate;
    pub fn purple_media_candidate_copy(candidate: *mut PurpleMediaCandidate)
     -> *mut PurpleMediaCandidate;
    pub fn purple_media_candidate_list_copy(candidates: *mut GList)
     -> *mut GList;
    pub fn purple_media_candidate_list_free(candidates: *mut GList);
    pub fn purple_media_candidate_get_foundation(candidate:
                                                     *mut PurpleMediaCandidate)
     -> *mut gchar;
    pub fn purple_media_candidate_get_component_id(candidate:
                                                       *mut PurpleMediaCandidate)
     -> guint;
    pub fn purple_media_candidate_get_ip(candidate: *mut PurpleMediaCandidate)
     -> *mut gchar;
    pub fn purple_media_candidate_get_port(candidate:
                                               *mut PurpleMediaCandidate)
     -> guint16;
    pub fn purple_media_candidate_get_base_ip(candidate:
                                                  *mut PurpleMediaCandidate)
     -> *mut gchar;
    pub fn purple_media_candidate_get_base_port(candidate:
                                                    *mut PurpleMediaCandidate)
     -> guint16;
    pub fn purple_media_candidate_get_protocol(candidate:
                                                   *mut PurpleMediaCandidate)
     -> PurpleMediaNetworkProtocol;
    pub fn purple_media_candidate_get_priority(candidate:
                                                   *mut PurpleMediaCandidate)
     -> guint32;
    pub fn purple_media_candidate_get_candidate_type(candidate:
                                                         *mut PurpleMediaCandidate)
     -> PurpleMediaCandidateType;
    pub fn purple_media_candidate_get_username(candidate:
                                                   *mut PurpleMediaCandidate)
     -> *mut gchar;
    pub fn purple_media_candidate_get_password(candidate:
                                                   *mut PurpleMediaCandidate)
     -> *mut gchar;
    pub fn purple_media_candidate_get_ttl(candidate:
                                              *mut PurpleMediaCandidate)
     -> guint;
    pub fn xmlnode_new(name: *const ::std::os::raw::c_char) -> *mut xmlnode;
    pub fn xmlnode_new_child(parent: *mut xmlnode,
                             name: *const ::std::os::raw::c_char)
     -> *mut xmlnode;
    pub fn xmlnode_insert_child(parent: *mut xmlnode, child: *mut xmlnode);
    pub fn xmlnode_get_child(parent: *const xmlnode,
                             name: *const ::std::os::raw::c_char)
     -> *mut xmlnode;
    pub fn xmlnode_get_child_with_namespace(parent: *const xmlnode,
                                            name:
                                                *const ::std::os::raw::c_char,
                                            xmlns:
                                                *const ::std::os::raw::c_char)
     -> *mut xmlnode;
    pub fn xmlnode_get_next_twin(node: *mut xmlnode) -> *mut xmlnode;
    pub fn xmlnode_insert_data(node: *mut xmlnode,
                               data: *const ::std::os::raw::c_char,
                               size: gssize);
    pub fn xmlnode_get_data(node: *const xmlnode)
     -> *mut ::std::os::raw::c_char;
    pub fn xmlnode_get_data_unescaped(node: *const xmlnode)
     -> *mut ::std::os::raw::c_char;
    pub fn xmlnode_set_attrib(node: *mut xmlnode,
                              attr: *const ::std::os::raw::c_char,
                              value: *const ::std::os::raw::c_char);
    pub fn xmlnode_set_attrib_with_prefix(node: *mut xmlnode,
                                          attr: *const ::std::os::raw::c_char,
                                          prefix:
                                              *const ::std::os::raw::c_char,
                                          value:
                                              *const ::std::os::raw::c_char);
    pub fn xmlnode_set_attrib_with_namespace(node: *mut xmlnode,
                                             attr:
                                                 *const ::std::os::raw::c_char,
                                             xmlns:
                                                 *const ::std::os::raw::c_char,
                                             value:
                                                 *const ::std::os::raw::c_char);
    pub fn xmlnode_set_attrib_full(node: *mut xmlnode,
                                   attr: *const ::std::os::raw::c_char,
                                   xmlns: *const ::std::os::raw::c_char,
                                   prefix: *const ::std::os::raw::c_char,
                                   value: *const ::std::os::raw::c_char);
    pub fn xmlnode_get_attrib(node: *const xmlnode,
                              attr: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn xmlnode_get_attrib_with_namespace(node: *const xmlnode,
                                             attr:
                                                 *const ::std::os::raw::c_char,
                                             xmlns:
                                                 *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn xmlnode_remove_attrib(node: *mut xmlnode,
                                 attr: *const ::std::os::raw::c_char);
    pub fn xmlnode_remove_attrib_with_namespace(node: *mut xmlnode,
                                                attr:
                                                    *const ::std::os::raw::c_char,
                                                xmlns:
                                                    *const ::std::os::raw::c_char);
    pub fn xmlnode_set_namespace(node: *mut xmlnode,
                                 xmlns: *const ::std::os::raw::c_char);
    pub fn xmlnode_get_namespace(node: *mut xmlnode)
     -> *const ::std::os::raw::c_char;
    pub fn xmlnode_set_prefix(node: *mut xmlnode,
                              prefix: *const ::std::os::raw::c_char);
    pub fn xmlnode_get_prefix(node: *const xmlnode)
     -> *const ::std::os::raw::c_char;
    pub fn xmlnode_get_parent(child: *const xmlnode) -> *mut xmlnode;
    pub fn xmlnode_to_str(node: *const xmlnode,
                          len: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn xmlnode_to_formatted_str(node: *const xmlnode,
                                    len: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn xmlnode_from_str(str: *const ::std::os::raw::c_char, size: gssize)
     -> *mut xmlnode;
    pub fn xmlnode_copy(src: *const xmlnode) -> *mut xmlnode;
    pub fn xmlnode_free(node: *mut xmlnode);
    pub fn xmlnode_from_file(dir: *const ::std::os::raw::c_char,
                             filename: *const ::std::os::raw::c_char,
                             description: *const ::std::os::raw::c_char,
                             process: *const ::std::os::raw::c_char)
     -> *mut xmlnode;
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn srandom(__seed: ::std::os::raw::c_uint);
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: size_t) -> *mut ::std::os::raw::c_char;
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn random_r(__buf: *mut Struct_random_data, __result: *mut int32_t)
     -> ::std::os::raw::c_int;
    pub fn srandom_r(__seed: ::std::os::raw::c_uint,
                     __buf: *mut Struct_random_data) -> ::std::os::raw::c_int;
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: size_t, __buf: *mut Struct_random_data)
     -> ::std::os::raw::c_int;
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut Struct_random_data)
     -> ::std::os::raw::c_int;
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn srand(__seed: ::std::os::raw::c_uint);
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn drand48() -> ::std::os::raw::c_double;
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_double;
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn srand48(__seedval: ::std::os::raw::c_long);
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_double)
     -> ::std::os::raw::c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut Struct_drand48_data)
     -> ::std::os::raw::c_int;
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut Struct_drand48_data)
     -> ::std::os::raw::c_int;
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut Struct_drand48_data)
     -> ::std::os::raw::c_int;
    pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
    pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::std::os::raw::c_int;
    pub fn aligned_alloc(__alignment: size_t, __size: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn abort();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn at_quick_exit(__func: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn exit(__status: ::std::os::raw::c_int);
    pub fn quick_exit(__status: ::std::os::raw::c_int);
    pub fn _Exit(__status: ::std::os::raw::c_int);
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn clearenv() -> ::std::os::raw::c_int;
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: size_t,
                 __size: size_t, __compar: __compar_fn_t);
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn ecvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn fcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn gcvt(__value: ::std::os::raw::c_double,
                __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn qecvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qfcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn qgcvt(__value: ::std::os::raw::c_double,
                 __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ecvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn fcvt_r(__value: ::std::os::raw::c_double,
                  __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qecvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn qfcvt_r(__value: ::std::os::raw::c_double,
                   __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: size_t)
     -> ::std::os::raw::c_int;
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: size_t) -> ::std::os::raw::c_int;
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *mut ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn getloadavg(__loadavg: *mut ::std::os::raw::c_double,
                      __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn purple_notify_searchresults(gc: *mut PurpleConnection,
                                       title: *const ::std::os::raw::c_char,
                                       primary: *const ::std::os::raw::c_char,
                                       secondary:
                                           *const ::std::os::raw::c_char,
                                       results:
                                           *mut PurpleNotifySearchResults,
                                       cb: PurpleNotifyCloseCallback,
                                       user_data: gpointer)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_notify_searchresults_free(results:
                                                *mut PurpleNotifySearchResults);
    pub fn purple_notify_searchresults_new_rows(gc: *mut PurpleConnection,
                                                results:
                                                    *mut PurpleNotifySearchResults,
                                                data:
                                                    *mut ::std::os::raw::c_void);
    pub fn purple_notify_searchresults_button_add(results:
                                                      *mut PurpleNotifySearchResults,
                                                  _type:
                                                      PurpleNotifySearchButtonType,
                                                  cb:
                                                      PurpleNotifySearchResultsCallback);
    pub fn purple_notify_searchresults_button_add_labeled(results:
                                                              *mut PurpleNotifySearchResults,
                                                          label:
                                                              *const ::std::os::raw::c_char,
                                                          cb:
                                                              PurpleNotifySearchResultsCallback);
    pub fn purple_notify_searchresults_new()
     -> *mut PurpleNotifySearchResults;
    pub fn purple_notify_searchresults_column_new(title:
                                                      *const ::std::os::raw::c_char)
     -> *mut PurpleNotifySearchColumn;
    pub fn purple_notify_searchresults_column_add(results:
                                                      *mut PurpleNotifySearchResults,
                                                  column:
                                                      *mut PurpleNotifySearchColumn);
    pub fn purple_notify_searchresults_row_add(results:
                                                   *mut PurpleNotifySearchResults,
                                               row: *mut GList);
    pub fn purple_notify_searchresults_get_rows_count(results:
                                                          *mut PurpleNotifySearchResults)
     -> guint;
    pub fn purple_notify_searchresults_get_columns_count(results:
                                                             *mut PurpleNotifySearchResults)
     -> guint;
    pub fn purple_notify_searchresults_row_get(results:
                                                   *mut PurpleNotifySearchResults,
                                               row_id: ::std::os::raw::c_uint)
     -> *mut GList;
    pub fn purple_notify_searchresults_column_get_title(results:
                                                            *mut PurpleNotifySearchResults,
                                                        column_id:
                                                            ::std::os::raw::c_uint)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_notify_message(handle: *mut ::std::os::raw::c_void,
                                 _type: PurpleNotifyMsgType,
                                 title: *const ::std::os::raw::c_char,
                                 primary: *const ::std::os::raw::c_char,
                                 secondary: *const ::std::os::raw::c_char,
                                 cb: PurpleNotifyCloseCallback,
                                 user_data: gpointer)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_notify_email(handle: *mut ::std::os::raw::c_void,
                               subject: *const ::std::os::raw::c_char,
                               from: *const ::std::os::raw::c_char,
                               to: *const ::std::os::raw::c_char,
                               url: *const ::std::os::raw::c_char,
                               cb: PurpleNotifyCloseCallback,
                               user_data: gpointer)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_notify_emails(handle: *mut ::std::os::raw::c_void,
                                count: size_t, detailed: gboolean,
                                subjects: *mut *const ::std::os::raw::c_char,
                                froms: *mut *const ::std::os::raw::c_char,
                                tos: *mut *const ::std::os::raw::c_char,
                                urls: *mut *const ::std::os::raw::c_char,
                                cb: PurpleNotifyCloseCallback,
                                user_data: gpointer)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_notify_formatted(handle: *mut ::std::os::raw::c_void,
                                   title: *const ::std::os::raw::c_char,
                                   primary: *const ::std::os::raw::c_char,
                                   secondary: *const ::std::os::raw::c_char,
                                   text: *const ::std::os::raw::c_char,
                                   cb: PurpleNotifyCloseCallback,
                                   user_data: gpointer)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_notify_userinfo(gc: *mut PurpleConnection,
                                  who: *const ::std::os::raw::c_char,
                                  user_info: *mut PurpleNotifyUserInfo,
                                  cb: PurpleNotifyCloseCallback,
                                  user_data: gpointer)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_notify_user_info_new() -> *mut PurpleNotifyUserInfo;
    pub fn purple_notify_user_info_destroy(user_info:
                                               *mut PurpleNotifyUserInfo);
    pub fn purple_notify_user_info_get_entries(user_info:
                                                   *mut PurpleNotifyUserInfo)
     -> *mut GList;
    pub fn purple_notify_user_info_get_text_with_newline(user_info:
                                                             *mut PurpleNotifyUserInfo,
                                                         newline:
                                                             *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_notify_user_info_add_pair(user_info:
                                                *mut PurpleNotifyUserInfo,
                                            label:
                                                *const ::std::os::raw::c_char,
                                            value:
                                                *const ::std::os::raw::c_char);
    pub fn purple_notify_user_info_add_pair_plaintext(user_info:
                                                          *mut PurpleNotifyUserInfo,
                                                      label:
                                                          *const ::std::os::raw::c_char,
                                                      value:
                                                          *const ::std::os::raw::c_char);
    pub fn purple_notify_user_info_prepend_pair(user_info:
                                                    *mut PurpleNotifyUserInfo,
                                                label:
                                                    *const ::std::os::raw::c_char,
                                                value:
                                                    *const ::std::os::raw::c_char);
    pub fn purple_notify_user_info_remove_entry(user_info:
                                                    *mut PurpleNotifyUserInfo,
                                                user_info_entry:
                                                    *mut PurpleNotifyUserInfoEntry);
    pub fn purple_notify_user_info_entry_new(label:
                                                 *const ::std::os::raw::c_char,
                                             value:
                                                 *const ::std::os::raw::c_char)
     -> *mut PurpleNotifyUserInfoEntry;
    pub fn purple_notify_user_info_add_section_break(user_info:
                                                         *mut PurpleNotifyUserInfo);
    pub fn purple_notify_user_info_prepend_section_break(user_info:
                                                             *mut PurpleNotifyUserInfo);
    pub fn purple_notify_user_info_add_section_header(user_info:
                                                          *mut PurpleNotifyUserInfo,
                                                      label:
                                                          *const ::std::os::raw::c_char);
    pub fn purple_notify_user_info_prepend_section_header(user_info:
                                                              *mut PurpleNotifyUserInfo,
                                                          label:
                                                              *const ::std::os::raw::c_char);
    pub fn purple_notify_user_info_remove_last_item(user_info:
                                                        *mut PurpleNotifyUserInfo);
    pub fn purple_notify_user_info_entry_get_label(user_info_entry:
                                                       *mut PurpleNotifyUserInfoEntry)
     -> *const gchar;
    pub fn purple_notify_user_info_entry_set_label(user_info_entry:
                                                       *mut PurpleNotifyUserInfoEntry,
                                                   label:
                                                       *const ::std::os::raw::c_char);
    pub fn purple_notify_user_info_entry_get_value(user_info_entry:
                                                       *mut PurpleNotifyUserInfoEntry)
     -> *const gchar;
    pub fn purple_notify_user_info_entry_set_value(user_info_entry:
                                                       *mut PurpleNotifyUserInfoEntry,
                                                   value:
                                                       *const ::std::os::raw::c_char);
    pub fn purple_notify_user_info_entry_get_type(user_info_entry:
                                                      *mut PurpleNotifyUserInfoEntry)
     -> PurpleNotifyUserInfoEntryType;
    pub fn purple_notify_user_info_entry_set_type(user_info_entry:
                                                      *mut PurpleNotifyUserInfoEntry,
                                                  _type:
                                                      PurpleNotifyUserInfoEntryType);
    pub fn purple_notify_uri(handle: *mut ::std::os::raw::c_void,
                             uri: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_notify_close(_type: PurpleNotifyType,
                               ui_handle: *mut ::std::os::raw::c_void);
    pub fn purple_notify_close_with_handle(handle:
                                               *mut ::std::os::raw::c_void);
    pub fn purple_notify_set_ui_ops(ops: *mut PurpleNotifyUiOps);
    pub fn purple_notify_get_ui_ops() -> *mut PurpleNotifyUiOps;
    pub fn purple_notify_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_notify_init();
    pub fn purple_notify_uninit();
    pub fn purple_menu_action_new(label: *const ::std::os::raw::c_char,
                                  callback: PurpleCallback, data: gpointer,
                                  children: *mut GList)
     -> *mut PurpleMenuAction;
    pub fn purple_menu_action_free(act: *mut PurpleMenuAction);
    pub fn purple_util_set_current_song(title: *const ::std::os::raw::c_char,
                                        artist: *const ::std::os::raw::c_char,
                                        album: *const ::std::os::raw::c_char);
    pub fn purple_util_format_song_info(title: *const ::std::os::raw::c_char,
                                        artist: *const ::std::os::raw::c_char,
                                        album: *const ::std::os::raw::c_char,
                                        unused: gpointer)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_util_init();
    pub fn purple_util_uninit();
    pub fn purple_base16_encode(data: *const guchar, len: gsize)
     -> *mut gchar;
    pub fn purple_base16_decode(str: *const ::std::os::raw::c_char,
                                ret_len: *mut gsize) -> *mut guchar;
    pub fn purple_base16_encode_chunked(data: *const guchar, len: gsize)
     -> *mut gchar;
    pub fn purple_base64_encode(data: *const guchar, len: gsize)
     -> *mut gchar;
    pub fn purple_base64_decode(str: *const ::std::os::raw::c_char,
                                ret_len: *mut gsize) -> *mut guchar;
    pub fn purple_quotedp_decode(str: *const ::std::os::raw::c_char,
                                 ret_len: *mut gsize) -> *mut guchar;
    pub fn purple_mime_decode_field(str: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_utf8_strftime(format: *const ::std::os::raw::c_char,
                                tm: *const Struct_tm)
     -> *const ::std::os::raw::c_char;
    pub fn purple_get_tzoff_str(tm: *const Struct_tm, iso: gboolean)
     -> *const ::std::os::raw::c_char;
    pub fn purple_date_format_short(tm: *const Struct_tm)
     -> *const ::std::os::raw::c_char;
    pub fn purple_date_format_long(tm: *const Struct_tm)
     -> *const ::std::os::raw::c_char;
    pub fn purple_date_format_full(tm: *const Struct_tm)
     -> *const ::std::os::raw::c_char;
    pub fn purple_time_format(tm: *const Struct_tm)
     -> *const ::std::os::raw::c_char;
    pub fn purple_time_build(year: ::std::os::raw::c_int,
                             month: ::std::os::raw::c_int,
                             day: ::std::os::raw::c_int,
                             hour: ::std::os::raw::c_int,
                             min: ::std::os::raw::c_int,
                             sec: ::std::os::raw::c_int) -> time_t;
    pub fn purple_str_to_time(timestamp: *const ::std::os::raw::c_char,
                              utc: gboolean, tm: *mut Struct_tm,
                              tz_off: *mut ::std::os::raw::c_long,
                              rest: *mut *const ::std::os::raw::c_char)
     -> time_t;
    pub fn purple_markup_escape_text(text: *const gchar, length: gssize)
     -> *mut gchar;
    pub fn purple_markup_find_tag(needle: *const ::std::os::raw::c_char,
                                  haystack: *const ::std::os::raw::c_char,
                                  start: *mut *const ::std::os::raw::c_char,
                                  end: *mut *const ::std::os::raw::c_char,
                                  attributes: *mut *mut GData) -> gboolean;
    pub fn purple_markup_extract_info_field(str:
                                                *const ::std::os::raw::c_char,
                                            len: ::std::os::raw::c_int,
                                            user_info:
                                                *mut PurpleNotifyUserInfo,
                                            start_token:
                                                *const ::std::os::raw::c_char,
                                            skip: ::std::os::raw::c_int,
                                            end_token:
                                                *const ::std::os::raw::c_char,
                                            check_value:
                                                ::std::os::raw::c_char,
                                            no_value_token:
                                                *const ::std::os::raw::c_char,
                                            display_name:
                                                *const ::std::os::raw::c_char,
                                            is_link: gboolean,
                                            link_prefix:
                                                *const ::std::os::raw::c_char,
                                            format_cb:
                                                PurpleInfoFieldFormatCallback)
     -> gboolean;
    pub fn purple_markup_html_to_xhtml(html: *const ::std::os::raw::c_char,
                                       dest_xhtml:
                                           *mut *mut ::std::os::raw::c_char,
                                       dest_plain:
                                           *mut *mut ::std::os::raw::c_char);
    pub fn purple_markup_strip_html(str: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_markup_linkify(str: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_unescape_text(text: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_unescape_html(html: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_markup_slice(str: *const ::std::os::raw::c_char, x: guint,
                               y: guint) -> *mut ::std::os::raw::c_char;
    pub fn purple_markup_get_tag_name(tag: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_markup_unescape_entity(text: *const ::std::os::raw::c_char,
                                         length: *mut ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn purple_markup_get_css_property(style: *const gchar,
                                          opt: *const gchar)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_markup_is_rtl(html: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_home_dir() -> *const gchar;
    pub fn purple_user_dir() -> *const ::std::os::raw::c_char;
    pub fn purple_util_set_user_dir(dir: *const ::std::os::raw::c_char);
    pub fn purple_build_dir(path: *const ::std::os::raw::c_char,
                            mode: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn purple_util_write_data_to_file(filename:
                                              *const ::std::os::raw::c_char,
                                          data: *const ::std::os::raw::c_char,
                                          size: gssize) -> gboolean;
    pub fn purple_util_write_data_to_file_absolute(filename_full:
                                                       *const ::std::os::raw::c_char,
                                                   data:
                                                       *const ::std::os::raw::c_char,
                                                   size: gssize) -> gboolean;
    pub fn purple_util_read_xml_from_file(filename:
                                              *const ::std::os::raw::c_char,
                                          description:
                                              *const ::std::os::raw::c_char)
     -> *mut xmlnode;
    pub fn purple_mkstemp(path: *mut *mut ::std::os::raw::c_char,
                          binary: gboolean) -> *mut FILE;
    pub fn purple_util_get_image_extension(data: gconstpointer, len: size_t)
     -> *const ::std::os::raw::c_char;
    pub fn purple_util_get_image_checksum(image_data: gconstpointer,
                                          image_len: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_util_get_image_filename(image_data: gconstpointer,
                                          image_len: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_program_is_valid(program: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_running_gnome() -> gboolean;
    pub fn purple_running_kde() -> gboolean;
    pub fn purple_running_osx() -> gboolean;
    pub fn purple_fd_get_ip(fd: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_socket_get_family(fd: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn purple_socket_speaks_ipv4(fd: ::std::os::raw::c_int) -> gboolean;
    pub fn purple_strequal(left: *const gchar, right: *const gchar)
     -> gboolean;
    pub fn purple_normalize(account: *const PurpleAccount,
                            str: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_normalize_nocase(account: *const PurpleAccount,
                                   str: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_str_has_prefix(s: *const ::std::os::raw::c_char,
                                 p: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_str_has_suffix(s: *const ::std::os::raw::c_char,
                                 x: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_strdup_withhtml(src: *const gchar) -> *mut gchar;
    pub fn purple_str_add_cr(str: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_str_strip_char(str: *mut ::std::os::raw::c_char,
                                 thechar: ::std::os::raw::c_char);
    pub fn purple_util_chrreplace(string: *mut ::std::os::raw::c_char,
                                  delimiter: ::std::os::raw::c_char,
                                  replacement: ::std::os::raw::c_char);
    pub fn purple_strreplace(string: *const ::std::os::raw::c_char,
                             delimiter: *const ::std::os::raw::c_char,
                             replacement: *const ::std::os::raw::c_char)
     -> *mut gchar;
    pub fn purple_utf8_ncr_encode(_in: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_utf8_ncr_decode(_in: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_strcasereplace(string: *const ::std::os::raw::c_char,
                                 delimiter: *const ::std::os::raw::c_char,
                                 replacement: *const ::std::os::raw::c_char)
     -> *mut gchar;
    pub fn purple_strcasestr(haystack: *const ::std::os::raw::c_char,
                             needle: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_str_size_to_units(size: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_str_seconds_to_string(sec: guint)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_str_binary_to_ascii(binary: *const ::std::os::raw::c_uchar,
                                      len: guint)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_got_protocol_handler_uri(uri:
                                               *const ::std::os::raw::c_char);
    pub fn purple_url_parse(url: *const ::std::os::raw::c_char,
                            ret_host: *mut *mut ::std::os::raw::c_char,
                            ret_port: *mut ::std::os::raw::c_int,
                            ret_path: *mut *mut ::std::os::raw::c_char,
                            ret_user: *mut *mut ::std::os::raw::c_char,
                            ret_passwd: *mut *mut ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_util_fetch_url_request(url: *const gchar, full: gboolean,
                                         user_agent: *const gchar,
                                         http11: gboolean,
                                         request: *const gchar,
                                         include_headers: gboolean,
                                         callback: PurpleUtilFetchUrlCallback,
                                         data: gpointer)
     -> *mut PurpleUtilFetchUrlData;
    pub fn purple_util_fetch_url_request_len(url: *const gchar,
                                             full: gboolean,
                                             user_agent: *const gchar,
                                             http11: gboolean,
                                             request: *const gchar,
                                             include_headers: gboolean,
                                             max_len: gssize,
                                             callback:
                                                 PurpleUtilFetchUrlCallback,
                                             data: gpointer)
     -> *mut PurpleUtilFetchUrlData;
    pub fn purple_util_fetch_url_request_len_with_account(account:
                                                              *mut PurpleAccount,
                                                          url: *const gchar,
                                                          full: gboolean,
                                                          user_agent:
                                                              *const gchar,
                                                          http11: gboolean,
                                                          request:
                                                              *const gchar,
                                                          include_headers:
                                                              gboolean,
                                                          max_len: gssize,
                                                          callback:
                                                              PurpleUtilFetchUrlCallback,
                                                          data: gpointer)
     -> *mut PurpleUtilFetchUrlData;
    pub fn purple_util_fetch_url_cancel(url_data:
                                            *mut PurpleUtilFetchUrlData);
    pub fn purple_url_decode(str: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_url_encode(str: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_email_is_valid(address: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_ip_address_is_valid(ip: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_ipv4_address_is_valid(ip: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_ipv6_address_is_valid(ip: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_uri_list_extract_uris(uri_list: *const gchar) -> *mut GList;
    pub fn purple_uri_list_extract_filenames(uri_list: *const gchar)
     -> *mut GList;
    pub fn purple_utf8_try_convert(str: *const ::std::os::raw::c_char)
     -> *mut gchar;
    pub fn purple_utf8_salvage(str: *const ::std::os::raw::c_char)
     -> *mut gchar;
    pub fn purple_utf8_strip_unprintables(str: *const gchar) -> *mut gchar;
    pub fn purple_gai_strerror(errnum: gint) -> *const gchar;
    pub fn purple_utf8_strcasecmp(a: *const ::std::os::raw::c_char,
                                  b: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn purple_utf8_has_word(haystack: *const ::std::os::raw::c_char,
                                needle: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_print_utf8_to_console(filestream: *mut FILE,
                                        message: *mut ::std::os::raw::c_char);
    pub fn purple_message_meify(message: *mut ::std::os::raw::c_char,
                                len: gssize) -> gboolean;
    pub fn purple_text_strip_mnemonic(_in: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_unescape_filename(str: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_escape_filename(str: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn _purple_oscar_convert(act: *const ::std::os::raw::c_char,
                                 protocol: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_restore_default_signal_handlers();
    pub fn purple_get_host_name() -> *const gchar;
    pub fn purple_uuid_random() -> *mut gchar;
    pub fn purple_media_codec_get_type() -> GType;
    pub fn purple_media_codec_new(id: ::std::os::raw::c_int,
                                  encoding_name:
                                      *const ::std::os::raw::c_char,
                                  media_type: PurpleMediaSessionType,
                                  clock_rate: guint) -> *mut PurpleMediaCodec;
    pub fn purple_media_codec_get_id(codec: *mut PurpleMediaCodec) -> guint;
    pub fn purple_media_codec_get_encoding_name(codec: *mut PurpleMediaCodec)
     -> *mut gchar;
    pub fn purple_media_codec_get_clock_rate(codec: *mut PurpleMediaCodec)
     -> guint;
    pub fn purple_media_codec_get_channels(codec: *mut PurpleMediaCodec)
     -> guint;
    pub fn purple_media_codec_get_optional_parameters(codec:
                                                          *mut PurpleMediaCodec)
     -> *mut GList;
    pub fn purple_media_codec_add_optional_parameter(codec:
                                                         *mut PurpleMediaCodec,
                                                     name: *const gchar,
                                                     value: *const gchar);
    pub fn purple_media_codec_remove_optional_parameter(codec:
                                                            *mut PurpleMediaCodec,
                                                        param:
                                                            *mut PurpleKeyValuePair);
    pub fn purple_media_codec_get_optional_parameter(codec:
                                                         *mut PurpleMediaCodec,
                                                     name: *const gchar,
                                                     value: *const gchar)
     -> *mut PurpleKeyValuePair;
    pub fn purple_media_codec_copy(codec: *mut PurpleMediaCodec)
     -> *mut PurpleMediaCodec;
    pub fn purple_media_codec_list_copy(codecs: *mut GList) -> *mut GList;
    pub fn purple_media_codec_list_free(codecs: *mut GList);
    pub fn purple_media_codec_to_string(codec: *const PurpleMediaCodec)
     -> *mut gchar;
    pub fn purple_media_get_type() -> GType;
    pub fn purple_media_get_session_ids(media: *mut PurpleMedia)
     -> *mut GList;
    pub fn purple_media_get_account(media: *mut PurpleMedia)
     -> *mut PurpleAccount;
    pub fn purple_media_get_prpl_data(media: *mut PurpleMedia) -> gpointer;
    pub fn purple_media_set_prpl_data(media: *mut PurpleMedia,
                                      prpl_data: gpointer);
    pub fn purple_media_error(media: *mut PurpleMedia,
                              error: *const gchar, ...);
    pub fn purple_media_end(media: *mut PurpleMedia, session_id: *const gchar,
                            participant: *const gchar);
    pub fn purple_media_stream_info(media: *mut PurpleMedia,
                                    _type: PurpleMediaInfoType,
                                    session_id: *const gchar,
                                    participant: *const gchar,
                                    local: gboolean);
    pub fn purple_media_set_params(media: *mut PurpleMedia, num_params: guint,
                                   params: *mut GParameter);
    pub fn purple_media_get_available_params(media: *mut PurpleMedia)
     -> *mut *const gchar;
    pub fn purple_media_param_is_supported(media: *mut PurpleMedia,
                                           param: *const gchar) -> gboolean;
    pub fn purple_media_add_stream(media: *mut PurpleMedia,
                                   sess_id: *const gchar, who: *const gchar,
                                   _type: PurpleMediaSessionType,
                                   initiator: gboolean,
                                   transmitter: *const gchar,
                                   num_params: guint, params: *mut GParameter)
     -> gboolean;
    pub fn purple_media_get_session_type(media: *mut PurpleMedia,
                                         sess_id: *const gchar)
     -> PurpleMediaSessionType;
    pub fn purple_media_get_manager(media: *mut PurpleMedia)
     -> *mut Struct__PurpleMediaManager;
    pub fn purple_media_get_codecs(media: *mut PurpleMedia,
                                   sess_id: *const gchar) -> *mut GList;
    pub fn purple_media_add_remote_candidates(media: *mut PurpleMedia,
                                              sess_id: *const gchar,
                                              participant: *const gchar,
                                              remote_candidates: *mut GList);
    pub fn purple_media_get_local_candidates(media: *mut PurpleMedia,
                                             sess_id: *const gchar,
                                             participant: *const gchar)
     -> *mut GList;
    pub fn purple_media_get_active_local_candidates(media: *mut PurpleMedia,
                                                    sess_id: *const gchar,
                                                    participant: *const gchar)
     -> *mut GList;
    pub fn purple_media_get_active_remote_candidates(media: *mut PurpleMedia,
                                                     sess_id: *const gchar,
                                                     participant:
                                                         *const gchar)
     -> *mut GList;
    pub fn purple_media_set_remote_codecs(media: *mut PurpleMedia,
                                          sess_id: *const gchar,
                                          participant: *const gchar,
                                          codecs: *mut GList) -> gboolean;
    pub fn purple_media_candidates_prepared(media: *mut PurpleMedia,
                                            session_id: *const gchar,
                                            participant: *const gchar)
     -> gboolean;
    pub fn purple_media_set_send_codec(media: *mut PurpleMedia,
                                       sess_id: *const gchar,
                                       codec: *mut PurpleMediaCodec)
     -> gboolean;
    pub fn purple_media_set_encryption_parameters(media: *mut PurpleMedia,
                                                  sess_id: *const gchar,
                                                  cipher: *const gchar,
                                                  auth: *const gchar,
                                                  key: *const gchar,
                                                  key_len: gsize) -> gboolean;
    pub fn purple_media_set_decryption_parameters(media: *mut PurpleMedia,
                                                  sess_id: *const gchar,
                                                  participant: *const gchar,
                                                  cipher: *const gchar,
                                                  auth: *const gchar,
                                                  key: *const gchar,
                                                  key_len: gsize) -> gboolean;
    pub fn purple_media_codecs_ready(media: *mut PurpleMedia,
                                     sess_id: *const gchar) -> gboolean;
    pub fn purple_media_set_send_rtcp_mux(media: *mut PurpleMedia,
                                          sess_id: *const gchar,
                                          participant: *const gchar,
                                          send_rtcp_mux: gboolean)
     -> gboolean;
    pub fn purple_media_is_initiator(media: *mut PurpleMedia,
                                     sess_id: *const gchar,
                                     participant: *const gchar) -> gboolean;
    pub fn purple_media_accepted(media: *mut PurpleMedia,
                                 sess_id: *const gchar,
                                 participant: *const gchar) -> gboolean;
    pub fn purple_media_set_input_volume(media: *mut PurpleMedia,
                                         session_id: *const gchar,
                                         level: ::std::os::raw::c_double);
    pub fn purple_media_set_output_volume(media: *mut PurpleMedia,
                                          session_id: *const gchar,
                                          participant: *const gchar,
                                          level: ::std::os::raw::c_double);
    pub fn purple_media_set_output_window(media: *mut PurpleMedia,
                                          session_id: *const gchar,
                                          participant: *const gchar,
                                          window_id: gulong) -> gulong;
    pub fn purple_media_remove_output_windows(media: *mut PurpleMedia);
    pub fn purple_media_send_dtmf(media: *mut PurpleMedia,
                                  session_id: *const gchar, dtmf: gchar,
                                  volume: guint8, duration: guint16)
     -> gboolean;
    pub fn purple_timeout_add(interval: guint, function: GSourceFunc,
                              data: gpointer) -> guint;
    pub fn purple_timeout_add_seconds(interval: guint, function: GSourceFunc,
                                      data: gpointer) -> guint;
    pub fn purple_timeout_remove(handle: guint) -> gboolean;
    pub fn purple_input_add(fd: ::std::os::raw::c_int,
                            cond: PurpleInputCondition,
                            func: PurpleInputFunction, user_data: gpointer)
     -> guint;
    pub fn purple_input_remove(handle: guint) -> gboolean;
    pub fn purple_input_get_error(fd: ::std::os::raw::c_int,
                                  error: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn purple_eventloop_set_ui_ops(ops: *mut PurpleEventLoopUiOps);
    pub fn purple_eventloop_get_ui_ops() -> *mut PurpleEventLoopUiOps;
    pub fn purple_proxy_info_new() -> *mut PurpleProxyInfo;
    pub fn purple_proxy_info_destroy(info: *mut PurpleProxyInfo);
    pub fn purple_proxy_info_set_type(info: *mut PurpleProxyInfo,
                                      _type: PurpleProxyType);
    pub fn purple_proxy_info_set_host(info: *mut PurpleProxyInfo,
                                      host: *const ::std::os::raw::c_char);
    pub fn purple_proxy_info_set_port(info: *mut PurpleProxyInfo,
                                      port: ::std::os::raw::c_int);
    pub fn purple_proxy_info_set_username(info: *mut PurpleProxyInfo,
                                          username:
                                              *const ::std::os::raw::c_char);
    pub fn purple_proxy_info_set_password(info: *mut PurpleProxyInfo,
                                          password:
                                              *const ::std::os::raw::c_char);
    pub fn purple_proxy_info_get_type(info: *const PurpleProxyInfo)
     -> PurpleProxyType;
    pub fn purple_proxy_info_get_host(info: *const PurpleProxyInfo)
     -> *const ::std::os::raw::c_char;
    pub fn purple_proxy_info_get_port(info: *const PurpleProxyInfo)
     -> ::std::os::raw::c_int;
    pub fn purple_proxy_info_get_username(info: *const PurpleProxyInfo)
     -> *const ::std::os::raw::c_char;
    pub fn purple_proxy_info_get_password(info: *const PurpleProxyInfo)
     -> *const ::std::os::raw::c_char;
    pub fn purple_global_proxy_get_info() -> *mut PurpleProxyInfo;
    pub fn purple_global_proxy_set_info(info: *mut PurpleProxyInfo);
    pub fn purple_proxy_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_proxy_init();
    pub fn purple_proxy_uninit();
    pub fn purple_proxy_get_setup(account: *mut PurpleAccount)
     -> *mut PurpleProxyInfo;
    pub fn purple_proxy_connect(handle: *mut ::std::os::raw::c_void,
                                account: *mut PurpleAccount,
                                host: *const ::std::os::raw::c_char,
                                port: ::std::os::raw::c_int,
                                connect_cb: PurpleProxyConnectFunction,
                                data: gpointer)
     -> *mut PurpleProxyConnectData;
    pub fn purple_proxy_connect_udp(handle: *mut ::std::os::raw::c_void,
                                    account: *mut PurpleAccount,
                                    host: *const ::std::os::raw::c_char,
                                    port: ::std::os::raw::c_int,
                                    connect_cb: PurpleProxyConnectFunction,
                                    data: gpointer)
     -> *mut PurpleProxyConnectData;
    pub fn purple_proxy_connect_socks5_account(handle:
                                                   *mut ::std::os::raw::c_void,
                                               account: *mut PurpleAccount,
                                               gpi: *mut PurpleProxyInfo,
                                               host:
                                                   *const ::std::os::raw::c_char,
                                               port: ::std::os::raw::c_int,
                                               connect_cb:
                                                   PurpleProxyConnectFunction,
                                               data: gpointer)
     -> *mut PurpleProxyConnectData;
    pub fn purple_proxy_connect_socks5(handle: *mut ::std::os::raw::c_void,
                                       gpi: *mut PurpleProxyInfo,
                                       host: *const ::std::os::raw::c_char,
                                       port: ::std::os::raw::c_int,
                                       connect_cb: PurpleProxyConnectFunction,
                                       data: gpointer)
     -> *mut PurpleProxyConnectData;
    pub fn purple_proxy_connect_cancel(connect_data:
                                           *mut PurpleProxyConnectData);
    pub fn purple_proxy_connect_cancel_with_handle(handle:
                                                       *mut ::std::os::raw::c_void);
    pub fn purple_roomlist_show_with_account(account: *mut PurpleAccount);
    pub fn purple_roomlist_new(account: *mut PurpleAccount)
     -> *mut PurpleRoomlist;
    pub fn purple_roomlist_ref(list: *mut PurpleRoomlist);
    pub fn purple_roomlist_unref(list: *mut PurpleRoomlist);
    pub fn purple_roomlist_set_fields(list: *mut PurpleRoomlist,
                                      fields: *mut GList);
    pub fn purple_roomlist_set_in_progress(list: *mut PurpleRoomlist,
                                           in_progress: gboolean);
    pub fn purple_roomlist_get_in_progress(list: *mut PurpleRoomlist)
     -> gboolean;
    pub fn purple_roomlist_room_add(list: *mut PurpleRoomlist,
                                    room: *mut PurpleRoomlistRoom);
    pub fn purple_roomlist_get_list(gc: *mut PurpleConnection)
     -> *mut PurpleRoomlist;
    pub fn purple_roomlist_cancel_get_list(list: *mut PurpleRoomlist);
    pub fn purple_roomlist_expand_category(list: *mut PurpleRoomlist,
                                           category: *mut PurpleRoomlistRoom);
    pub fn purple_roomlist_get_fields(roomlist: *mut PurpleRoomlist)
     -> *mut GList;
    pub fn purple_roomlist_room_new(_type: PurpleRoomlistRoomType,
                                    name: *const gchar,
                                    parent: *mut PurpleRoomlistRoom)
     -> *mut PurpleRoomlistRoom;
    pub fn purple_roomlist_room_add_field(list: *mut PurpleRoomlist,
                                          room: *mut PurpleRoomlistRoom,
                                          field: gconstpointer);
    pub fn purple_roomlist_room_join(list: *mut PurpleRoomlist,
                                     room: *mut PurpleRoomlistRoom);
    pub fn purple_roomlist_room_get_type(room: *mut PurpleRoomlistRoom)
     -> PurpleRoomlistRoomType;
    pub fn purple_roomlist_room_get_name(room: *mut PurpleRoomlistRoom)
     -> *const ::std::os::raw::c_char;
    pub fn purple_roomlist_room_get_parent(room: *mut PurpleRoomlistRoom)
     -> *mut PurpleRoomlistRoom;
    pub fn purple_roomlist_room_get_fields(room: *mut PurpleRoomlistRoom)
     -> *mut GList;
    pub fn purple_roomlist_field_new(_type: PurpleRoomlistFieldType,
                                     label: *const gchar, name: *const gchar,
                                     hidden: gboolean)
     -> *mut PurpleRoomlistField;
    pub fn purple_roomlist_field_get_type(field: *mut PurpleRoomlistField)
     -> PurpleRoomlistFieldType;
    pub fn purple_roomlist_field_get_label(field: *mut PurpleRoomlistField)
     -> *const ::std::os::raw::c_char;
    pub fn purple_roomlist_field_get_hidden(field: *mut PurpleRoomlistField)
     -> gboolean;
    pub fn purple_roomlist_set_ui_ops(ops: *mut PurpleRoomlistUiOps);
    pub fn purple_roomlist_get_ui_ops() -> *mut PurpleRoomlistUiOps;
    pub fn purple_whiteboard_set_ui_ops(ops: *mut PurpleWhiteboardUiOps);
    pub fn purple_whiteboard_set_prpl_ops(wb: *mut PurpleWhiteboard,
                                          ops: *mut PurpleWhiteboardPrplOps);
    pub fn purple_whiteboard_create(account: *mut PurpleAccount,
                                    who: *const ::std::os::raw::c_char,
                                    state: ::std::os::raw::c_int)
     -> *mut PurpleWhiteboard;
    pub fn purple_whiteboard_destroy(wb: *mut PurpleWhiteboard);
    pub fn purple_whiteboard_start(wb: *mut PurpleWhiteboard);
    pub fn purple_whiteboard_get_session(account: *const PurpleAccount,
                                         who: *const ::std::os::raw::c_char)
     -> *mut PurpleWhiteboard;
    pub fn purple_whiteboard_draw_list_destroy(draw_list: *mut GList);
    pub fn purple_whiteboard_get_dimensions(wb: *const PurpleWhiteboard,
                                            width: *mut ::std::os::raw::c_int,
                                            height:
                                                *mut ::std::os::raw::c_int)
     -> gboolean;
    pub fn purple_whiteboard_set_dimensions(wb: *mut PurpleWhiteboard,
                                            width: ::std::os::raw::c_int,
                                            height: ::std::os::raw::c_int);
    pub fn purple_whiteboard_draw_point(wb: *mut PurpleWhiteboard,
                                        x: ::std::os::raw::c_int,
                                        y: ::std::os::raw::c_int,
                                        color: ::std::os::raw::c_int,
                                        size: ::std::os::raw::c_int);
    pub fn purple_whiteboard_send_draw_list(wb: *mut PurpleWhiteboard,
                                            list: *mut GList);
    pub fn purple_whiteboard_draw_line(wb: *mut PurpleWhiteboard,
                                       x1: ::std::os::raw::c_int,
                                       y1: ::std::os::raw::c_int,
                                       x2: ::std::os::raw::c_int,
                                       y2: ::std::os::raw::c_int,
                                       color: ::std::os::raw::c_int,
                                       size: ::std::os::raw::c_int);
    pub fn purple_whiteboard_clear(wb: *mut PurpleWhiteboard);
    pub fn purple_whiteboard_send_clear(wb: *mut PurpleWhiteboard);
    pub fn purple_whiteboard_send_brush(wb: *mut PurpleWhiteboard,
                                        size: ::std::os::raw::c_int,
                                        color: ::std::os::raw::c_int);
    pub fn purple_whiteboard_get_brush(wb: *const PurpleWhiteboard,
                                       size: *mut ::std::os::raw::c_int,
                                       color: *mut ::std::os::raw::c_int)
     -> gboolean;
    pub fn purple_whiteboard_set_brush(wb: *mut PurpleWhiteboard,
                                       size: ::std::os::raw::c_int,
                                       color: ::std::os::raw::c_int);
    pub fn purple_attention_type_new(ulname: *const ::std::os::raw::c_char,
                                     name: *const ::std::os::raw::c_char,
                                     inc_desc: *const ::std::os::raw::c_char,
                                     out_desc: *const ::std::os::raw::c_char)
     -> *mut PurpleAttentionType;
    pub fn purple_attention_type_set_name(_type: *mut PurpleAttentionType,
                                          name:
                                              *const ::std::os::raw::c_char);
    pub fn purple_attention_type_set_incoming_desc(_type:
                                                       *mut PurpleAttentionType,
                                                   desc:
                                                       *const ::std::os::raw::c_char);
    pub fn purple_attention_type_set_outgoing_desc(_type:
                                                       *mut PurpleAttentionType,
                                                   desc:
                                                       *const ::std::os::raw::c_char);
    pub fn purple_attention_type_set_icon_name(_type:
                                                   *mut PurpleAttentionType,
                                               name:
                                                   *const ::std::os::raw::c_char);
    pub fn purple_attention_type_set_unlocalized_name(_type:
                                                          *mut PurpleAttentionType,
                                                      ulname:
                                                          *const ::std::os::raw::c_char);
    pub fn purple_attention_type_get_name(_type: *const PurpleAttentionType)
     -> *const ::std::os::raw::c_char;
    pub fn purple_attention_type_get_incoming_desc(_type:
                                                       *const PurpleAttentionType)
     -> *const ::std::os::raw::c_char;
    pub fn purple_attention_type_get_outgoing_desc(_type:
                                                       *const PurpleAttentionType)
     -> *const ::std::os::raw::c_char;
    pub fn purple_attention_type_get_icon_name(_type:
                                                   *const PurpleAttentionType)
     -> *const ::std::os::raw::c_char;
    pub fn purple_attention_type_get_unlocalized_name(_type:
                                                          *const PurpleAttentionType)
     -> *const ::std::os::raw::c_char;
    pub fn purple_prpl_got_account_idle(account: *mut PurpleAccount,
                                        idle: gboolean, idle_time: time_t);
    pub fn purple_prpl_got_account_login_time(account: *mut PurpleAccount,
                                              login_time: time_t);
    pub fn purple_prpl_got_account_status(account: *mut PurpleAccount,
                                          status_id:
                                              *const ::std::os::raw::c_char, ...);
    pub fn purple_prpl_got_account_actions(account: *mut PurpleAccount);
    pub fn purple_prpl_got_user_idle(account: *mut PurpleAccount,
                                     name: *const ::std::os::raw::c_char,
                                     idle: gboolean, idle_time: time_t);
    pub fn purple_prpl_got_user_login_time(account: *mut PurpleAccount,
                                           name:
                                               *const ::std::os::raw::c_char,
                                           login_time: time_t);
    pub fn purple_prpl_got_user_status(account: *mut PurpleAccount,
                                       name: *const ::std::os::raw::c_char,
                                       status_id:
                                           *const ::std::os::raw::c_char, ...);
    pub fn purple_prpl_got_user_status_deactive(account: *mut PurpleAccount,
                                                name:
                                                    *const ::std::os::raw::c_char,
                                                status_id:
                                                    *const ::std::os::raw::c_char);
    pub fn purple_prpl_change_account_status(account: *mut PurpleAccount,
                                             old_status: *mut PurpleStatus,
                                             new_status: *mut PurpleStatus);
    pub fn purple_prpl_get_statuses(account: *mut PurpleAccount,
                                    presence: *mut PurplePresence)
     -> *mut GList;
    pub fn purple_prpl_send_attention(gc: *mut PurpleConnection,
                                      who: *const ::std::os::raw::c_char,
                                      type_code: guint);
    pub fn purple_prpl_got_attention(gc: *mut PurpleConnection,
                                     who: *const ::std::os::raw::c_char,
                                     type_code: guint);
    pub fn purple_prpl_got_attention_in_chat(gc: *mut PurpleConnection,
                                             id: ::std::os::raw::c_int,
                                             who:
                                                 *const ::std::os::raw::c_char,
                                             type_code: guint);
    pub fn purple_prpl_get_media_caps(account: *mut PurpleAccount,
                                      who: *const ::std::os::raw::c_char)
     -> PurpleMediaCaps;
    pub fn purple_prpl_initiate_media(account: *mut PurpleAccount,
                                      who: *const ::std::os::raw::c_char,
                                      _type: PurpleMediaSessionType)
     -> gboolean;
    pub fn purple_prpl_got_media_caps(account: *mut PurpleAccount,
                                      who: *const ::std::os::raw::c_char);
    pub fn purple_find_prpl(id: *const ::std::os::raw::c_char)
     -> *mut PurplePlugin;
    pub fn purple_buddy_icon_new(account: *mut PurpleAccount,
                                 username: *const ::std::os::raw::c_char,
                                 icon_data: *mut ::std::os::raw::c_void,
                                 icon_len: size_t,
                                 checksum: *const ::std::os::raw::c_char)
     -> *mut PurpleBuddyIcon;
    pub fn purple_buddy_icon_ref(icon: *mut PurpleBuddyIcon)
     -> *mut PurpleBuddyIcon;
    pub fn purple_buddy_icon_unref(icon: *mut PurpleBuddyIcon)
     -> *mut PurpleBuddyIcon;
    pub fn purple_buddy_icon_update(icon: *mut PurpleBuddyIcon);
    pub fn purple_buddy_icon_set_data(icon: *mut PurpleBuddyIcon,
                                      data: *mut guchar, len: size_t,
                                      checksum:
                                          *const ::std::os::raw::c_char);
    pub fn purple_buddy_icon_get_account(icon: *const PurpleBuddyIcon)
     -> *mut PurpleAccount;
    pub fn purple_buddy_icon_get_username(icon: *const PurpleBuddyIcon)
     -> *const ::std::os::raw::c_char;
    pub fn purple_buddy_icon_get_checksum(icon: *const PurpleBuddyIcon)
     -> *const ::std::os::raw::c_char;
    pub fn purple_buddy_icon_get_data(icon: *const PurpleBuddyIcon,
                                      len: *mut size_t) -> gconstpointer;
    pub fn purple_buddy_icon_get_extension(icon: *const PurpleBuddyIcon)
     -> *const ::std::os::raw::c_char;
    pub fn purple_buddy_icon_get_full_path(icon: *mut PurpleBuddyIcon)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_buddy_icons_set_for_user(account: *mut PurpleAccount,
                                           username:
                                               *const ::std::os::raw::c_char,
                                           icon_data:
                                               *mut ::std::os::raw::c_void,
                                           icon_len: size_t,
                                           checksum:
                                               *const ::std::os::raw::c_char);
    pub fn purple_buddy_icons_get_checksum_for_user(buddy: *mut PurpleBuddy)
     -> *const ::std::os::raw::c_char;
    pub fn purple_buddy_icons_find(account: *mut PurpleAccount,
                                   username: *const ::std::os::raw::c_char)
     -> *mut PurpleBuddyIcon;
    pub fn purple_buddy_icons_find_account_icon(account: *mut PurpleAccount)
     -> *mut PurpleStoredImage;
    pub fn purple_buddy_icons_set_account_icon(account: *mut PurpleAccount,
                                               icon_data: *mut guchar,
                                               icon_len: size_t)
     -> *mut PurpleStoredImage;
    pub fn purple_buddy_icons_get_account_icon_timestamp(account:
                                                             *mut PurpleAccount)
     -> time_t;
    pub fn purple_buddy_icons_node_has_custom_icon(node: *mut PurpleBlistNode)
     -> gboolean;
    pub fn purple_buddy_icons_node_find_custom_icon(node:
                                                        *mut PurpleBlistNode)
     -> *mut PurpleStoredImage;
    pub fn purple_buddy_icons_node_set_custom_icon(node: *mut PurpleBlistNode,
                                                   icon_data: *mut guchar,
                                                   icon_len: size_t)
     -> *mut PurpleStoredImage;
    pub fn purple_buddy_icons_node_set_custom_icon_from_file(node:
                                                                 *mut PurpleBlistNode,
                                                             filename:
                                                                 *const gchar)
     -> *mut PurpleStoredImage;
    pub fn purple_buddy_icons_has_custom_icon(contact: *mut PurpleContact)
     -> gboolean;
    pub fn purple_buddy_icons_find_custom_icon(contact: *mut PurpleContact)
     -> *mut PurpleStoredImage;
    pub fn purple_buddy_icons_set_custom_icon(contact: *mut PurpleContact,
                                              icon_data: *mut guchar,
                                              icon_len: size_t)
     -> *mut PurpleStoredImage;
    pub fn purple_buddy_icons_set_caching(caching: gboolean);
    pub fn purple_buddy_icons_is_caching() -> gboolean;
    pub fn purple_buddy_icons_set_cache_dir(cache_dir:
                                                *const ::std::os::raw::c_char);
    pub fn purple_buddy_icons_get_cache_dir()
     -> *const ::std::os::raw::c_char;
    pub fn purple_buddy_icons_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_buddy_icons_init();
    pub fn purple_buddy_icons_uninit();
    pub fn purple_buddy_icon_get_scale_size(spec: *mut PurpleBuddyIconSpec,
                                            width: *mut ::std::os::raw::c_int,
                                            height:
                                                *mut ::std::os::raw::c_int);
    pub fn purple_blist_new() -> *mut PurpleBuddyList;
    pub fn purple_set_blist(blist: *mut PurpleBuddyList);
    pub fn purple_get_blist() -> *mut PurpleBuddyList;
    pub fn purple_blist_get_root() -> *mut PurpleBlistNode;
    pub fn purple_blist_get_buddies() -> *mut GSList;
    pub fn purple_blist_get_ui_data() -> gpointer;
    pub fn purple_blist_set_ui_data(ui_data: gpointer);
    pub fn purple_blist_node_next(node: *mut PurpleBlistNode,
                                  offline: gboolean) -> *mut PurpleBlistNode;
    pub fn purple_blist_node_get_parent(node: *mut PurpleBlistNode)
     -> *mut PurpleBlistNode;
    pub fn purple_blist_node_get_first_child(node: *mut PurpleBlistNode)
     -> *mut PurpleBlistNode;
    pub fn purple_blist_node_get_sibling_next(node: *mut PurpleBlistNode)
     -> *mut PurpleBlistNode;
    pub fn purple_blist_node_get_sibling_prev(node: *mut PurpleBlistNode)
     -> *mut PurpleBlistNode;
    pub fn purple_blist_node_get_ui_data(node: *const PurpleBlistNode)
     -> gpointer;
    pub fn purple_blist_node_set_ui_data(node: *mut PurpleBlistNode,
                                         ui_data: gpointer);
    pub fn purple_blist_show();
    pub fn purple_blist_destroy();
    pub fn purple_blist_set_visible(show: gboolean);
    pub fn purple_blist_update_buddy_status(buddy: *mut PurpleBuddy,
                                            old_status: *mut PurpleStatus);
    pub fn purple_blist_update_node_icon(node: *mut PurpleBlistNode);
    pub fn purple_blist_update_buddy_icon(buddy: *mut PurpleBuddy);
    pub fn purple_blist_rename_buddy(buddy: *mut PurpleBuddy,
                                     name: *const ::std::os::raw::c_char);
    pub fn purple_blist_alias_contact(contact: *mut PurpleContact,
                                      alias: *const ::std::os::raw::c_char);
    pub fn purple_blist_alias_buddy(buddy: *mut PurpleBuddy,
                                    alias: *const ::std::os::raw::c_char);
    pub fn purple_blist_server_alias_buddy(buddy: *mut PurpleBuddy,
                                           alias:
                                               *const ::std::os::raw::c_char);
    pub fn purple_blist_alias_chat(chat: *mut PurpleChat,
                                   alias: *const ::std::os::raw::c_char);
    pub fn purple_blist_rename_group(group: *mut PurpleGroup,
                                     name: *const ::std::os::raw::c_char);
    pub fn purple_chat_new(account: *mut PurpleAccount,
                           alias: *const ::std::os::raw::c_char,
                           components: *mut GHashTable) -> *mut PurpleChat;
    pub fn purple_chat_destroy(chat: *mut PurpleChat);
    pub fn purple_blist_add_chat(chat: *mut PurpleChat,
                                 group: *mut PurpleGroup,
                                 node: *mut PurpleBlistNode);
    pub fn purple_buddy_new(account: *mut PurpleAccount,
                            name: *const ::std::os::raw::c_char,
                            alias: *const ::std::os::raw::c_char)
     -> *mut PurpleBuddy;
    pub fn purple_buddy_destroy(buddy: *mut PurpleBuddy);
    pub fn purple_buddy_set_icon(buddy: *mut PurpleBuddy,
                                 icon: *mut PurpleBuddyIcon);
    pub fn purple_buddy_get_account(buddy: *const PurpleBuddy)
     -> *mut PurpleAccount;
    pub fn purple_buddy_get_name(buddy: *const PurpleBuddy)
     -> *const ::std::os::raw::c_char;
    pub fn purple_buddy_get_icon(buddy: *const PurpleBuddy)
     -> *mut PurpleBuddyIcon;
    pub fn purple_buddy_get_protocol_data(buddy: *const PurpleBuddy)
     -> gpointer;
    pub fn purple_buddy_set_protocol_data(buddy: *mut PurpleBuddy,
                                          data: gpointer);
    pub fn purple_buddy_get_contact(buddy: *mut PurpleBuddy)
     -> *mut PurpleContact;
    pub fn purple_buddy_get_presence(buddy: *const PurpleBuddy)
     -> *mut PurplePresence;
    pub fn purple_buddy_get_media_caps(buddy: *const PurpleBuddy)
     -> PurpleMediaCaps;
    pub fn purple_buddy_set_media_caps(buddy: *mut PurpleBuddy,
                                       media_caps: PurpleMediaCaps);
    pub fn purple_blist_add_buddy(buddy: *mut PurpleBuddy,
                                  contact: *mut PurpleContact,
                                  group: *mut PurpleGroup,
                                  node: *mut PurpleBlistNode);
    pub fn purple_group_new(name: *const ::std::os::raw::c_char)
     -> *mut PurpleGroup;
    pub fn purple_group_destroy(group: *mut PurpleGroup);
    pub fn purple_blist_add_group(group: *mut PurpleGroup,
                                  node: *mut PurpleBlistNode);
    pub fn purple_contact_new() -> *mut PurpleContact;
    pub fn purple_contact_destroy(contact: *mut PurpleContact);
    pub fn purple_contact_get_group(contact: *const PurpleContact)
     -> *mut PurpleGroup;
    pub fn purple_blist_add_contact(contact: *mut PurpleContact,
                                    group: *mut PurpleGroup,
                                    node: *mut PurpleBlistNode);
    pub fn purple_blist_merge_contact(source: *mut PurpleContact,
                                      node: *mut PurpleBlistNode);
    pub fn purple_contact_get_priority_buddy(contact: *mut PurpleContact)
     -> *mut PurpleBuddy;
    pub fn purple_contact_set_alias(contact: *mut PurpleContact,
                                    alias: *const ::std::os::raw::c_char);
    pub fn purple_contact_get_alias(contact: *mut PurpleContact)
     -> *const ::std::os::raw::c_char;
    pub fn purple_contact_on_account(contact: *mut PurpleContact,
                                     account: *mut PurpleAccount) -> gboolean;
    pub fn purple_contact_invalidate_priority_buddy(contact:
                                                        *mut PurpleContact);
    pub fn purple_blist_remove_buddy(buddy: *mut PurpleBuddy);
    pub fn purple_blist_remove_contact(contact: *mut PurpleContact);
    pub fn purple_blist_remove_chat(chat: *mut PurpleChat);
    pub fn purple_blist_remove_group(group: *mut PurpleGroup);
    pub fn purple_buddy_get_alias_only(buddy: *mut PurpleBuddy)
     -> *const ::std::os::raw::c_char;
    pub fn purple_buddy_get_server_alias(buddy: *mut PurpleBuddy)
     -> *const ::std::os::raw::c_char;
    pub fn purple_buddy_get_contact_alias(buddy: *mut PurpleBuddy)
     -> *const ::std::os::raw::c_char;
    pub fn purple_buddy_get_local_alias(buddy: *mut PurpleBuddy)
     -> *const ::std::os::raw::c_char;
    pub fn purple_buddy_get_alias(buddy: *mut PurpleBuddy)
     -> *const ::std::os::raw::c_char;
    pub fn purple_buddy_get_local_buddy_alias(buddy: *mut PurpleBuddy)
     -> *const ::std::os::raw::c_char;
    pub fn purple_chat_get_name(chat: *mut PurpleChat)
     -> *const ::std::os::raw::c_char;
    pub fn purple_find_buddy(account: *mut PurpleAccount,
                             name: *const ::std::os::raw::c_char)
     -> *mut PurpleBuddy;
    pub fn purple_find_buddy_in_group(account: *mut PurpleAccount,
                                      name: *const ::std::os::raw::c_char,
                                      group: *mut PurpleGroup)
     -> *mut PurpleBuddy;
    pub fn purple_find_buddies(account: *mut PurpleAccount,
                               name: *const ::std::os::raw::c_char)
     -> *mut GSList;
    pub fn purple_find_group(name: *const ::std::os::raw::c_char)
     -> *mut PurpleGroup;
    pub fn purple_blist_find_chat(account: *mut PurpleAccount,
                                  name: *const ::std::os::raw::c_char)
     -> *mut PurpleChat;
    pub fn purple_chat_get_group(chat: *mut PurpleChat) -> *mut PurpleGroup;
    pub fn purple_chat_get_account(chat: *mut PurpleChat)
     -> *mut PurpleAccount;
    pub fn purple_chat_get_components(chat: *mut PurpleChat)
     -> *mut GHashTable;
    pub fn purple_buddy_get_group(buddy: *mut PurpleBuddy)
     -> *mut PurpleGroup;
    pub fn purple_group_get_accounts(g: *mut PurpleGroup) -> *mut GSList;
    pub fn purple_group_on_account(g: *mut PurpleGroup,
                                   account: *mut PurpleAccount) -> gboolean;
    pub fn purple_group_get_name(group: *mut PurpleGroup)
     -> *const ::std::os::raw::c_char;
    pub fn purple_blist_add_account(account: *mut PurpleAccount);
    pub fn purple_blist_remove_account(account: *mut PurpleAccount);
    pub fn purple_blist_get_group_size(group: *mut PurpleGroup,
                                       offline: gboolean)
     -> ::std::os::raw::c_int;
    pub fn purple_blist_get_group_online_count(group: *mut PurpleGroup)
     -> ::std::os::raw::c_int;
    pub fn purple_blist_load();
    pub fn purple_blist_schedule_save();
    pub fn purple_blist_request_add_buddy(account: *mut PurpleAccount,
                                          username:
                                              *const ::std::os::raw::c_char,
                                          group:
                                              *const ::std::os::raw::c_char,
                                          alias:
                                              *const ::std::os::raw::c_char);
    pub fn purple_blist_request_add_chat(account: *mut PurpleAccount,
                                         group: *mut PurpleGroup,
                                         alias: *const ::std::os::raw::c_char,
                                         name: *const ::std::os::raw::c_char);
    pub fn purple_blist_request_add_group();
    pub fn purple_blist_node_set_bool(node: *mut PurpleBlistNode,
                                      key: *const ::std::os::raw::c_char,
                                      value: gboolean);
    pub fn purple_blist_node_get_bool(node: *mut PurpleBlistNode,
                                      key: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_blist_node_set_int(node: *mut PurpleBlistNode,
                                     key: *const ::std::os::raw::c_char,
                                     value: ::std::os::raw::c_int);
    pub fn purple_blist_node_get_int(node: *mut PurpleBlistNode,
                                     key: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn purple_blist_node_set_string(node: *mut PurpleBlistNode,
                                        key: *const ::std::os::raw::c_char,
                                        value: *const ::std::os::raw::c_char);
    pub fn purple_blist_node_get_string(node: *mut PurpleBlistNode,
                                        key: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_blist_node_remove_setting(node: *mut PurpleBlistNode,
                                            key:
                                                *const ::std::os::raw::c_char);
    pub fn purple_blist_node_set_flags(node: *mut PurpleBlistNode,
                                       flags: PurpleBlistNodeFlags);
    pub fn purple_blist_node_get_flags(node: *mut PurpleBlistNode)
     -> PurpleBlistNodeFlags;
    pub fn purple_blist_node_get_type(node: *mut PurpleBlistNode)
     -> PurpleBlistNodeType;
    pub fn purple_blist_node_get_extended_menu(n: *mut PurpleBlistNode)
     -> *mut GList;
    pub fn purple_blist_set_ui_ops(ops: *mut PurpleBlistUiOps);
    pub fn purple_blist_get_ui_ops() -> *mut PurpleBlistUiOps;
    pub fn purple_blist_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_blist_init();
    pub fn purple_blist_uninit();
    pub fn purple_primitive_get_id_from_type(_type: PurpleStatusPrimitive)
     -> *const ::std::os::raw::c_char;
    pub fn purple_primitive_get_name_from_type(_type: PurpleStatusPrimitive)
     -> *const ::std::os::raw::c_char;
    pub fn purple_primitive_get_type_from_id(id:
                                                 *const ::std::os::raw::c_char)
     -> PurpleStatusPrimitive;
    pub fn purple_status_type_new_full(primitive: PurpleStatusPrimitive,
                                       id: *const ::std::os::raw::c_char,
                                       name: *const ::std::os::raw::c_char,
                                       saveable: gboolean,
                                       user_settable: gboolean,
                                       independent: gboolean)
     -> *mut PurpleStatusType;
    pub fn purple_status_type_new(primitive: PurpleStatusPrimitive,
                                  id: *const ::std::os::raw::c_char,
                                  name: *const ::std::os::raw::c_char,
                                  user_settable: gboolean)
     -> *mut PurpleStatusType;
    pub fn purple_status_type_new_with_attrs(primitive: PurpleStatusPrimitive,
                                             id:
                                                 *const ::std::os::raw::c_char,
                                             name:
                                                 *const ::std::os::raw::c_char,
                                             saveable: gboolean,
                                             user_settable: gboolean,
                                             independent: gboolean,
                                             attr_id:
                                                 *const ::std::os::raw::c_char,
                                             attr_name:
                                                 *const ::std::os::raw::c_char,
                                             attr_value:
                                                 *mut PurpleValue, ...)
     -> *mut PurpleStatusType;
    pub fn purple_status_type_destroy(status_type: *mut PurpleStatusType);
    pub fn purple_status_type_set_primary_attr(status_type:
                                                   *mut PurpleStatusType,
                                               attr_id:
                                                   *const ::std::os::raw::c_char);
    pub fn purple_status_type_add_attr(status_type: *mut PurpleStatusType,
                                       id: *const ::std::os::raw::c_char,
                                       name: *const ::std::os::raw::c_char,
                                       value: *mut PurpleValue);
    pub fn purple_status_type_add_attrs(status_type: *mut PurpleStatusType,
                                        id: *const ::std::os::raw::c_char,
                                        name: *const ::std::os::raw::c_char,
                                        value: *mut PurpleValue, ...);
    pub fn purple_status_type_add_attrs_vargs(status_type:
                                                  *mut PurpleStatusType,
                                              args: va_list);
    pub fn purple_status_type_get_primitive(status_type:
                                                *const PurpleStatusType)
     -> PurpleStatusPrimitive;
    pub fn purple_status_type_get_id(status_type: *const PurpleStatusType)
     -> *const ::std::os::raw::c_char;
    pub fn purple_status_type_get_name(status_type: *const PurpleStatusType)
     -> *const ::std::os::raw::c_char;
    pub fn purple_status_type_is_saveable(status_type:
                                              *const PurpleStatusType)
     -> gboolean;
    pub fn purple_status_type_is_user_settable(status_type:
                                                   *const PurpleStatusType)
     -> gboolean;
    pub fn purple_status_type_is_independent(status_type:
                                                 *const PurpleStatusType)
     -> gboolean;
    pub fn purple_status_type_is_exclusive(status_type:
                                               *const PurpleStatusType)
     -> gboolean;
    pub fn purple_status_type_is_available(status_type:
                                               *const PurpleStatusType)
     -> gboolean;
    pub fn purple_status_type_get_primary_attr(_type: *const PurpleStatusType)
     -> *const ::std::os::raw::c_char;
    pub fn purple_status_type_get_attr(status_type: *const PurpleStatusType,
                                       id: *const ::std::os::raw::c_char)
     -> *mut PurpleStatusAttr;
    pub fn purple_status_type_get_attrs(status_type: *const PurpleStatusType)
     -> *mut GList;
    pub fn purple_status_type_find_with_id(status_types: *mut GList,
                                           id: *const ::std::os::raw::c_char)
     -> *const PurpleStatusType;
    pub fn purple_status_attr_new(id: *const ::std::os::raw::c_char,
                                  name: *const ::std::os::raw::c_char,
                                  value_type: *mut PurpleValue)
     -> *mut PurpleStatusAttr;
    pub fn purple_status_attr_destroy(attr: *mut PurpleStatusAttr);
    pub fn purple_status_attr_get_id(attr: *const PurpleStatusAttr)
     -> *const ::std::os::raw::c_char;
    pub fn purple_status_attr_get_name(attr: *const PurpleStatusAttr)
     -> *const ::std::os::raw::c_char;
    pub fn purple_status_attr_get_value(attr: *const PurpleStatusAttr)
     -> *mut PurpleValue;
    pub fn purple_status_new(status_type: *mut PurpleStatusType,
                             presence: *mut PurplePresence)
     -> *mut PurpleStatus;
    pub fn purple_status_destroy(status: *mut PurpleStatus);
    pub fn purple_status_set_active(status: *mut PurpleStatus,
                                    active: gboolean);
    pub fn purple_status_set_active_with_attrs(status: *mut PurpleStatus,
                                               active: gboolean,
                                               args: va_list);
    pub fn purple_status_set_active_with_attrs_list(status: *mut PurpleStatus,
                                                    active: gboolean,
                                                    attrs: *mut GList);
    pub fn purple_status_set_attr_boolean(status: *mut PurpleStatus,
                                          id: *const ::std::os::raw::c_char,
                                          value: gboolean);
    pub fn purple_status_set_attr_int(status: *mut PurpleStatus,
                                      id: *const ::std::os::raw::c_char,
                                      value: ::std::os::raw::c_int);
    pub fn purple_status_set_attr_string(status: *mut PurpleStatus,
                                         id: *const ::std::os::raw::c_char,
                                         value:
                                             *const ::std::os::raw::c_char);
    pub fn purple_status_get_type(status: *const PurpleStatus)
     -> *mut PurpleStatusType;
    pub fn purple_status_get_presence(status: *const PurpleStatus)
     -> *mut PurplePresence;
    pub fn purple_status_get_id(status: *const PurpleStatus)
     -> *const ::std::os::raw::c_char;
    pub fn purple_status_get_name(status: *const PurpleStatus)
     -> *const ::std::os::raw::c_char;
    pub fn purple_status_is_independent(status: *const PurpleStatus)
     -> gboolean;
    pub fn purple_status_is_exclusive(status: *const PurpleStatus)
     -> gboolean;
    pub fn purple_status_is_available(status: *const PurpleStatus)
     -> gboolean;
    pub fn purple_status_is_active(status: *const PurpleStatus) -> gboolean;
    pub fn purple_status_is_online(status: *const PurpleStatus) -> gboolean;
    pub fn purple_status_get_attr_value(status: *const PurpleStatus,
                                        id: *const ::std::os::raw::c_char)
     -> *mut PurpleValue;
    pub fn purple_status_get_attr_boolean(status: *const PurpleStatus,
                                          id: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_status_get_attr_int(status: *const PurpleStatus,
                                      id: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn purple_status_get_attr_string(status: *const PurpleStatus,
                                         id: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_status_compare(status1: *const PurpleStatus,
                                 status2: *const PurpleStatus) -> gint;
    pub fn purple_presence_new(context: PurplePresenceContext)
     -> *mut PurplePresence;
    pub fn purple_presence_new_for_account(account: *mut PurpleAccount)
     -> *mut PurplePresence;
    pub fn purple_presence_new_for_conv(conv: *mut PurpleConversation)
     -> *mut PurplePresence;
    pub fn purple_presence_new_for_buddy(buddy: *mut PurpleBuddy)
     -> *mut PurplePresence;
    pub fn purple_presence_destroy(presence: *mut PurplePresence);
    pub fn purple_presence_add_status(presence: *mut PurplePresence,
                                      status: *mut PurpleStatus);
    pub fn purple_presence_add_list(presence: *mut PurplePresence,
                                    source_list: *mut GList);
    pub fn purple_presence_set_status_active(presence: *mut PurplePresence,
                                             status_id:
                                                 *const ::std::os::raw::c_char,
                                             active: gboolean);
    pub fn purple_presence_switch_status(presence: *mut PurplePresence,
                                         status_id:
                                             *const ::std::os::raw::c_char);
    pub fn purple_presence_set_idle(presence: *mut PurplePresence,
                                    idle: gboolean, idle_time: time_t);
    pub fn purple_presence_set_login_time(presence: *mut PurplePresence,
                                          login_time: time_t);
    pub fn purple_presence_get_context(presence: *const PurplePresence)
     -> PurplePresenceContext;
    pub fn purple_presence_get_account(presence: *const PurplePresence)
     -> *mut PurpleAccount;
    pub fn purple_presence_get_conversation(presence: *const PurplePresence)
     -> *mut PurpleConversation;
    pub fn purple_presence_get_chat_user(presence: *const PurplePresence)
     -> *const ::std::os::raw::c_char;
    pub fn purple_presence_get_buddy(presence: *const PurplePresence)
     -> *mut PurpleBuddy;
    pub fn purple_presence_get_statuses(presence: *const PurplePresence)
     -> *mut GList;
    pub fn purple_presence_get_status(presence: *const PurplePresence,
                                      status_id:
                                          *const ::std::os::raw::c_char)
     -> *mut PurpleStatus;
    pub fn purple_presence_get_active_status(presence: *const PurplePresence)
     -> *mut PurpleStatus;
    pub fn purple_presence_is_available(presence: *const PurplePresence)
     -> gboolean;
    pub fn purple_presence_is_online(presence: *const PurplePresence)
     -> gboolean;
    pub fn purple_presence_is_status_active(presence: *const PurplePresence,
                                            status_id:
                                                *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_presence_is_status_primitive_active(presence:
                                                          *const PurplePresence,
                                                      primitive:
                                                          PurpleStatusPrimitive)
     -> gboolean;
    pub fn purple_presence_is_idle(presence: *const PurplePresence)
     -> gboolean;
    pub fn purple_presence_get_idle_time(presence: *const PurplePresence)
     -> time_t;
    pub fn purple_presence_get_login_time(presence: *const PurplePresence)
     -> time_t;
    pub fn purple_presence_compare(presence1: *const PurplePresence,
                                   presence2: *const PurplePresence) -> gint;
    pub fn purple_status_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_status_init();
    pub fn purple_status_uninit();
    pub fn purple_certificate_verify(verifier: *mut PurpleCertificateVerifier,
                                     subject_name: *const gchar,
                                     cert_chain: *mut GList,
                                     cb: PurpleCertificateVerifiedCallback,
                                     cb_data: gpointer);
    pub fn purple_certificate_verify_complete(vrq:
                                                  *mut PurpleCertificateVerificationRequest,
                                              st:
                                                  PurpleCertificateVerificationStatus);
    pub fn purple_certificate_copy(crt: *mut PurpleCertificate)
     -> *mut PurpleCertificate;
    pub fn purple_certificate_copy_list(crt_list: *mut GList) -> *mut GList;
    pub fn purple_certificate_destroy(crt: *mut PurpleCertificate);
    pub fn purple_certificate_destroy_list(crt_list: *mut GList);
    pub fn purple_certificate_signed_by(crt: *mut PurpleCertificate,
                                        issuer: *mut PurpleCertificate)
     -> gboolean;
    pub fn purple_certificate_check_signature_chain_with_failing(chain:
                                                                     *mut GList,
                                                                 failing:
                                                                     *mut *mut PurpleCertificate)
     -> gboolean;
    pub fn purple_certificate_check_signature_chain(chain: *mut GList)
     -> gboolean;
    pub fn purple_certificate_import(scheme: *mut PurpleCertificateScheme,
                                     filename: *const gchar)
     -> *mut PurpleCertificate;
    pub fn purple_certificates_import(scheme: *mut PurpleCertificateScheme,
                                      filename: *const gchar) -> *mut GSList;
    pub fn purple_certificate_export(filename: *const gchar,
                                     crt: *mut PurpleCertificate) -> gboolean;
    pub fn purple_certificate_get_fingerprint_sha1(crt:
                                                       *mut PurpleCertificate)
     -> *mut GByteArray;
    pub fn purple_certificate_get_unique_id(crt: *mut PurpleCertificate)
     -> *mut gchar;
    pub fn purple_certificate_get_issuer_unique_id(crt:
                                                       *mut PurpleCertificate)
     -> *mut gchar;
    pub fn purple_certificate_get_subject_name(crt: *mut PurpleCertificate)
     -> *mut gchar;
    pub fn purple_certificate_check_subject_name(crt: *mut PurpleCertificate,
                                                 name: *const gchar)
     -> gboolean;
    pub fn purple_certificate_get_times(crt: *mut PurpleCertificate,
                                        activation: *mut time_t,
                                        expiration: *mut time_t) -> gboolean;
    pub fn purple_certificate_pool_mkpath(pool: *mut PurpleCertificatePool,
                                          id: *const gchar) -> *mut gchar;
    pub fn purple_certificate_pool_usable(pool: *mut PurpleCertificatePool)
     -> gboolean;
    pub fn purple_certificate_pool_get_scheme(pool:
                                                  *mut PurpleCertificatePool)
     -> *mut PurpleCertificateScheme;
    pub fn purple_certificate_pool_contains(pool: *mut PurpleCertificatePool,
                                            id: *const gchar) -> gboolean;
    pub fn purple_certificate_pool_retrieve(pool: *mut PurpleCertificatePool,
                                            id: *const gchar)
     -> *mut PurpleCertificate;
    pub fn purple_certificate_pool_store(pool: *mut PurpleCertificatePool,
                                         id: *const gchar,
                                         crt: *mut PurpleCertificate)
     -> gboolean;
    pub fn purple_certificate_pool_delete(pool: *mut PurpleCertificatePool,
                                          id: *const gchar) -> gboolean;
    pub fn purple_certificate_pool_get_idlist(pool:
                                                  *mut PurpleCertificatePool)
     -> *mut GList;
    pub fn purple_certificate_pool_destroy_idlist(idlist: *mut GList);
    pub fn purple_certificate_init();
    pub fn purple_certificate_uninit();
    pub fn purple_certificate_get_handle() -> gpointer;
    pub fn purple_certificate_find_scheme(name: *const gchar)
     -> *mut PurpleCertificateScheme;
    pub fn purple_certificate_get_schemes() -> *mut GList;
    pub fn purple_certificate_register_scheme(scheme:
                                                  *mut PurpleCertificateScheme)
     -> gboolean;
    pub fn purple_certificate_unregister_scheme(scheme:
                                                    *mut PurpleCertificateScheme)
     -> gboolean;
    pub fn purple_certificate_find_verifier(scheme_name: *const gchar,
                                            ver_name: *const gchar)
     -> *mut PurpleCertificateVerifier;
    pub fn purple_certificate_get_verifiers() -> *mut GList;
    pub fn purple_certificate_register_verifier(vr:
                                                    *mut PurpleCertificateVerifier)
     -> gboolean;
    pub fn purple_certificate_unregister_verifier(vr:
                                                      *mut PurpleCertificateVerifier)
     -> gboolean;
    pub fn purple_certificate_find_pool(scheme_name: *const gchar,
                                        pool_name: *const gchar)
     -> *mut PurpleCertificatePool;
    pub fn purple_certificate_get_pools() -> *mut GList;
    pub fn purple_certificate_register_pool(pool: *mut PurpleCertificatePool)
     -> gboolean;
    pub fn purple_certificate_unregister_pool(pool:
                                                  *mut PurpleCertificatePool)
     -> gboolean;
    pub fn purple_certificate_display_x509(crt: *mut PurpleCertificate);
    pub fn purple_certificate_add_ca_search_path(path:
                                                     *const ::std::os::raw::c_char);
    pub fn purple_ssl_is_supported() -> gboolean;
    pub fn purple_ssl_strerror(error: PurpleSslErrorType) -> *const gchar;
    pub fn purple_ssl_connect(account: *mut PurpleAccount,
                              host: *const ::std::os::raw::c_char,
                              port: ::std::os::raw::c_int,
                              func: PurpleSslInputFunction,
                              error_func: PurpleSslErrorFunction,
                              data: *mut ::std::os::raw::c_void)
     -> *mut PurpleSslConnection;
    pub fn purple_ssl_connect_with_ssl_cn(account: *mut PurpleAccount,
                                          host: *const ::std::os::raw::c_char,
                                          port: ::std::os::raw::c_int,
                                          func: PurpleSslInputFunction,
                                          error_func: PurpleSslErrorFunction,
                                          ssl_host:
                                              *const ::std::os::raw::c_char,
                                          data: *mut ::std::os::raw::c_void)
     -> *mut PurpleSslConnection;
    pub fn purple_ssl_connect_fd(account: *mut PurpleAccount,
                                 fd: ::std::os::raw::c_int,
                                 func: PurpleSslInputFunction,
                                 error_func: PurpleSslErrorFunction,
                                 data: *mut ::std::os::raw::c_void)
     -> *mut PurpleSslConnection;
    pub fn purple_ssl_connect_with_host_fd(account: *mut PurpleAccount,
                                           fd: ::std::os::raw::c_int,
                                           func: PurpleSslInputFunction,
                                           error_func: PurpleSslErrorFunction,
                                           host:
                                               *const ::std::os::raw::c_char,
                                           data: *mut ::std::os::raw::c_void)
     -> *mut PurpleSslConnection;
    pub fn purple_ssl_input_add(gsc: *mut PurpleSslConnection,
                                func: PurpleSslInputFunction,
                                data: *mut ::std::os::raw::c_void);
    pub fn purple_ssl_close(gsc: *mut PurpleSslConnection);
    pub fn purple_ssl_read(gsc: *mut PurpleSslConnection,
                           buffer: *mut ::std::os::raw::c_void, len: size_t)
     -> size_t;
    pub fn purple_ssl_write(gsc: *mut PurpleSslConnection,
                            buffer: *const ::std::os::raw::c_void,
                            len: size_t) -> size_t;
    pub fn purple_ssl_get_peer_certificates(gsc: *mut PurpleSslConnection)
     -> *mut GList;
    pub fn purple_ssl_set_ops(ops: *mut PurpleSslOps);
    pub fn purple_ssl_get_ops() -> *mut PurpleSslOps;
    pub fn purple_ssl_init();
    pub fn purple_ssl_uninit();
    pub fn purple_connection_new(account: *mut PurpleAccount,
                                 regist: gboolean,
                                 password: *const ::std::os::raw::c_char);
    pub fn purple_connection_new_unregister(account: *mut PurpleAccount,
                                            password:
                                                *const ::std::os::raw::c_char,
                                            cb: PurpleAccountUnregistrationCb,
                                            user_data:
                                                *mut ::std::os::raw::c_void);
    pub fn purple_connection_destroy(gc: *mut PurpleConnection);
    pub fn purple_connection_set_state(gc: *mut PurpleConnection,
                                       state: PurpleConnectionState);
    pub fn purple_connection_set_account(gc: *mut PurpleConnection,
                                         account: *mut PurpleAccount);
    pub fn purple_connection_set_display_name(gc: *mut PurpleConnection,
                                              name:
                                                  *const ::std::os::raw::c_char);
    pub fn purple_connection_set_protocol_data(connection:
                                                   *mut PurpleConnection,
                                               proto_data:
                                                   *mut ::std::os::raw::c_void);
    pub fn purple_connection_get_state(gc: *const PurpleConnection)
     -> PurpleConnectionState;
    pub fn purple_connection_get_account(gc: *const PurpleConnection)
     -> *mut PurpleAccount;
    pub fn purple_connection_get_prpl(gc: *const PurpleConnection)
     -> *mut PurplePlugin;
    pub fn purple_connection_get_password(gc: *const PurpleConnection)
     -> *const ::std::os::raw::c_char;
    pub fn purple_connection_get_display_name(gc: *const PurpleConnection)
     -> *const ::std::os::raw::c_char;
    pub fn purple_connection_get_protocol_data(connection:
                                                   *const PurpleConnection)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_connection_update_progress(gc: *mut PurpleConnection,
                                             text:
                                                 *const ::std::os::raw::c_char,
                                             step: size_t, count: size_t);
    pub fn purple_connection_notice(gc: *mut PurpleConnection,
                                    text: *const ::std::os::raw::c_char);
    pub fn purple_connection_error(gc: *mut PurpleConnection,
                                   reason: *const ::std::os::raw::c_char);
    pub fn purple_connection_error_reason(gc: *mut PurpleConnection,
                                          reason: PurpleConnectionError,
                                          description:
                                              *const ::std::os::raw::c_char);
    pub fn purple_connection_ssl_error(gc: *mut PurpleConnection,
                                       ssl_error: PurpleSslErrorType);
    pub fn purple_connection_error_is_fatal(reason: PurpleConnectionError)
     -> gboolean;
    pub fn purple_connections_disconnect_all();
    pub fn purple_connections_get_all() -> *mut GList;
    pub fn purple_connections_get_connecting() -> *mut GList;
    pub fn purple_connections_set_ui_ops(ops: *mut PurpleConnectionUiOps);
    pub fn purple_connections_get_ui_ops() -> *mut PurpleConnectionUiOps;
    pub fn purple_connections_init();
    pub fn purple_connections_uninit();
    pub fn purple_connections_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_privacy_permit_add(account: *mut PurpleAccount,
                                     name: *const ::std::os::raw::c_char,
                                     local_only: gboolean) -> gboolean;
    pub fn purple_privacy_permit_remove(account: *mut PurpleAccount,
                                        name: *const ::std::os::raw::c_char,
                                        local_only: gboolean) -> gboolean;
    pub fn purple_privacy_deny_add(account: *mut PurpleAccount,
                                   name: *const ::std::os::raw::c_char,
                                   local_only: gboolean) -> gboolean;
    pub fn purple_privacy_deny_remove(account: *mut PurpleAccount,
                                      name: *const ::std::os::raw::c_char,
                                      local_only: gboolean) -> gboolean;
    pub fn purple_privacy_allow(account: *mut PurpleAccount,
                                who: *const ::std::os::raw::c_char,
                                local: gboolean, restore: gboolean);
    pub fn purple_privacy_deny(account: *mut PurpleAccount,
                               who: *const ::std::os::raw::c_char,
                               local: gboolean, restore: gboolean);
    pub fn purple_privacy_check(account: *mut PurpleAccount,
                                who: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_privacy_set_ui_ops(ops: *mut PurplePrivacyUiOps);
    pub fn purple_privacy_get_ui_ops() -> *mut PurplePrivacyUiOps;
    pub fn purple_privacy_init();
    pub fn purple_account_new(username: *const ::std::os::raw::c_char,
                              protocol_id: *const ::std::os::raw::c_char)
     -> *mut PurpleAccount;
    pub fn purple_account_destroy(account: *mut PurpleAccount);
    pub fn purple_account_connect(account: *mut PurpleAccount);
    pub fn purple_account_set_register_callback(account: *mut PurpleAccount,
                                                cb:
                                                    PurpleAccountRegistrationCb,
                                                user_data:
                                                    *mut ::std::os::raw::c_void);
    pub fn purple_account_register(account: *mut PurpleAccount);
    pub fn purple_account_unregister(account: *mut PurpleAccount,
                                     cb: PurpleAccountUnregistrationCb,
                                     user_data: *mut ::std::os::raw::c_void);
    pub fn purple_account_disconnect(account: *mut PurpleAccount);
    pub fn purple_account_notify_added(account: *mut PurpleAccount,
                                       remote_user:
                                           *const ::std::os::raw::c_char,
                                       id: *const ::std::os::raw::c_char,
                                       alias: *const ::std::os::raw::c_char,
                                       message:
                                           *const ::std::os::raw::c_char);
    pub fn purple_account_request_add(account: *mut PurpleAccount,
                                      remote_user:
                                          *const ::std::os::raw::c_char,
                                      id: *const ::std::os::raw::c_char,
                                      alias: *const ::std::os::raw::c_char,
                                      message: *const ::std::os::raw::c_char);
    pub fn purple_account_request_authorization(account: *mut PurpleAccount,
                                                remote_user:
                                                    *const ::std::os::raw::c_char,
                                                id:
                                                    *const ::std::os::raw::c_char,
                                                alias:
                                                    *const ::std::os::raw::c_char,
                                                message:
                                                    *const ::std::os::raw::c_char,
                                                on_list: gboolean,
                                                auth_cb:
                                                    PurpleAccountRequestAuthorizationCb,
                                                deny_cb:
                                                    PurpleAccountRequestAuthorizationCb,
                                                user_data:
                                                    *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_account_request_close_with_account(account:
                                                         *mut PurpleAccount);
    pub fn purple_account_request_close(ui_handle:
                                            *mut ::std::os::raw::c_void);
    pub fn purple_account_request_password(account: *mut PurpleAccount,
                                           ok_cb: GCallback,
                                           cancel_cb: GCallback,
                                           user_data:
                                               *mut ::std::os::raw::c_void);
    pub fn purple_account_request_change_password(account:
                                                      *mut PurpleAccount);
    pub fn purple_account_request_change_user_info(account:
                                                       *mut PurpleAccount);
    pub fn purple_account_set_username(account: *mut PurpleAccount,
                                       username:
                                           *const ::std::os::raw::c_char);
    pub fn purple_account_set_password(account: *mut PurpleAccount,
                                       password:
                                           *const ::std::os::raw::c_char);
    pub fn purple_account_set_alias(account: *mut PurpleAccount,
                                    alias: *const ::std::os::raw::c_char);
    pub fn purple_account_set_user_info(account: *mut PurpleAccount,
                                        user_info:
                                            *const ::std::os::raw::c_char);
    pub fn purple_account_set_buddy_icon_path(account: *mut PurpleAccount,
                                              path:
                                                  *const ::std::os::raw::c_char);
    pub fn purple_account_set_protocol_id(account: *mut PurpleAccount,
                                          protocol_id:
                                              *const ::std::os::raw::c_char);
    pub fn purple_account_set_connection(account: *mut PurpleAccount,
                                         gc: *mut PurpleConnection);
    pub fn purple_account_set_remember_password(account: *mut PurpleAccount,
                                                value: gboolean);
    pub fn purple_account_set_check_mail(account: *mut PurpleAccount,
                                         value: gboolean);
    pub fn purple_account_set_enabled(account: *mut PurpleAccount,
                                      ui: *const ::std::os::raw::c_char,
                                      value: gboolean);
    pub fn purple_account_set_proxy_info(account: *mut PurpleAccount,
                                         info: *mut PurpleProxyInfo);
    pub fn purple_account_set_privacy_type(account: *mut PurpleAccount,
                                           privacy_type: PurplePrivacyType);
    pub fn purple_account_set_status_types(account: *mut PurpleAccount,
                                           status_types: *mut GList);
    pub fn purple_account_set_status(account: *mut PurpleAccount,
                                     status_id: *const ::std::os::raw::c_char,
                                     active: gboolean, ...);
    pub fn purple_account_set_status_list(account: *mut PurpleAccount,
                                          status_id:
                                              *const ::std::os::raw::c_char,
                                          active: gboolean,
                                          attrs: *mut GList);
    pub fn purple_account_set_public_alias(account: *mut PurpleAccount,
                                           alias:
                                               *const ::std::os::raw::c_char,
                                           success_cb:
                                               PurpleSetPublicAliasSuccessCallback,
                                           failure_cb:
                                               PurpleSetPublicAliasFailureCallback);
    pub fn purple_account_get_public_alias(account: *mut PurpleAccount,
                                           success_cb:
                                               PurpleGetPublicAliasSuccessCallback,
                                           failure_cb:
                                               PurpleGetPublicAliasFailureCallback);
    pub fn purple_account_get_silence_suppression(account:
                                                      *const PurpleAccount)
     -> gboolean;
    pub fn purple_account_set_silence_suppression(account: *mut PurpleAccount,
                                                  value: gboolean);
    pub fn purple_account_clear_settings(account: *mut PurpleAccount);
    pub fn purple_account_remove_setting(account: *mut PurpleAccount,
                                         setting:
                                             *const ::std::os::raw::c_char);
    pub fn purple_account_set_int(account: *mut PurpleAccount,
                                  name: *const ::std::os::raw::c_char,
                                  value: ::std::os::raw::c_int);
    pub fn purple_account_set_string(account: *mut PurpleAccount,
                                     name: *const ::std::os::raw::c_char,
                                     value: *const ::std::os::raw::c_char);
    pub fn purple_account_set_bool(account: *mut PurpleAccount,
                                   name: *const ::std::os::raw::c_char,
                                   value: gboolean);
    pub fn purple_account_set_ui_int(account: *mut PurpleAccount,
                                     ui: *const ::std::os::raw::c_char,
                                     name: *const ::std::os::raw::c_char,
                                     value: ::std::os::raw::c_int);
    pub fn purple_account_set_ui_string(account: *mut PurpleAccount,
                                        ui: *const ::std::os::raw::c_char,
                                        name: *const ::std::os::raw::c_char,
                                        value: *const ::std::os::raw::c_char);
    pub fn purple_account_set_ui_bool(account: *mut PurpleAccount,
                                      ui: *const ::std::os::raw::c_char,
                                      name: *const ::std::os::raw::c_char,
                                      value: gboolean);
    pub fn purple_account_is_connected(account: *const PurpleAccount)
     -> gboolean;
    pub fn purple_account_is_connecting(account: *const PurpleAccount)
     -> gboolean;
    pub fn purple_account_is_disconnected(account: *const PurpleAccount)
     -> gboolean;
    pub fn purple_account_get_username(account: *const PurpleAccount)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_get_password(account: *const PurpleAccount)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_get_alias(account: *const PurpleAccount)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_get_user_info(account: *const PurpleAccount)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_get_buddy_icon_path(account: *const PurpleAccount)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_get_protocol_id(account: *const PurpleAccount)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_get_protocol_name(account: *const PurpleAccount)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_get_connection(account: *const PurpleAccount)
     -> *mut PurpleConnection;
    pub fn purple_account_get_name_for_display(account: *const PurpleAccount)
     -> *const gchar;
    pub fn purple_account_get_remember_password(account: *const PurpleAccount)
     -> gboolean;
    pub fn purple_account_get_check_mail(account: *const PurpleAccount)
     -> gboolean;
    pub fn purple_account_get_enabled(account: *const PurpleAccount,
                                      ui: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_account_get_proxy_info(account: *const PurpleAccount)
     -> *mut PurpleProxyInfo;
    pub fn purple_account_get_privacy_type(account: *const PurpleAccount)
     -> PurplePrivacyType;
    pub fn purple_account_get_active_status(account: *const PurpleAccount)
     -> *mut PurpleStatus;
    pub fn purple_account_get_status(account: *const PurpleAccount,
                                     status_id: *const ::std::os::raw::c_char)
     -> *mut PurpleStatus;
    pub fn purple_account_get_status_type(account: *const PurpleAccount,
                                          id: *const ::std::os::raw::c_char)
     -> *mut PurpleStatusType;
    pub fn purple_account_get_status_type_with_primitive(account:
                                                             *const PurpleAccount,
                                                         primitive:
                                                             PurpleStatusPrimitive)
     -> *mut PurpleStatusType;
    pub fn purple_account_get_presence(account: *const PurpleAccount)
     -> *mut PurplePresence;
    pub fn purple_account_is_status_active(account: *const PurpleAccount,
                                           status_id:
                                               *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_account_get_status_types(account: *const PurpleAccount)
     -> *mut GList;
    pub fn purple_account_get_int(account: *const PurpleAccount,
                                  name: *const ::std::os::raw::c_char,
                                  default_value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn purple_account_get_string(account: *const PurpleAccount,
                                     name: *const ::std::os::raw::c_char,
                                     default_value:
                                         *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_get_bool(account: *const PurpleAccount,
                                   name: *const ::std::os::raw::c_char,
                                   default_value: gboolean) -> gboolean;
    pub fn purple_account_get_ui_int(account: *const PurpleAccount,
                                     ui: *const ::std::os::raw::c_char,
                                     name: *const ::std::os::raw::c_char,
                                     default_value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn purple_account_get_ui_string(account: *const PurpleAccount,
                                        ui: *const ::std::os::raw::c_char,
                                        name: *const ::std::os::raw::c_char,
                                        default_value:
                                            *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_get_ui_bool(account: *const PurpleAccount,
                                      ui: *const ::std::os::raw::c_char,
                                      name: *const ::std::os::raw::c_char,
                                      default_value: gboolean) -> gboolean;
    pub fn purple_account_get_log(account: *mut PurpleAccount,
                                  create: gboolean) -> *mut PurpleLog;
    pub fn purple_account_destroy_log(account: *mut PurpleAccount);
    pub fn purple_account_add_buddy(account: *mut PurpleAccount,
                                    buddy: *mut PurpleBuddy);
    pub fn purple_account_add_buddy_with_invite(account: *mut PurpleAccount,
                                                buddy: *mut PurpleBuddy,
                                                message:
                                                    *const ::std::os::raw::c_char);
    pub fn purple_account_add_buddies(account: *mut PurpleAccount,
                                      buddies: *mut GList);
    pub fn purple_account_add_buddies_with_invite(account: *mut PurpleAccount,
                                                  buddies: *mut GList,
                                                  message:
                                                      *const ::std::os::raw::c_char);
    pub fn purple_account_remove_buddy(account: *mut PurpleAccount,
                                       buddy: *mut PurpleBuddy,
                                       group: *mut PurpleGroup);
    pub fn purple_account_remove_buddies(account: *mut PurpleAccount,
                                         buddies: *mut GList,
                                         groups: *mut GList);
    pub fn purple_account_remove_group(account: *mut PurpleAccount,
                                       group: *mut PurpleGroup);
    pub fn purple_account_change_password(account: *mut PurpleAccount,
                                          orig_pw:
                                              *const ::std::os::raw::c_char,
                                          new_pw:
                                              *const ::std::os::raw::c_char);
    pub fn purple_account_supports_offline_message(account:
                                                       *mut PurpleAccount,
                                                   buddy: *mut PurpleBuddy)
     -> gboolean;
    pub fn purple_account_get_current_error(account: *mut PurpleAccount)
     -> *const PurpleConnectionErrorInfo;
    pub fn purple_account_clear_current_error(account: *mut PurpleAccount);
    pub fn purple_accounts_add(account: *mut PurpleAccount);
    pub fn purple_accounts_remove(account: *mut PurpleAccount);
    pub fn purple_accounts_delete(account: *mut PurpleAccount);
    pub fn purple_accounts_reorder(account: *mut PurpleAccount,
                                   new_index: gint);
    pub fn purple_accounts_get_all() -> *mut GList;
    pub fn purple_accounts_get_all_active() -> *mut GList;
    pub fn purple_accounts_find(name: *const ::std::os::raw::c_char,
                                protocol: *const ::std::os::raw::c_char)
     -> *mut PurpleAccount;
    pub fn purple_accounts_restore_current_statuses();
    pub fn purple_accounts_set_ui_ops(ops: *mut PurpleAccountUiOps);
    pub fn purple_accounts_get_ui_ops() -> *mut PurpleAccountUiOps;
    pub fn purple_accounts_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_accounts_init();
    pub fn purple_accounts_uninit();
    pub fn purple_account_option_new(_type: PurplePrefType,
                                     text: *const ::std::os::raw::c_char,
                                     pref_name: *const ::std::os::raw::c_char)
     -> *mut PurpleAccountOption;
    pub fn purple_account_option_bool_new(text: *const ::std::os::raw::c_char,
                                          pref_name:
                                              *const ::std::os::raw::c_char,
                                          default_value: gboolean)
     -> *mut PurpleAccountOption;
    pub fn purple_account_option_int_new(text: *const ::std::os::raw::c_char,
                                         pref_name:
                                             *const ::std::os::raw::c_char,
                                         default_value: ::std::os::raw::c_int)
     -> *mut PurpleAccountOption;
    pub fn purple_account_option_string_new(text:
                                                *const ::std::os::raw::c_char,
                                            pref_name:
                                                *const ::std::os::raw::c_char,
                                            default_value:
                                                *const ::std::os::raw::c_char)
     -> *mut PurpleAccountOption;
    pub fn purple_account_option_list_new(text: *const ::std::os::raw::c_char,
                                          pref_name:
                                              *const ::std::os::raw::c_char,
                                          list: *mut GList)
     -> *mut PurpleAccountOption;
    pub fn purple_account_option_destroy(option: *mut PurpleAccountOption);
    pub fn purple_account_option_set_default_bool(option:
                                                      *mut PurpleAccountOption,
                                                  value: gboolean);
    pub fn purple_account_option_set_default_int(option:
                                                     *mut PurpleAccountOption,
                                                 value:
                                                     ::std::os::raw::c_int);
    pub fn purple_account_option_set_default_string(option:
                                                        *mut PurpleAccountOption,
                                                    value:
                                                        *const ::std::os::raw::c_char);
    pub fn purple_account_option_set_masked(option: *mut PurpleAccountOption,
                                            masked: gboolean);
    pub fn purple_account_option_set_list(option: *mut PurpleAccountOption,
                                          values: *mut GList);
    pub fn purple_account_option_add_list_item(option:
                                                   *mut PurpleAccountOption,
                                               key:
                                                   *const ::std::os::raw::c_char,
                                               value:
                                                   *const ::std::os::raw::c_char);
    pub fn purple_account_option_get_type(option: *const PurpleAccountOption)
     -> PurplePrefType;
    pub fn purple_account_option_get_text(option: *const PurpleAccountOption)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_option_get_setting(option:
                                                 *const PurpleAccountOption)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_option_get_default_bool(option:
                                                      *const PurpleAccountOption)
     -> gboolean;
    pub fn purple_account_option_get_default_int(option:
                                                     *const PurpleAccountOption)
     -> ::std::os::raw::c_int;
    pub fn purple_account_option_get_default_string(option:
                                                        *const PurpleAccountOption)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_option_get_default_list_value(option:
                                                            *const PurpleAccountOption)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_option_get_masked(option:
                                                *const PurpleAccountOption)
     -> gboolean;
    pub fn purple_account_option_get_list(option: *const PurpleAccountOption)
     -> *mut GList;
    pub fn purple_account_user_split_new(text: *const ::std::os::raw::c_char,
                                         default_value:
                                             *const ::std::os::raw::c_char,
                                         sep: ::std::os::raw::c_char)
     -> *mut PurpleAccountUserSplit;
    pub fn purple_account_user_split_destroy(split:
                                                 *mut PurpleAccountUserSplit);
    pub fn purple_account_user_split_get_text(split:
                                                  *const PurpleAccountUserSplit)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_user_split_get_default_value(split:
                                                           *const PurpleAccountUserSplit)
     -> *const ::std::os::raw::c_char;
    pub fn purple_account_user_split_get_separator(split:
                                                       *const PurpleAccountUserSplit)
     -> ::std::os::raw::c_char;
    pub fn purple_account_user_split_get_reverse(split:
                                                     *const PurpleAccountUserSplit)
     -> gboolean;
    pub fn purple_account_user_split_set_reverse(split:
                                                     *mut PurpleAccountUserSplit,
                                                 reverse: gboolean);
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> size_t;
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char) -> size_t;
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char) -> size_t;
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> size_t;
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: size_t)
     -> ::std::os::raw::c_int;
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_cipher_get_name(cipher: *mut PurpleCipher) -> *const gchar;
    pub fn purple_cipher_get_capabilities(cipher: *mut PurpleCipher) -> guint;
    pub fn purple_cipher_digest_region(name: *const gchar,
                                       data: *const guchar, data_len: size_t,
                                       in_len: size_t, digest: *mut guchar,
                                       out_len: *mut size_t) -> gboolean;
    pub fn purple_ciphers_find_cipher(name: *const gchar)
     -> *mut PurpleCipher;
    pub fn purple_ciphers_register_cipher(name: *const gchar,
                                          ops: *mut PurpleCipherOps)
     -> *mut PurpleCipher;
    pub fn purple_ciphers_unregister_cipher(cipher: *mut PurpleCipher)
     -> gboolean;
    pub fn purple_ciphers_get_ciphers() -> *mut GList;
    pub fn purple_ciphers_get_handle() -> gpointer;
    pub fn purple_ciphers_init();
    pub fn purple_ciphers_uninit();
    pub fn purple_cipher_context_set_option(context: *mut PurpleCipherContext,
                                            name: *const gchar,
                                            value: gpointer);
    pub fn purple_cipher_context_get_option(context: *mut PurpleCipherContext,
                                            name: *const gchar) -> gpointer;
    pub fn purple_cipher_context_new(cipher: *mut PurpleCipher,
                                     extra: *mut ::std::os::raw::c_void)
     -> *mut PurpleCipherContext;
    pub fn purple_cipher_context_new_by_name(name: *const gchar,
                                             extra:
                                                 *mut ::std::os::raw::c_void)
     -> *mut PurpleCipherContext;
    pub fn purple_cipher_context_reset(context: *mut PurpleCipherContext,
                                       extra: gpointer);
    pub fn purple_cipher_context_destroy(context: *mut PurpleCipherContext);
    pub fn purple_cipher_context_set_iv(context: *mut PurpleCipherContext,
                                        iv: *mut guchar, len: size_t);
    pub fn purple_cipher_context_append(context: *mut PurpleCipherContext,
                                        data: *const guchar, len: size_t);
    pub fn purple_cipher_context_digest(context: *mut PurpleCipherContext,
                                        in_len: size_t, digest: *mut guchar,
                                        out_len: *mut size_t) -> gboolean;
    pub fn purple_cipher_context_digest_to_str(context:
                                                   *mut PurpleCipherContext,
                                               in_len: size_t,
                                               digest_s: *mut gchar,
                                               out_len: *mut size_t)
     -> gboolean;
    pub fn purple_cipher_context_encrypt(context: *mut PurpleCipherContext,
                                         data: *const guchar, len: size_t,
                                         output: *mut guchar,
                                         outlen: *mut size_t) -> gint;
    pub fn purple_cipher_context_decrypt(context: *mut PurpleCipherContext,
                                         data: *const guchar, len: size_t,
                                         output: *mut guchar,
                                         outlen: *mut size_t) -> gint;
    pub fn purple_cipher_context_set_salt(context: *mut PurpleCipherContext,
                                          salt: *mut guchar);
    pub fn purple_cipher_context_get_salt_size(context:
                                                   *mut PurpleCipherContext)
     -> size_t;
    pub fn purple_cipher_context_set_key(context: *mut PurpleCipherContext,
                                         key: *const guchar);
    pub fn purple_cipher_context_get_key_size(context:
                                                  *mut PurpleCipherContext)
     -> size_t;
    pub fn purple_cipher_context_set_batch_mode(context:
                                                    *mut PurpleCipherContext,
                                                mode: PurpleCipherBatchMode);
    pub fn purple_cipher_context_get_batch_mode(context:
                                                    *mut PurpleCipherContext)
     -> PurpleCipherBatchMode;
    pub fn purple_cipher_context_get_block_size(context:
                                                    *mut PurpleCipherContext)
     -> size_t;
    pub fn purple_cipher_context_set_key_with_len(context:
                                                      *mut PurpleCipherContext,
                                                  key: *const guchar,
                                                  len: size_t);
    pub fn purple_cipher_context_set_data(context: *mut PurpleCipherContext,
                                          data: gpointer);
    pub fn purple_cipher_context_get_data(context: *mut PurpleCipherContext)
     -> gpointer;
    pub fn purple_cipher_http_digest_calculate_session_key(algorithm:
                                                               *const gchar,
                                                           username:
                                                               *const gchar,
                                                           realm:
                                                               *const gchar,
                                                           password:
                                                               *const gchar,
                                                           nonce:
                                                               *const gchar,
                                                           client_nonce:
                                                               *const gchar)
     -> *mut gchar;
    pub fn purple_cipher_http_digest_calculate_response(algorithm:
                                                            *const gchar,
                                                        method: *const gchar,
                                                        digest_uri:
                                                            *const gchar,
                                                        qop: *const gchar,
                                                        entity: *const gchar,
                                                        nonce: *const gchar,
                                                        nonce_count:
                                                            *const gchar,
                                                        client_nonce:
                                                            *const gchar,
                                                        session_key:
                                                            *const gchar)
     -> *mut gchar;
    pub fn purple_circ_buffer_new(growsize: gsize) -> *mut PurpleCircBuffer;
    pub fn purple_circ_buffer_destroy(buf: *mut PurpleCircBuffer);
    pub fn purple_circ_buffer_append(buf: *mut PurpleCircBuffer,
                                     src: gconstpointer, len: gsize);
    pub fn purple_circ_buffer_get_max_read(buf: *const PurpleCircBuffer)
     -> gsize;
    pub fn purple_circ_buffer_mark_read(buf: *mut PurpleCircBuffer,
                                        len: gsize) -> gboolean;
    pub fn purple_cmd_register(cmd: *const gchar, args: *const gchar,
                               p: PurpleCmdPriority, f: PurpleCmdFlag,
                               prpl_id: *const gchar, func: PurpleCmdFunc,
                               helpstr: *const gchar,
                               data: *mut ::std::os::raw::c_void)
     -> PurpleCmdId;
    pub fn purple_cmd_unregister(id: PurpleCmdId);
    pub fn purple_cmd_do_command(conv: *mut PurpleConversation,
                                 cmdline: *const gchar, markup: *const gchar,
                                 errormsg: *mut *mut gchar)
     -> PurpleCmdStatus;
    pub fn purple_cmd_list(conv: *mut PurpleConversation) -> *mut GList;
    pub fn purple_cmd_help(conv: *mut PurpleConversation, cmd: *const gchar)
     -> *mut GList;
    pub fn purple_cmds_get_handle() -> gpointer;
    pub fn purple_cmds_init();
    pub fn purple_cmds_uninit();
    pub fn purple_core_init(ui: *const ::std::os::raw::c_char) -> gboolean;
    pub fn purple_core_quit();
    pub fn purple_core_quit_cb(unused: gpointer) -> gboolean;
    pub fn purple_core_get_version() -> *const ::std::os::raw::c_char;
    pub fn purple_core_get_ui() -> *const ::std::os::raw::c_char;
    pub fn purple_get_core() -> *mut PurpleCore;
    pub fn purple_core_set_ui_ops(ops: *mut PurpleCoreUiOps);
    pub fn purple_core_get_ui_ops() -> *mut PurpleCoreUiOps;
    pub fn purple_core_migrate() -> gboolean;
    pub fn purple_core_ensure_single_instance() -> gboolean;
    pub fn purple_core_get_ui_info() -> *mut GHashTable;
    pub fn purple_debug(level: PurpleDebugLevel,
                        category: *const ::std::os::raw::c_char,
                        format: *const ::std::os::raw::c_char, ...);
    pub fn purple_debug_misc(category: *const ::std::os::raw::c_char,
                             format: *const ::std::os::raw::c_char, ...);
    pub fn purple_debug_info(category: *const ::std::os::raw::c_char,
                             format: *const ::std::os::raw::c_char, ...);
    pub fn purple_debug_warning(category: *const ::std::os::raw::c_char,
                                format: *const ::std::os::raw::c_char, ...);
    pub fn purple_debug_error(category: *const ::std::os::raw::c_char,
                              format: *const ::std::os::raw::c_char, ...);
    pub fn purple_debug_fatal(category: *const ::std::os::raw::c_char,
                              format: *const ::std::os::raw::c_char, ...);
    pub fn purple_debug_set_enabled(enabled: gboolean);
    pub fn purple_debug_is_enabled() -> gboolean;
    pub fn purple_debug_set_verbose(verbose: gboolean);
    pub fn purple_debug_is_verbose() -> gboolean;
    pub fn purple_debug_set_unsafe(_unsafe: gboolean);
    pub fn purple_debug_is_unsafe() -> gboolean;
    pub fn purple_debug_set_ui_ops(ops: *mut PurpleDebugUiOps);
    pub fn purple_debug_get_ui_ops() -> *mut PurpleDebugUiOps;
    pub fn purple_debug_init();
    pub fn purple_desktop_item_get_type() -> GType;
    pub fn purple_desktop_item_new_from_file(filename:
                                                 *const ::std::os::raw::c_char)
     -> *mut PurpleDesktopItem;
    pub fn purple_desktop_item_get_entry_type(item: *const PurpleDesktopItem)
     -> PurpleDesktopItemType;
    pub fn purple_desktop_item_get_string(item: *const PurpleDesktopItem,
                                          attr: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_desktop_item_copy(item: *const PurpleDesktopItem)
     -> *mut PurpleDesktopItem;
    pub fn purple_desktop_item_unref(item: *mut PurpleDesktopItem);
    pub fn purple_dnsquery_a_account(account: *mut PurpleAccount,
                                     hostname: *const ::std::os::raw::c_char,
                                     port: ::std::os::raw::c_int,
                                     callback: PurpleDnsQueryConnectFunction,
                                     data: gpointer)
     -> *mut PurpleDnsQueryData;
    pub fn purple_dnsquery_a(hostname: *const ::std::os::raw::c_char,
                             port: ::std::os::raw::c_int,
                             callback: PurpleDnsQueryConnectFunction,
                             data: gpointer) -> *mut PurpleDnsQueryData;
    pub fn purple_dnsquery_destroy(query_data: *mut PurpleDnsQueryData);
    pub fn purple_dnsquery_set_ui_ops(ops: *mut PurpleDnsQueryUiOps);
    pub fn purple_dnsquery_get_ui_ops() -> *mut PurpleDnsQueryUiOps;
    pub fn purple_dnsquery_get_host(query_data: *mut PurpleDnsQueryData)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_dnsquery_get_port(query_data: *mut PurpleDnsQueryData)
     -> ::std::os::raw::c_ushort;
    pub fn purple_dnsquery_init();
    pub fn purple_dnsquery_uninit();
    pub fn purple_srv_resolve_account(account: *mut PurpleAccount,
                                      protocol: *const ::std::os::raw::c_char,
                                      transport:
                                          *const ::std::os::raw::c_char,
                                      domain: *const ::std::os::raw::c_char,
                                      cb: PurpleSrvCallback,
                                      extradata: gpointer)
     -> *mut PurpleSrvTxtQueryData;
    pub fn purple_srv_resolve(protocol: *const ::std::os::raw::c_char,
                              transport: *const ::std::os::raw::c_char,
                              domain: *const ::std::os::raw::c_char,
                              cb: PurpleSrvCallback, extradata: gpointer)
     -> *mut PurpleSrvTxtQueryData;
    pub fn purple_srv_cancel(query_data: *mut PurpleSrvTxtQueryData);
    pub fn purple_txt_resolve_account(account: *mut PurpleAccount,
                                      owner: *const ::std::os::raw::c_char,
                                      domain: *const ::std::os::raw::c_char,
                                      cb: PurpleTxtCallback,
                                      extradata: gpointer)
     -> *mut PurpleSrvTxtQueryData;
    pub fn purple_txt_resolve(owner: *const ::std::os::raw::c_char,
                              domain: *const ::std::os::raw::c_char,
                              cb: PurpleTxtCallback, extradata: gpointer)
     -> *mut PurpleSrvTxtQueryData;
    pub fn purple_txt_cancel(query_data: *mut PurpleSrvTxtQueryData);
    pub fn purple_txt_response_get_content(response: *mut PurpleTxtResponse)
     -> *const gchar;
    pub fn purple_txt_response_destroy(response: *mut PurpleTxtResponse);
    pub fn purple_srv_txt_query_destroy(query_data:
                                            *mut PurpleSrvTxtQueryData);
    pub fn purple_srv_txt_query_set_ui_ops(ops: *mut PurpleSrvTxtQueryUiOps);
    pub fn purple_srv_txt_query_get_ui_ops() -> *mut PurpleSrvTxtQueryUiOps;
    pub fn purple_srv_txt_query_get_query(query_data:
                                              *mut PurpleSrvTxtQueryData)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_srv_txt_query_get_type(query_data:
                                             *mut PurpleSrvTxtQueryData)
     -> ::std::os::raw::c_int;
    pub fn purple_idle_touch();
    pub fn purple_idle_set(time: time_t);
    pub fn purple_idle_set_ui_ops(ops: *mut PurpleIdleUiOps);
    pub fn purple_idle_get_ui_ops() -> *mut PurpleIdleUiOps;
    pub fn purple_idle_init();
    pub fn purple_idle_uninit();
    pub fn purple_media_manager_get_type() -> GType;
    pub fn purple_media_manager_get() -> *mut PurpleMediaManager;
    pub fn purple_media_manager_create_media(manager: *mut PurpleMediaManager,
                                             account: *mut PurpleAccount,
                                             conference_type:
                                                 *const ::std::os::raw::c_char,
                                             remote_user:
                                                 *const ::std::os::raw::c_char,
                                             initiator: gboolean)
     -> *mut PurpleMedia;
    pub fn purple_media_manager_get_media(manager: *mut PurpleMediaManager)
     -> *mut GList;
    pub fn purple_media_manager_get_media_by_account(manager:
                                                         *mut PurpleMediaManager,
                                                     account:
                                                         *mut PurpleAccount)
     -> *mut GList;
    pub fn purple_media_manager_remove_media(manager: *mut PurpleMediaManager,
                                             media: *mut PurpleMedia);
    pub fn purple_media_manager_create_private_media(manager:
                                                         *mut PurpleMediaManager,
                                                     account:
                                                         *mut PurpleAccount,
                                                     conference_type:
                                                         *const ::std::os::raw::c_char,
                                                     remote_user:
                                                         *const ::std::os::raw::c_char,
                                                     initiator: gboolean)
     -> *mut PurpleMedia;
    pub fn purple_media_manager_get_private_media(manager:
                                                      *mut PurpleMediaManager)
     -> *mut GList;
    pub fn purple_media_manager_get_private_media_by_account(manager:
                                                                 *mut PurpleMediaManager,
                                                             account:
                                                                 *mut PurpleAccount)
     -> *mut GList;
    pub fn purple_media_manager_create_output_window(manager:
                                                         *mut PurpleMediaManager,
                                                     media: *mut PurpleMedia,
                                                     session_id: *const gchar,
                                                     participant:
                                                         *const gchar)
     -> gboolean;
    pub fn purple_media_manager_set_output_window(manager:
                                                      *mut PurpleMediaManager,
                                                  media: *mut PurpleMedia,
                                                  session_id: *const gchar,
                                                  participant: *const gchar,
                                                  window_id: gulong)
     -> gulong;
    pub fn purple_media_manager_remove_output_window(manager:
                                                         *mut PurpleMediaManager,
                                                     output_window_id: gulong)
     -> gboolean;
    pub fn purple_media_manager_remove_output_windows(manager:
                                                          *mut PurpleMediaManager,
                                                      media: *mut PurpleMedia,
                                                      session_id:
                                                          *const gchar,
                                                      participant:
                                                          *const gchar);
    pub fn purple_media_manager_set_ui_caps(manager: *mut PurpleMediaManager,
                                            caps: PurpleMediaCaps);
    pub fn purple_media_manager_get_ui_caps(manager: *mut PurpleMediaManager)
     -> PurpleMediaCaps;
    pub fn purple_media_manager_set_backend_type(manager:
                                                     *mut PurpleMediaManager,
                                                 backend_type: GType);
    pub fn purple_media_manager_get_backend_type(manager:
                                                     *mut PurpleMediaManager)
     -> GType;
    pub fn purple_media_manager_set_application_data_callbacks(manager:
                                                                   *mut PurpleMediaManager,
                                                               media:
                                                                   *mut PurpleMedia,
                                                               session_id:
                                                                   *const gchar,
                                                               participant:
                                                                   *const gchar,
                                                               callbacks:
                                                                   *mut PurpleMediaAppDataCallbacks,
                                                               user_data:
                                                                   gpointer,
                                                               notify:
                                                                   GDestroyNotify);
    pub fn purple_media_manager_send_application_data(manager:
                                                          *mut PurpleMediaManager,
                                                      media: *mut PurpleMedia,
                                                      session_id:
                                                          *const gchar,
                                                      participant:
                                                          *const gchar,
                                                      buffer: gpointer,
                                                      size: guint,
                                                      blocking: gboolean)
     -> gint;
    pub fn purple_media_manager_receive_application_data(manager:
                                                             *mut PurpleMediaManager,
                                                         media:
                                                             *mut PurpleMedia,
                                                         session_id:
                                                             *const gchar,
                                                         participant:
                                                             *const gchar,
                                                         buffer: gpointer,
                                                         max_size: guint,
                                                         blocking: gboolean)
     -> gint;
    pub fn purple_mime_document_new() -> *mut PurpleMimeDocument;
    pub fn purple_mime_document_free(doc: *mut PurpleMimeDocument);
    pub fn purple_mime_document_parse(buf: *const ::std::os::raw::c_char)
     -> *mut PurpleMimeDocument;
    pub fn purple_mime_document_parsen(buf: *const ::std::os::raw::c_char,
                                       len: gsize) -> *mut PurpleMimeDocument;
    pub fn purple_mime_document_write(doc: *mut PurpleMimeDocument,
                                      str: *mut GString);
    pub fn purple_mime_document_get_fields(doc: *mut PurpleMimeDocument)
     -> *mut GList;
    pub fn purple_mime_document_get_field(doc: *mut PurpleMimeDocument,
                                          field:
                                              *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_mime_document_set_field(doc: *mut PurpleMimeDocument,
                                          field:
                                              *const ::std::os::raw::c_char,
                                          value:
                                              *const ::std::os::raw::c_char);
    pub fn purple_mime_document_get_parts(doc: *mut PurpleMimeDocument)
     -> *mut GList;
    pub fn purple_mime_part_new(doc: *mut PurpleMimeDocument)
     -> *mut PurpleMimePart;
    pub fn purple_mime_part_get_fields(part: *mut PurpleMimePart)
     -> *mut GList;
    pub fn purple_mime_part_get_field(part: *mut PurpleMimePart,
                                      field: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_mime_part_get_field_decoded(part: *mut PurpleMimePart,
                                              field:
                                                  *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_mime_part_set_field(part: *mut PurpleMimePart,
                                      field: *const ::std::os::raw::c_char,
                                      value: *const ::std::os::raw::c_char);
    pub fn purple_mime_part_get_data(part: *mut PurpleMimePart)
     -> *const ::std::os::raw::c_char;
    pub fn purple_mime_part_get_data_decoded(part: *mut PurpleMimePart,
                                             data: *mut *mut guchar,
                                             len: *mut gsize);
    pub fn purple_mime_part_get_length(part: *mut PurpleMimePart) -> gsize;
    pub fn purple_mime_part_set_data(part: *mut PurpleMimePart,
                                     data: *const ::std::os::raw::c_char);
    pub fn purple_pmp_init();
    pub fn purple_pmp_get_public_ip() -> *mut ::std::os::raw::c_char;
    pub fn purple_pmp_create_map(_type: PurplePmpType,
                                 privateport: ::std::os::raw::c_ushort,
                                 publicport: ::std::os::raw::c_ushort,
                                 lifetime: ::std::os::raw::c_int) -> gboolean;
    pub fn purple_pmp_destroy_map(_type: PurplePmpType,
                                  privateport: ::std::os::raw::c_ushort)
     -> gboolean;
    pub fn purple_network_ip_atoi(ip: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_uchar;
    pub fn purple_network_set_public_ip(ip: *const ::std::os::raw::c_char);
    pub fn purple_network_get_public_ip() -> *const ::std::os::raw::c_char;
    pub fn purple_network_get_local_system_ip(fd: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn purple_network_get_all_local_system_ips() -> *mut GList;
    pub fn purple_network_get_my_ip(fd: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn purple_network_listen_map_external(map_external: gboolean);
    pub fn purple_network_listen(port: ::std::os::raw::c_ushort,
                                 socket_type: ::std::os::raw::c_int,
                                 cb: PurpleNetworkListenCallback,
                                 cb_data: gpointer)
     -> *mut PurpleNetworkListenData;
    pub fn purple_network_listen_family(port: ::std::os::raw::c_ushort,
                                        socket_family: ::std::os::raw::c_int,
                                        socket_type: ::std::os::raw::c_int,
                                        cb: PurpleNetworkListenCallback,
                                        cb_data: gpointer)
     -> *mut PurpleNetworkListenData;
    pub fn purple_network_listen_range(start: ::std::os::raw::c_ushort,
                                       end: ::std::os::raw::c_ushort,
                                       socket_type: ::std::os::raw::c_int,
                                       cb: PurpleNetworkListenCallback,
                                       cb_data: gpointer)
     -> *mut PurpleNetworkListenData;
    pub fn purple_network_listen_range_family(start: ::std::os::raw::c_ushort,
                                              end: ::std::os::raw::c_ushort,
                                              socket_family:
                                                  ::std::os::raw::c_int,
                                              socket_type:
                                                  ::std::os::raw::c_int,
                                              cb: PurpleNetworkListenCallback,
                                              cb_data: gpointer)
     -> *mut PurpleNetworkListenData;
    pub fn purple_network_listen_cancel(listen_data:
                                            *mut PurpleNetworkListenData);
    pub fn purple_network_get_port_from_fd(fd: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ushort;
    pub fn purple_network_is_available() -> gboolean;
    pub fn purple_network_force_online();
    pub fn purple_network_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_network_set_stun_server(stun_server: *const gchar);
    pub fn purple_network_get_stun_ip() -> *const gchar;
    pub fn purple_network_set_turn_server(turn_server: *const gchar);
    pub fn purple_network_get_turn_ip() -> *const gchar;
    pub fn purple_network_remove_port_mapping(fd: gint);
    pub fn purple_network_convert_idn_to_ascii(_in: *const gchar,
                                               out: *mut *mut gchar)
     -> ::std::os::raw::c_int;
    pub fn purple_network_init();
    pub fn purple_network_uninit();
    pub fn purple_ntlm_gen_type1(hostname: *const gchar, domain: *const gchar)
     -> *mut gchar;
    pub fn purple_ntlm_parse_type2(type2: *const gchar, flags: *mut guint32)
     -> *mut guint8;
    pub fn purple_ntlm_gen_type3(username: *const gchar, passw: *const gchar,
                                 hostname: *const gchar, domain: *const gchar,
                                 nonce: *const guint8, flags: *mut guint32)
     -> *mut gchar;
    pub fn purple_pounce_new(ui_type: *const ::std::os::raw::c_char,
                             pouncer: *mut PurpleAccount,
                             pouncee: *const ::std::os::raw::c_char,
                             event: PurplePounceEvent,
                             option: PurplePounceOption) -> *mut PurplePounce;
    pub fn purple_pounce_destroy(pounce: *mut PurplePounce);
    pub fn purple_pounce_destroy_all_by_account(account: *mut PurpleAccount);
    pub fn purple_pounce_destroy_all_by_buddy(buddy: *mut PurpleBuddy);
    pub fn purple_pounce_set_events(pounce: *mut PurplePounce,
                                    events: PurplePounceEvent);
    pub fn purple_pounce_set_options(pounce: *mut PurplePounce,
                                     options: PurplePounceOption);
    pub fn purple_pounce_set_pouncer(pounce: *mut PurplePounce,
                                     pouncer: *mut PurpleAccount);
    pub fn purple_pounce_set_pouncee(pounce: *mut PurplePounce,
                                     pouncee: *const ::std::os::raw::c_char);
    pub fn purple_pounce_set_save(pounce: *mut PurplePounce, save: gboolean);
    pub fn purple_pounce_action_register(pounce: *mut PurplePounce,
                                         name: *const ::std::os::raw::c_char);
    pub fn purple_pounce_action_set_enabled(pounce: *mut PurplePounce,
                                            action:
                                                *const ::std::os::raw::c_char,
                                            enabled: gboolean);
    pub fn purple_pounce_action_set_attribute(pounce: *mut PurplePounce,
                                              action:
                                                  *const ::std::os::raw::c_char,
                                              attr:
                                                  *const ::std::os::raw::c_char,
                                              value:
                                                  *const ::std::os::raw::c_char);
    pub fn purple_pounce_set_data(pounce: *mut PurplePounce,
                                  data: *mut ::std::os::raw::c_void);
    pub fn purple_pounce_get_events(pounce: *const PurplePounce)
     -> PurplePounceEvent;
    pub fn purple_pounce_get_options(pounce: *const PurplePounce)
     -> PurplePounceOption;
    pub fn purple_pounce_get_pouncer(pounce: *const PurplePounce)
     -> *mut PurpleAccount;
    pub fn purple_pounce_get_pouncee(pounce: *const PurplePounce)
     -> *const ::std::os::raw::c_char;
    pub fn purple_pounce_get_save(pounce: *const PurplePounce) -> gboolean;
    pub fn purple_pounce_action_is_enabled(pounce: *const PurplePounce,
                                           action:
                                               *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_pounce_action_get_attribute(pounce: *const PurplePounce,
                                              action:
                                                  *const ::std::os::raw::c_char,
                                              attr:
                                                  *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_pounce_get_data(pounce: *const PurplePounce)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_pounce_execute(pouncer: *const PurpleAccount,
                                 pouncee: *const ::std::os::raw::c_char,
                                 events: PurplePounceEvent);
    pub fn purple_find_pounce(pouncer: *const PurpleAccount,
                              pouncee: *const ::std::os::raw::c_char,
                              events: PurplePounceEvent) -> *mut PurplePounce;
    pub fn purple_pounces_load() -> gboolean;
    pub fn purple_pounces_register_handler(ui: *const ::std::os::raw::c_char,
                                           cb: PurplePounceCb,
                                           new_pounce:
                                               ::std::option::Option<unsafe extern "C" fn(pounce:
                                                                                              *mut PurplePounce)>,
                                           free_pounce:
                                               ::std::option::Option<unsafe extern "C" fn(pounce:
                                                                                              *mut PurplePounce)>);
    pub fn purple_pounces_unregister_handler(ui:
                                                 *const ::std::os::raw::c_char);
    pub fn purple_pounces_get_all() -> *mut GList;
    pub fn purple_pounces_get_all_for_ui(ui: *const ::std::os::raw::c_char)
     -> *mut GList;
    pub fn purple_pounces_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_pounces_init();
    pub fn purple_pounces_uninit();
    pub fn purple_request_fields_new() -> *mut PurpleRequestFields;
    pub fn purple_request_fields_destroy(fields: *mut PurpleRequestFields);
    pub fn purple_request_fields_add_group(fields: *mut PurpleRequestFields,
                                           group:
                                               *mut PurpleRequestFieldGroup);
    pub fn purple_request_fields_get_groups(fields:
                                                *const PurpleRequestFields)
     -> *mut GList;
    pub fn purple_request_fields_exists(fields: *const PurpleRequestFields,
                                        id: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_request_fields_get_required(fields:
                                                  *const PurpleRequestFields)
     -> *mut GList;
    pub fn purple_request_fields_is_field_required(fields:
                                                       *const PurpleRequestFields,
                                                   id:
                                                       *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_request_fields_all_required_filled(fields:
                                                         *const PurpleRequestFields)
     -> gboolean;
    pub fn purple_request_fields_get_field(fields: *const PurpleRequestFields,
                                           id: *const ::std::os::raw::c_char)
     -> *mut PurpleRequestField;
    pub fn purple_request_fields_get_string(fields:
                                                *const PurpleRequestFields,
                                            id: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn purple_request_fields_get_integer(fields:
                                                 *const PurpleRequestFields,
                                             id:
                                                 *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn purple_request_fields_get_bool(fields: *const PurpleRequestFields,
                                          id: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_request_fields_get_choice(fields:
                                                *const PurpleRequestFields,
                                            id: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn purple_request_fields_get_account(fields:
                                                 *const PurpleRequestFields,
                                             id:
                                                 *const ::std::os::raw::c_char)
     -> *mut PurpleAccount;
    pub fn purple_request_field_group_new(title:
                                              *const ::std::os::raw::c_char)
     -> *mut PurpleRequestFieldGroup;
    pub fn purple_request_field_group_destroy(group:
                                                  *mut PurpleRequestFieldGroup);
    pub fn purple_request_field_group_add_field(group:
                                                    *mut PurpleRequestFieldGroup,
                                                field:
                                                    *mut PurpleRequestField);
    pub fn purple_request_field_group_get_title(group:
                                                    *const PurpleRequestFieldGroup)
     -> *const ::std::os::raw::c_char;
    pub fn purple_request_field_group_get_fields(group:
                                                     *const PurpleRequestFieldGroup)
     -> *mut GList;
    pub fn purple_request_field_new(id: *const ::std::os::raw::c_char,
                                    text: *const ::std::os::raw::c_char,
                                    _type: PurpleRequestFieldType)
     -> *mut PurpleRequestField;
    pub fn purple_request_field_destroy(field: *mut PurpleRequestField);
    pub fn purple_request_field_set_label(field: *mut PurpleRequestField,
                                          label:
                                              *const ::std::os::raw::c_char);
    pub fn purple_request_field_set_visible(field: *mut PurpleRequestField,
                                            visible: gboolean);
    pub fn purple_request_field_set_type_hint(field: *mut PurpleRequestField,
                                              type_hint:
                                                  *const ::std::os::raw::c_char);
    pub fn purple_request_field_set_required(field: *mut PurpleRequestField,
                                             required: gboolean);
    pub fn purple_request_field_get_type(field: *const PurpleRequestField)
     -> PurpleRequestFieldType;
    pub fn purple_request_field_get_group(field: *const PurpleRequestField)
     -> *mut PurpleRequestFieldGroup;
    pub fn purple_request_field_get_id(field: *const PurpleRequestField)
     -> *const ::std::os::raw::c_char;
    pub fn purple_request_field_get_label(field: *const PurpleRequestField)
     -> *const ::std::os::raw::c_char;
    pub fn purple_request_field_is_visible(field: *const PurpleRequestField)
     -> gboolean;
    pub fn purple_request_field_get_type_hint(field:
                                                  *const PurpleRequestField)
     -> *const ::std::os::raw::c_char;
    pub fn purple_request_field_is_required(field: *const PurpleRequestField)
     -> gboolean;
    pub fn purple_request_field_get_ui_data(field: *const PurpleRequestField)
     -> gpointer;
    pub fn purple_request_field_set_ui_data(field: *mut PurpleRequestField,
                                            ui_data: gpointer);
    pub fn purple_request_field_string_new(id: *const ::std::os::raw::c_char,
                                           text:
                                               *const ::std::os::raw::c_char,
                                           default_value:
                                               *const ::std::os::raw::c_char,
                                           multiline: gboolean)
     -> *mut PurpleRequestField;
    pub fn purple_request_field_string_set_default_value(field:
                                                             *mut PurpleRequestField,
                                                         default_value:
                                                             *const ::std::os::raw::c_char);
    pub fn purple_request_field_string_set_value(field:
                                                     *mut PurpleRequestField,
                                                 value:
                                                     *const ::std::os::raw::c_char);
    pub fn purple_request_field_string_set_masked(field:
                                                      *mut PurpleRequestField,
                                                  masked: gboolean);
    pub fn purple_request_field_string_set_editable(field:
                                                        *mut PurpleRequestField,
                                                    editable: gboolean);
    pub fn purple_request_field_string_get_default_value(field:
                                                             *const PurpleRequestField)
     -> *const ::std::os::raw::c_char;
    pub fn purple_request_field_string_get_value(field:
                                                     *const PurpleRequestField)
     -> *const ::std::os::raw::c_char;
    pub fn purple_request_field_string_is_multiline(field:
                                                        *const PurpleRequestField)
     -> gboolean;
    pub fn purple_request_field_string_is_masked(field:
                                                     *const PurpleRequestField)
     -> gboolean;
    pub fn purple_request_field_string_is_editable(field:
                                                       *const PurpleRequestField)
     -> gboolean;
    pub fn purple_request_field_int_new(id: *const ::std::os::raw::c_char,
                                        text: *const ::std::os::raw::c_char,
                                        default_value: ::std::os::raw::c_int)
     -> *mut PurpleRequestField;
    pub fn purple_request_field_int_set_default_value(field:
                                                          *mut PurpleRequestField,
                                                      default_value:
                                                          ::std::os::raw::c_int);
    pub fn purple_request_field_int_set_value(field: *mut PurpleRequestField,
                                              value: ::std::os::raw::c_int);
    pub fn purple_request_field_int_get_default_value(field:
                                                          *const PurpleRequestField)
     -> ::std::os::raw::c_int;
    pub fn purple_request_field_int_get_value(field:
                                                  *const PurpleRequestField)
     -> ::std::os::raw::c_int;
    pub fn purple_request_field_bool_new(id: *const ::std::os::raw::c_char,
                                         text: *const ::std::os::raw::c_char,
                                         default_value: gboolean)
     -> *mut PurpleRequestField;
    pub fn purple_request_field_bool_set_default_value(field:
                                                           *mut PurpleRequestField,
                                                       default_value:
                                                           gboolean);
    pub fn purple_request_field_bool_set_value(field: *mut PurpleRequestField,
                                               value: gboolean);
    pub fn purple_request_field_bool_get_default_value(field:
                                                           *const PurpleRequestField)
     -> gboolean;
    pub fn purple_request_field_bool_get_value(field:
                                                   *const PurpleRequestField)
     -> gboolean;
    pub fn purple_request_field_choice_new(id: *const ::std::os::raw::c_char,
                                           text:
                                               *const ::std::os::raw::c_char,
                                           default_value:
                                               ::std::os::raw::c_int)
     -> *mut PurpleRequestField;
    pub fn purple_request_field_choice_add(field: *mut PurpleRequestField,
                                           label:
                                               *const ::std::os::raw::c_char);
    pub fn purple_request_field_choice_set_default_value(field:
                                                             *mut PurpleRequestField,
                                                         default_value:
                                                             ::std::os::raw::c_int);
    pub fn purple_request_field_choice_set_value(field:
                                                     *mut PurpleRequestField,
                                                 value:
                                                     ::std::os::raw::c_int);
    pub fn purple_request_field_choice_get_default_value(field:
                                                             *const PurpleRequestField)
     -> ::std::os::raw::c_int;
    pub fn purple_request_field_choice_get_value(field:
                                                     *const PurpleRequestField)
     -> ::std::os::raw::c_int;
    pub fn purple_request_field_choice_get_labels(field:
                                                      *const PurpleRequestField)
     -> *mut GList;
    pub fn purple_request_field_list_new(id: *const ::std::os::raw::c_char,
                                         text: *const ::std::os::raw::c_char)
     -> *mut PurpleRequestField;
    pub fn purple_request_field_list_set_multi_select(field:
                                                          *mut PurpleRequestField,
                                                      multi_select: gboolean);
    pub fn purple_request_field_list_get_multi_select(field:
                                                          *const PurpleRequestField)
     -> gboolean;
    pub fn purple_request_field_list_get_data(field:
                                                  *const PurpleRequestField,
                                              text:
                                                  *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_request_field_list_add(field: *mut PurpleRequestField,
                                         item: *const ::std::os::raw::c_char,
                                         data: *mut ::std::os::raw::c_void);
    pub fn purple_request_field_list_add_icon(field: *mut PurpleRequestField,
                                              item:
                                                  *const ::std::os::raw::c_char,
                                              icon_path:
                                                  *const ::std::os::raw::c_char,
                                              data:
                                                  *mut ::std::os::raw::c_void);
    pub fn purple_request_field_list_add_selected(field:
                                                      *mut PurpleRequestField,
                                                  item:
                                                      *const ::std::os::raw::c_char);
    pub fn purple_request_field_list_clear_selected(field:
                                                        *mut PurpleRequestField);
    pub fn purple_request_field_list_set_selected(field:
                                                      *mut PurpleRequestField,
                                                  items: *mut GList);
    pub fn purple_request_field_list_is_selected(field:
                                                     *const PurpleRequestField,
                                                 item:
                                                     *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_request_field_list_get_selected(field:
                                                      *const PurpleRequestField)
     -> *mut GList;
    pub fn purple_request_field_list_get_items(field:
                                                   *const PurpleRequestField)
     -> *mut GList;
    pub fn purple_request_field_list_get_icons(field:
                                                   *const PurpleRequestField)
     -> *mut GList;
    pub fn purple_request_field_label_new(id: *const ::std::os::raw::c_char,
                                          text: *const ::std::os::raw::c_char)
     -> *mut PurpleRequestField;
    pub fn purple_request_field_image_new(id: *const ::std::os::raw::c_char,
                                          text: *const ::std::os::raw::c_char,
                                          buf: *const ::std::os::raw::c_char,
                                          size: gsize)
     -> *mut PurpleRequestField;
    pub fn purple_request_field_image_set_scale(field:
                                                    *mut PurpleRequestField,
                                                x: ::std::os::raw::c_uint,
                                                y: ::std::os::raw::c_uint);
    pub fn purple_request_field_image_get_buffer(field:
                                                     *mut PurpleRequestField)
     -> *const ::std::os::raw::c_char;
    pub fn purple_request_field_image_get_size(field: *mut PurpleRequestField)
     -> gsize;
    pub fn purple_request_field_image_get_scale_x(field:
                                                      *mut PurpleRequestField)
     -> ::std::os::raw::c_uint;
    pub fn purple_request_field_image_get_scale_y(field:
                                                      *mut PurpleRequestField)
     -> ::std::os::raw::c_uint;
    pub fn purple_request_field_account_new(id: *const ::std::os::raw::c_char,
                                            text:
                                                *const ::std::os::raw::c_char,
                                            account: *mut PurpleAccount)
     -> *mut PurpleRequestField;
    pub fn purple_request_field_account_set_default_value(field:
                                                              *mut PurpleRequestField,
                                                          default_value:
                                                              *mut PurpleAccount);
    pub fn purple_request_field_account_set_value(field:
                                                      *mut PurpleRequestField,
                                                  value: *mut PurpleAccount);
    pub fn purple_request_field_account_set_show_all(field:
                                                         *mut PurpleRequestField,
                                                     show_all: gboolean);
    pub fn purple_request_field_account_set_filter(field:
                                                       *mut PurpleRequestField,
                                                   filter_func:
                                                       PurpleFilterAccountFunc);
    pub fn purple_request_field_account_get_default_value(field:
                                                              *const PurpleRequestField)
     -> *mut PurpleAccount;
    pub fn purple_request_field_account_get_value(field:
                                                      *const PurpleRequestField)
     -> *mut PurpleAccount;
    pub fn purple_request_field_account_get_show_all(field:
                                                         *const PurpleRequestField)
     -> gboolean;
    pub fn purple_request_field_account_get_filter(field:
                                                       *const PurpleRequestField)
     -> PurpleFilterAccountFunc;
    pub fn purple_request_input(handle: *mut ::std::os::raw::c_void,
                                title: *const ::std::os::raw::c_char,
                                primary: *const ::std::os::raw::c_char,
                                secondary: *const ::std::os::raw::c_char,
                                default_value: *const ::std::os::raw::c_char,
                                multiline: gboolean, masked: gboolean,
                                hint: *mut gchar,
                                ok_text: *const ::std::os::raw::c_char,
                                ok_cb: GCallback,
                                cancel_text: *const ::std::os::raw::c_char,
                                cancel_cb: GCallback,
                                account: *mut PurpleAccount,
                                who: *const ::std::os::raw::c_char,
                                conv: *mut PurpleConversation,
                                user_data: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_request_choice(handle: *mut ::std::os::raw::c_void,
                                 title: *const ::std::os::raw::c_char,
                                 primary: *const ::std::os::raw::c_char,
                                 secondary: *const ::std::os::raw::c_char,
                                 default_value: ::std::os::raw::c_int,
                                 ok_text: *const ::std::os::raw::c_char,
                                 ok_cb: GCallback,
                                 cancel_text: *const ::std::os::raw::c_char,
                                 cancel_cb: GCallback,
                                 account: *mut PurpleAccount,
                                 who: *const ::std::os::raw::c_char,
                                 conv: *mut PurpleConversation,
                                 user_data: *mut ::std::os::raw::c_void, ...)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_request_choice_varg(handle: *mut ::std::os::raw::c_void,
                                      title: *const ::std::os::raw::c_char,
                                      primary: *const ::std::os::raw::c_char,
                                      secondary:
                                          *const ::std::os::raw::c_char,
                                      default_value: ::std::os::raw::c_int,
                                      ok_text: *const ::std::os::raw::c_char,
                                      ok_cb: GCallback,
                                      cancel_text:
                                          *const ::std::os::raw::c_char,
                                      cancel_cb: GCallback,
                                      account: *mut PurpleAccount,
                                      who: *const ::std::os::raw::c_char,
                                      conv: *mut PurpleConversation,
                                      user_data: *mut ::std::os::raw::c_void,
                                      choices: va_list)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_request_action(handle: *mut ::std::os::raw::c_void,
                                 title: *const ::std::os::raw::c_char,
                                 primary: *const ::std::os::raw::c_char,
                                 secondary: *const ::std::os::raw::c_char,
                                 default_action: ::std::os::raw::c_int,
                                 account: *mut PurpleAccount,
                                 who: *const ::std::os::raw::c_char,
                                 conv: *mut PurpleConversation,
                                 user_data: *mut ::std::os::raw::c_void,
                                 action_count: size_t, ...)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_request_action_varg(handle: *mut ::std::os::raw::c_void,
                                      title: *const ::std::os::raw::c_char,
                                      primary: *const ::std::os::raw::c_char,
                                      secondary:
                                          *const ::std::os::raw::c_char,
                                      default_action: ::std::os::raw::c_int,
                                      account: *mut PurpleAccount,
                                      who: *const ::std::os::raw::c_char,
                                      conv: *mut PurpleConversation,
                                      user_data: *mut ::std::os::raw::c_void,
                                      action_count: size_t, actions: va_list)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_request_action_with_icon(handle:
                                               *mut ::std::os::raw::c_void,
                                           title:
                                               *const ::std::os::raw::c_char,
                                           primary:
                                               *const ::std::os::raw::c_char,
                                           secondary:
                                               *const ::std::os::raw::c_char,
                                           default_action:
                                               ::std::os::raw::c_int,
                                           account: *mut PurpleAccount,
                                           who: *const ::std::os::raw::c_char,
                                           conv: *mut PurpleConversation,
                                           icon_data: gconstpointer,
                                           icon_size: gsize,
                                           user_data:
                                               *mut ::std::os::raw::c_void,
                                           action_count: size_t, ...)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_request_action_with_icon_varg(handle:
                                                    *mut ::std::os::raw::c_void,
                                                title:
                                                    *const ::std::os::raw::c_char,
                                                primary:
                                                    *const ::std::os::raw::c_char,
                                                secondary:
                                                    *const ::std::os::raw::c_char,
                                                default_action:
                                                    ::std::os::raw::c_int,
                                                account: *mut PurpleAccount,
                                                who:
                                                    *const ::std::os::raw::c_char,
                                                conv: *mut PurpleConversation,
                                                icon_data: gconstpointer,
                                                icon_size: gsize,
                                                user_data:
                                                    *mut ::std::os::raw::c_void,
                                                action_count: size_t,
                                                actions: va_list)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_request_fields(handle: *mut ::std::os::raw::c_void,
                                 title: *const ::std::os::raw::c_char,
                                 primary: *const ::std::os::raw::c_char,
                                 secondary: *const ::std::os::raw::c_char,
                                 fields: *mut PurpleRequestFields,
                                 ok_text: *const ::std::os::raw::c_char,
                                 ok_cb: GCallback,
                                 cancel_text: *const ::std::os::raw::c_char,
                                 cancel_cb: GCallback,
                                 account: *mut PurpleAccount,
                                 who: *const ::std::os::raw::c_char,
                                 conv: *mut PurpleConversation,
                                 user_data: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_request_close(_type: PurpleRequestType,
                                uihandle: *mut ::std::os::raw::c_void);
    pub fn purple_request_close_with_handle(handle:
                                                *mut ::std::os::raw::c_void);
    pub fn purple_request_file(handle: *mut ::std::os::raw::c_void,
                               title: *const ::std::os::raw::c_char,
                               filename: *const ::std::os::raw::c_char,
                               savedialog: gboolean, ok_cb: GCallback,
                               cancel_cb: GCallback,
                               account: *mut PurpleAccount,
                               who: *const ::std::os::raw::c_char,
                               conv: *mut PurpleConversation,
                               user_data: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_request_folder(handle: *mut ::std::os::raw::c_void,
                                 title: *const ::std::os::raw::c_char,
                                 dirname: *const ::std::os::raw::c_char,
                                 ok_cb: GCallback, cancel_cb: GCallback,
                                 account: *mut PurpleAccount,
                                 who: *const ::std::os::raw::c_char,
                                 conv: *mut PurpleConversation,
                                 user_data: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn purple_request_set_ui_ops(ops: *mut PurpleRequestUiOps);
    pub fn purple_request_get_ui_ops() -> *mut PurpleRequestUiOps;
    pub fn purple_savedstatus_new(title: *const ::std::os::raw::c_char,
                                  _type: PurpleStatusPrimitive)
     -> *mut PurpleSavedStatus;
    pub fn purple_savedstatus_set_title(status: *mut PurpleSavedStatus,
                                        title: *const ::std::os::raw::c_char);
    pub fn purple_savedstatus_set_type(status: *mut PurpleSavedStatus,
                                       _type: PurpleStatusPrimitive);
    pub fn purple_savedstatus_set_message(status: *mut PurpleSavedStatus,
                                          message:
                                              *const ::std::os::raw::c_char);
    pub fn purple_savedstatus_set_substatus(status: *mut PurpleSavedStatus,
                                            account: *const PurpleAccount,
                                            _type: *const PurpleStatusType,
                                            message:
                                                *const ::std::os::raw::c_char);
    pub fn purple_savedstatus_unset_substatus(saved_status:
                                                  *mut PurpleSavedStatus,
                                              account: *const PurpleAccount);
    pub fn purple_savedstatus_delete(title: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_savedstatus_delete_by_status(saved_status:
                                                   *mut PurpleSavedStatus);
    pub fn purple_savedstatuses_get_all() -> *mut GList;
    pub fn purple_savedstatuses_get_popular(how_many: ::std::os::raw::c_uint)
     -> *mut GList;
    pub fn purple_savedstatus_get_current() -> *mut PurpleSavedStatus;
    pub fn purple_savedstatus_get_default() -> *mut PurpleSavedStatus;
    pub fn purple_savedstatus_get_idleaway() -> *mut PurpleSavedStatus;
    pub fn purple_savedstatus_is_idleaway() -> gboolean;
    pub fn purple_savedstatus_set_idleaway(idleaway: gboolean);
    pub fn purple_savedstatus_get_startup() -> *mut PurpleSavedStatus;
    pub fn purple_savedstatus_find(title: *const ::std::os::raw::c_char)
     -> *mut PurpleSavedStatus;
    pub fn purple_savedstatus_find_by_creation_time(creation_time: time_t)
     -> *mut PurpleSavedStatus;
    pub fn purple_savedstatus_find_transient_by_type_and_message(_type:
                                                                     PurpleStatusPrimitive,
                                                                 message:
                                                                     *const ::std::os::raw::c_char)
     -> *mut PurpleSavedStatus;
    pub fn purple_savedstatus_is_transient(saved_status:
                                               *const PurpleSavedStatus)
     -> gboolean;
    pub fn purple_savedstatus_get_title(saved_status:
                                            *const PurpleSavedStatus)
     -> *const ::std::os::raw::c_char;
    pub fn purple_savedstatus_get_type(saved_status: *const PurpleSavedStatus)
     -> PurpleStatusPrimitive;
    pub fn purple_savedstatus_get_message(saved_status:
                                              *const PurpleSavedStatus)
     -> *const ::std::os::raw::c_char;
    pub fn purple_savedstatus_get_creation_time(saved_status:
                                                    *const PurpleSavedStatus)
     -> time_t;
    pub fn purple_savedstatus_has_substatuses(saved_status:
                                                  *const PurpleSavedStatus)
     -> gboolean;
    pub fn purple_savedstatus_get_substatus(saved_status:
                                                *const PurpleSavedStatus,
                                            account: *const PurpleAccount)
     -> *mut PurpleSavedStatusSub;
    pub fn purple_savedstatus_substatus_get_type(substatus:
                                                     *const PurpleSavedStatusSub)
     -> *const PurpleStatusType;
    pub fn purple_savedstatus_substatus_get_message(substatus:
                                                        *const PurpleSavedStatusSub)
     -> *const ::std::os::raw::c_char;
    pub fn purple_savedstatus_activate(saved_status: *mut PurpleSavedStatus);
    pub fn purple_savedstatus_activate_for_account(saved_status:
                                                       *const PurpleSavedStatus,
                                                   account:
                                                       *mut PurpleAccount);
    pub fn purple_savedstatuses_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_savedstatuses_init();
    pub fn purple_savedstatuses_uninit();
    pub fn purple_smiley_get_type() -> GType;
    pub fn purple_smiley_new(img: *mut PurpleStoredImage,
                             shortcut: *const ::std::os::raw::c_char)
     -> *mut PurpleSmiley;
    pub fn purple_smiley_new_from_file(shortcut:
                                           *const ::std::os::raw::c_char,
                                       filepath:
                                           *const ::std::os::raw::c_char)
     -> *mut PurpleSmiley;
    pub fn purple_smiley_delete(smiley: *mut PurpleSmiley);
    pub fn purple_smiley_set_shortcut(smiley: *mut PurpleSmiley,
                                      shortcut: *const ::std::os::raw::c_char)
     -> gboolean;
    pub fn purple_smiley_set_data(smiley: *mut PurpleSmiley,
                                  smiley_data: *mut guchar,
                                  smiley_data_len: size_t);
    pub fn purple_smiley_get_shortcut(smiley: *const PurpleSmiley)
     -> *const ::std::os::raw::c_char;
    pub fn purple_smiley_get_checksum(smiley: *const PurpleSmiley)
     -> *const ::std::os::raw::c_char;
    pub fn purple_smiley_get_stored_image(smiley: *const PurpleSmiley)
     -> *mut PurpleStoredImage;
    pub fn purple_smiley_get_data(smiley: *const PurpleSmiley,
                                  len: *mut size_t) -> gconstpointer;
    pub fn purple_smiley_get_extension(smiley: *const PurpleSmiley)
     -> *const ::std::os::raw::c_char;
    pub fn purple_smiley_get_full_path(smiley: *mut PurpleSmiley)
     -> *mut ::std::os::raw::c_char;
    pub fn purple_smileys_get_all() -> *mut GList;
    pub fn purple_smileys_find_by_shortcut(shortcut:
                                               *const ::std::os::raw::c_char)
     -> *mut PurpleSmiley;
    pub fn purple_smileys_find_by_checksum(checksum:
                                               *const ::std::os::raw::c_char)
     -> *mut PurpleSmiley;
    pub fn purple_smileys_get_storing_dir() -> *const ::std::os::raw::c_char;
    pub fn purple_smileys_init();
    pub fn purple_smileys_uninit();
    pub fn purple_sound_play_file(filename: *const ::std::os::raw::c_char,
                                  account: *const PurpleAccount);
    pub fn purple_sound_play_event(event: PurpleSoundEventID,
                                   account: *const PurpleAccount);
    pub fn purple_sound_set_ui_ops(ops: *mut PurpleSoundUiOps);
    pub fn purple_sound_get_ui_ops() -> *mut PurpleSoundUiOps;
    pub fn purple_sound_init();
    pub fn purple_sound_uninit();
    pub fn purple_sounds_get_handle() -> *mut ::std::os::raw::c_void;
    pub fn purple_theme_get_type() -> GType;
    pub fn purple_theme_get_name(theme: *mut PurpleTheme) -> *const gchar;
    pub fn purple_theme_set_name(theme: *mut PurpleTheme, name: *const gchar);
    pub fn purple_theme_get_description(theme: *mut PurpleTheme)
     -> *const gchar;
    pub fn purple_theme_set_description(theme: *mut PurpleTheme,
                                        description: *const gchar);
    pub fn purple_theme_get_author(theme: *mut PurpleTheme) -> *const gchar;
    pub fn purple_theme_set_author(theme: *mut PurpleTheme,
                                   author: *const gchar);
    pub fn purple_theme_get_type_string(theme: *mut PurpleTheme)
     -> *const gchar;
    pub fn purple_theme_get_dir(theme: *mut PurpleTheme) -> *const gchar;
    pub fn purple_theme_set_dir(theme: *mut PurpleTheme, dir: *const gchar);
    pub fn purple_theme_get_image(theme: *mut PurpleTheme) -> *const gchar;
    pub fn purple_theme_get_image_full(theme: *mut PurpleTheme) -> *mut gchar;
    pub fn purple_theme_set_image(theme: *mut PurpleTheme, img: *const gchar);
    pub fn purple_sound_theme_get_type() -> GType;
    pub fn purple_sound_theme_get_file(theme: *mut PurpleSoundTheme,
                                       event: *const gchar) -> *const gchar;
    pub fn purple_sound_theme_get_file_full(theme: *mut PurpleSoundTheme,
                                            event: *const gchar)
     -> *mut gchar;
    pub fn purple_sound_theme_set_file(theme: *mut PurpleSoundTheme,
                                       event: *const gchar,
                                       filename: *const gchar);
    pub fn purple_theme_loader_get_type() -> GType;
    pub fn purple_theme_loader_get_type_string(_self: *mut PurpleThemeLoader)
     -> *const gchar;
    pub fn purple_theme_loader_build(loader: *mut PurpleThemeLoader,
                                     dir: *const gchar) -> *mut PurpleTheme;
    pub fn purple_sound_theme_loader_get_type() -> GType;
    pub fn purple_stringref_new(value: *const ::std::os::raw::c_char)
     -> *mut PurpleStringref;
    pub fn purple_stringref_new_noref(value: *const ::std::os::raw::c_char)
     -> *mut PurpleStringref;
    pub fn purple_stringref_printf(format: *const ::std::os::raw::c_char, ...)
     -> *mut PurpleStringref;
    pub fn purple_stringref_ref(stringref: *mut PurpleStringref)
     -> *mut PurpleStringref;
    pub fn purple_stringref_unref(stringref: *mut PurpleStringref);
    pub fn purple_stringref_value(stringref: *const PurpleStringref)
     -> *const ::std::os::raw::c_char;
    pub fn purple_stringref_cmp(s1: *const PurpleStringref,
                                s2: *const PurpleStringref)
     -> ::std::os::raw::c_int;
    pub fn purple_stringref_len(stringref: *const PurpleStringref) -> size_t;
    pub fn purple_stun_discover(cb: StunCallback)
     -> *mut PurpleStunNatDiscovery;
    pub fn purple_stun_init();
    pub fn purple_theme_manager_get_type() -> GType;
    pub fn purple_theme_manager_init();
    pub fn purple_theme_manager_uninit();
    pub fn purple_theme_manager_refresh();
    pub fn purple_theme_manager_find_theme(name: *const gchar,
                                           _type: *const gchar)
     -> *mut PurpleTheme;
    pub fn purple_theme_manager_add_theme(theme: *mut PurpleTheme);
    pub fn purple_theme_manager_remove_theme(theme: *mut PurpleTheme);
    pub fn purple_theme_manager_register_type(loader: *mut PurpleThemeLoader);
    pub fn purple_theme_manager_unregister_type(loader:
                                                    *mut PurpleThemeLoader);
    pub fn purple_theme_manager_for_each_theme(func: PTFunc);
    pub fn purple_theme_manager_load_theme(theme_dir: *const gchar,
                                           _type: *const gchar)
     -> *mut PurpleTheme;
    pub fn purple_upnp_init();
    pub fn purple_upnp_discover(cb: PurpleUPnPCallback, cb_data: gpointer);
    pub fn purple_upnp_get_public_ip() -> *const gchar;
    pub fn purple_upnp_cancel_port_mapping(mapping_data:
                                               *mut UPnPMappingAddRemove);
    pub fn purple_upnp_set_port_mapping(portmap: ::std::os::raw::c_ushort,
                                        protocol: *const gchar,
                                        cb: PurpleUPnPCallback,
                                        cb_data: gpointer)
     -> *mut UPnPMappingAddRemove;
    pub fn purple_upnp_remove_port_mapping(portmap: ::std::os::raw::c_ushort,
                                           protocol: *const gchar,
                                           cb: PurpleUPnPCallback,
                                           cb_data: gpointer)
     -> *mut UPnPMappingAddRemove;
    pub fn purple_version_check(required_major: guint, required_minor: guint,
                                required_micro: guint)
     -> *const ::std::os::raw::c_char;
}
